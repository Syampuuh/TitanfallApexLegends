untyped

                                                                                              
  	                
                                                                                       
                                                                                              

global function ClientCodeCallback_MapSpawn
global function ClientCodeCallback_RunClientConnectScripts
global function ClientCodeCallback_FullUpdate
global function Init_PlayerScripts
global function ServerCallback_ClientInitComplete
global function ClientCodeCallback_ClientInit
global function ClientCodeCallback_ClientShutdown
global function ClientCodeCallback_OnDropShipCinematicEventStateChanged
global function ClientCodeCallback_OnDetenteEnded
global function ClientCodeCallback_ResolutionChanged
global function PerfInitLabels
global function GetCockpitRuiHeight

global function GetVirtualScreenSize
global function GetCurrentVirtualScreenSize
global function GetScaledVirtualScreenSize
global function UpdateFullscreenTopology
global function GetNearestAspectRatio

global function CreateFullscreenTopology

global var Hud = null

global bool TITAN_CORE_ENABLED = true

UISize function GetVirtualScreenSize( int width, int height )
{
	UISize virtualScreenSize
	float aspectRatio = width / float( height )
	virtualScreenSize.width = aspectRatio < ASPECT_RATIO_16_BY_9 ? 1920 : int( 1080 * aspectRatio )
	virtualScreenSize.height = aspectRatio < ASPECT_RATIO_16_BY_9 ? int( 1920 / aspectRatio ) : 1080

	return virtualScreenSize
}


float function GetNearestAspectRatio( int width, int height )
{
	float aspectRatio = width / float( height )

	if ( fabs( ASPECT_RATIO_16_BY_10 - aspectRatio ) < 0.1 )
		return aspectRatio
	else if ( fabs( ASPECT_RATIO_16_BY_9 - aspectRatio ) < 0.1 )
		return aspectRatio
	else if ( fabs( ASPECT_RATIO_21_BY_9 - aspectRatio ) < 0.1 )
		return aspectRatio                                                                                                                                
	else if ( fabs( (16.0 * 3 / 9.0) - aspectRatio ) < 0.1 )
		return ASPECT_RATIO_16_BY_9
	else if ( fabs( (16.0 * 3 / 10.0) - aspectRatio ) < 0.1 )
		return ASPECT_RATIO_16_BY_10

	return aspectRatio
}


UISize function GetCurrentVirtualScreenSize( bool isHud )
{
	UISize screenSize = GetScreenSize()

	                                                                     
	if ( isHud )
	{
		float clampedAspectRatio = GetNearestAspectRatio( screenSize.width, screenSize.height )                                                                          
		float aspectRatio        = screenSize.width / float( screenSize.height )
		if ( aspectRatio != clampedAspectRatio )
			screenSize.width = int( screenSize.height * clampedAspectRatio )
	}

	return GetVirtualScreenSize( screenSize.width, screenSize.height )
}


UISize function GetScaledVirtualScreenSize( UISize virtualScreenSize, UISize screenSize )
{
	float scale = screenSize.height / float( virtualScreenSize.height )
	UISize scaledSize
	scaledSize.width = int( virtualScreenSize.width * scale )
	scaledSize.height = int( virtualScreenSize.height * scale )

	return scaledSize
}


void function ClientCodeCallback_MapSpawn()
{
	ScriptCompilerTest()
	LevelVarInit()

	Hud = getroottable().Hud

	level.scoreLimit <- {}
	level.scoreLimit[TEAM_IMC] <- GetScoreLimit_FromPlaylist()
	level.scoreLimit[TEAM_MILITIA] <- GetScoreLimit_FromPlaylist()

	level.clientVars <- {}

	level.onPlayerLifeStateChanged <- []

	level.clientScriptInitialized <- false

	RegisterSignal( "forever" )
	RegisterSignal( "UpdatePlayerStatusCounts" )

	FlagInit( "ClientInitComplete" )
	FlagInit( "EntitiesDidLoad" )
	FlagInit( "ClientNetGlobalEntity" )
	FlagInit( "ClientNetGlobalNonRewindEntity" )

	PrecacheResFiles()

	#if DEV
		ClModelViewInit()
	#endif

	CreateHUDRuiTopologies()

	SV_CL_Shared_Init()

	if ( IsLobby() )
	{
		                                                                                                      
		                                                                                                            
		                             
	}

	AddCallback_UIScriptReset( ResetUIDisableDev )
}

void function ResetUIDisableDev()
{
	RunUIScript( "UICallback_SetUIVar", "uiDisableDev", GetGlobalNonRewindNetBool( "uiDisableDev" ) )
}

float function GetCockpitRuiHeight()
{
	UISize screenSize = GetScreenSize()

	return COCKPIT_RUI_WIDTH / (screenSize.width / float( screenSize.height ))
}


void function PrecacheResFiles()
{
	if ( IsLobby() )
		return

	PrecacheRes( "vgui_icon" )
	PrecacheRes( "vgui_binding" )
	PrecacheRes( "vgui_jump_quest" )
	PrecacheRes( "vgui_xpbar" )
	PrecacheRes( "vgui_fullscreen_titan" )
	PrecacheRes( "vgui_fullscreen_pilot" )
	PrecacheRes( "vgui_enemy_announce" )
	PrecacheRes( "Coop_TeamScoreEventNotification" )
	PrecacheRes( "control_panel_generic_screen" )

	PrecacheRes( "vgui_callsign_menu" )
}


void function ClientCodeCallback_OnDetenteEnded()
{
}

struct TopologyCreateData
{
	vector org
	vector right
	vector down
}

TopologyCreateData function BuildTopologyCreateData( bool isHud )
{
	UISize screenSize              = GetScreenSize()
	UISize virtualScreenSize       = GetCurrentVirtualScreenSize( isHud )
	UISize scaledVirtualScreenSize = GetScaledVirtualScreenSize( virtualScreenSize, screenSize )
	float xOffset                  = ((screenSize.width - scaledVirtualScreenSize.width) / 2.0)

	TopologyCreateData data
	{
		data.org = <xOffset, 0, 0>
		data.right = <float( scaledVirtualScreenSize.width ), 0, 0>
		data.down = <0, float( scaledVirtualScreenSize.height ), 0>
	}
	return data
}


var function CreateFullscreenTopology( bool isHud )
{
	TopologyCreateData tcd = BuildTopologyCreateData( isHud )
	var result             = RuiTopology_CreatePlane( tcd.org, tcd.right, tcd.down, false )
	return result
}


void function UpdateFullscreenTopology( var topo, bool isHud )
{
	TopologyCreateData tcd = BuildTopologyCreateData( isHud )
	RuiTopology_UpdatePos( topo, tcd.org, tcd.right, tcd.down )
}


void function CreateHUDRuiTopologies()
{
	clGlobal.topoFullScreen = CreateFullscreenTopology( false )
	clGlobal.topoFullscreenHud = CreateFullscreenTopology( true )
	clGlobal.topoFullscreenHudPermanent = CreateFullscreenTopology( true )
	clGlobal.topoFullscreenFullMap = CreateFullscreenTopology( true )
	clGlobal.topFullscreenTargetInfo = CreateFullscreenTopology( true )

	RuiTopology_ShareWithCode( clGlobal.topFullscreenTargetInfo, RUI_CODE_TOPO_TARGET_INFO_HUD )

	          
	{
		clGlobal.topoTitanCockpitHud = RuiTopology_CreateSphere( <-120, 0, -TITAN_COCKPIT_TOPO_RADIUS * deg_sin( TITAN_COCKPIT_ROTATION_ANGLE )>, <0, -1, 0>, <deg_sin( TITAN_COCKPIT_ROTATION_ANGLE ), 0, -deg_cos( TITAN_COCKPIT_ROTATION_ANGLE )>, TITAN_COCKPIT_TOPO_RADIUS, TITAN_COCKPIT_RUI_SCREEN_WIDTH, TITAN_COCKPIT_RUI_SCREEN_WIDTH / 1.7665, TITAN_COCKPIT_RUI_SUBDIV )
		clGlobal.topoTitanCockpitLowerHud = RuiTopology_CreatePlane( <0, 0, 0>, <0, -TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE, 0>, <0, 0, -TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE * TITAN_COCKPIT_LOWER_RUI_SCREEN_HEIGHT_SCALE>, true )
		clGlobal.topoTitanCockpitInstrument1 = RuiTopology_CreatePlane( <0, 0, 0>, <0, -1, 0>, <0, 0, -1>, true )
	}

	UpdateFullscreenTopology( clGlobal.topoFullScreen, false )
	UpdateFullscreenTopology( clGlobal.topoFullscreenHud, true )
	UpdateFullscreenTopology( clGlobal.topoFullscreenHudPermanent, true )
	UpdateFullscreenTopology( clGlobal.topoFullscreenFullMap, true )
	UpdateFullscreenTopology( clGlobal.topFullscreenTargetInfo, true )
}


void function ClientCodeCallback_ResolutionChanged( bool askForConfirmation )
{
	UpdateMainHudVisibility( GetLocalViewPlayer() )
	UpdateFullscreenTopology( clGlobal.topoFullScreen, false )
	UpdateFullscreenTopology( clGlobal.topoFullscreenFullMap, true )
	InitChatHUD()                                                                                                                                

	if ( !IsLobby() )
		FullMap_UpdateTopologies()

	foreach ( func in clGlobal.resolutionChangedCallbacks )
		func()
}


void function PrecacheRes( string resFile )
{
	entity vgui = CreateClientsideVGuiScreen( resFile, VGUI_SCREEN_PASS_WORLD, <0, 0, 0>, <0, 0, 0>, 4, 4 )
	Assert( vgui != null, "Failed to precache res file " + resFile )
	vgui.Destroy()
}


void function ClientCodeCallback_FullUpdate()
{
	foreach ( callbackFunc in clGlobal.fullUpdateCallbacks )
		callbackFunc()
}


void function ClientCodeCallback_RunClientConnectScripts( entity player )
{
	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )
	thread RunClientConnectScriptsThreaded( player )
}


void function RunClientConnectScriptsThreaded( entity player )
{
	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )

	if ( level.clientScriptInitialized )
		return

	player.cv = level.clientVars
	Assert( IsValid(player.cv) )

	clGlobal.levelEnt = CreateClientSidePointCamera( <0, 0, 0>, <0, 0, 0>, 50 )
	clGlobal.levelEnt.Hide()
	Assert( clGlobal.levelEnt )

	Init_ClientScripts( player )

	FlagWait( "ClientInitComplete" )
	FlagWait( "ClientNetGlobalEntity" )
	FlagWait( "ClientNetGlobalNonRewindEntity" )

	player = GetLocalClientPlayer()

	Assert( IsValid( player ) )
	Assert( player == GetLocalClientPlayer() )

	level.clientScriptInitialized = true

	ExecuteNetBufferedCallbacks()

	TriggerGlobalChangeCallbacks()

	RunCallbacks_EntitiesDidLoad()

	FlagSet( "EntitiesDidLoad" )
}


void function Init_ClientScripts( entity player )
{
	InitChatHUD()

	if ( !IsLobby() )
	{
		Player_AddClient( player )

		KillReplayHud_AddClient()

		if ( clGlobal.initScoreboardFunc != null )
			clGlobal.initScoreboardFunc()

		MainHud_AddClient( player )
		InitCrosshair()
		Remote_ServerCallFunction( "ClientCallback_ClientStatus", IsPartyMember( player ))
	}

	                                           
	foreach ( callbackFunc in clGlobal.onClientScriptInitCallback )
	{
		callbackFunc( player )
	}

	thread UpdateViewPlayerThink()

	DoF_SetNearDepthToDefault()
	DoF_SetFarDepthToDefault()
}


void function UpdateViewPlayerThink()
{
	entity lastLocalViewPlayer
	while ( true )
	{
		entity localViewPlayer = GetLocalViewPlayer()
		if ( lastLocalViewPlayer != localViewPlayer )
			RunLocalViewPlayerChangedCallbacks( localViewPlayer )

		lastLocalViewPlayer = localViewPlayer
		WaitFrame()
	}
}


void function Init_PlayerScripts( entity player )
{
	foreach ( addLocalPlayerFunc in clGlobal.addLocalPlayerFuncs )
		addLocalPlayerFunc( player )

	player.p.playerScriptsInitialized = true
}

                                                                      
void function ServerCallback_ClientInitComplete()
{
	FlagSet( "ClientInitComplete" )
}

void function ClientCodeCallback_ClientInit()
{
	                                                                     
}

void function ClientCodeCallback_ClientShutdown()
{
	                                                                         
}

                                                                 
 
	                                     

	                 
		                 

	                                                         
 

                                               
 
	                         
	 
		              

		                          
		 
			                                  
		 
	 
   

void function PerfInitLabels()
{
	PerfClearAll()

	table Table = expect table( getconsttable().PerfIndexClient )
	foreach ( label, intval in Table )
		PerfInitLabel( intval, string( label ) )

	table sharedTable = expect table( getconsttable().PerfIndexShared )
	foreach ( label, intval in sharedTable )
		PerfInitLabel( intval + SharedPerfIndexStart, string( label ) )
}


function ClientCodeCallback_OnDropShipCinematicEventStateChanged()
{
}