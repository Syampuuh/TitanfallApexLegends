  

#if SERVER || CLIENT || UI
global function CustomizeCommon_Init
#endif

#if UI
global function CustomizeButton_UpdateAndMarkForUpdating
global function CustomizeButton_UnmarkForUpdating
global function CustomizeButton_GetItemFlavor
global function CustomizeMenus_GetCollectedString
global function CustomizeMenus_GetOwnedCount
global function CustomizeMenus_IsFocusedItem
global function CustomizeMenus_IsFocusedItemParentItemLocked
global function CustomizeMenus_IsFocusedItemEquippable
global function CustomizeMenus_IsFocusedItemFavoriteable
global function CustomizeMenus_IsFocusedItemFavorite
global function CustomizeMenus_IsFocusedItemAlreadyFavored
global function CustomizeMenus_IsFocusedItemAbleToBeFavored
global function CustomizeMenus_IsItemFlavorAbleToBeFavored
global function CustomizeMenus_IsFocusedItemLocked
global function CustomizeMenus_IsFocusedItemUnlocked
global function CustomizeMenus_UpdateActionContext
global function CustomizeMenus_SetActionButton
global function CustomizeButton_OnMiddleClick
global function CustomizeButton_OnClick
global function CustomizeButton_AddOrClearFavoredQuip
global function ActionButton_OnClick
global function CanEquipCanBuyCharacterItemCheck

global function IsItemFlavorInspectable

global function RefreshCharacterAfterPurchase

#endif

#if CLIENT || UI
global function CustomizeMenu_GetRewardButtonImage
global function CustomizeMenu_GetGenericRewardButtonImage
global function GetAppropriateLoadoutSlotsForItemFlavor
global function IsItemFlavorEquippable
global function EquipItemFlavorInAppropriateLoadoutSlot
global function GetLocalizedItemFlavorDescriptionForOfferButton
global function GetLocalizedItemFlavorDescriptionForPlacard
#endif


#if UI
global function SetOrClearFavoriteFromFocus
global function SetOrClearFavoredQuipFromFocus

global enum eItemCanEquipCanBuyStatus
{
	CAN_EQUIP_CAN_BUY,
	CAN_EQUIP_CANNOT_BUY,
	CANNOT_EQUIP_CAN_BUY,
	CANNOT_EQUIP_CANNOT_BUY,
	IS_EQUIPPED_AUTOMATICALLY,
}
#endif

#if UI
struct CustomizeButtonContext
{
	int                 index
	var                 button
	array<LoadoutEntry> loadoutEntries
	array<LoadoutEntry> auxEntries
	ItemFlavor&         itemFlavor
	bool                useShortName

	void functionref( ItemFlavor )                               previewItemCb = null
	int functionref( ItemFlavor )                                getItemCanEquipCanBuyStatusFunc = null
	void functionref( ItemFlavor, var )                          customButtonUpdateFunc = null
	void functionref( ItemFlavor, void functionref() proceedCb ) confirmationFunc = null
	void functionref( var )					                     middleClickOverrideFunc = null
}
#endif

#if UI
struct FileStruct_LifetimeLevel
{
	table<var, CustomizeButtonContext> activeCustomizeButtons = {}
	var                                actionButton = null
	CustomizeButtonContext ornull      actionContext

	bool isUnlockOperationActive = false
	bool isParentItemOwned
	bool isXButtonRegistered

	ItemFlavor ornull characterToRefresh = null
}
FileStruct_LifetimeLevel& fileLevel
#endif

#if UI
table< int, string > previewSoundMap = {
	[eItemType.character_skin] = "UI_Menu_LegendSkin_Preview",
	[eItemType.character_execution] = "UI_Menu_Finisher_Preview",
	[eItemType.gladiator_card_frame] = "UI_Menu_Banner_Preview",
	[eItemType.gladiator_card_stance] = "UI_Menu_Banner_Preview",
	[eItemType.gladiator_card_badge] = "UI_Menu_Banner_Preview",
	[eItemType.gladiator_card_stat_tracker] = "UI_Menu_Banner_Preview",
	[eItemType.gladiator_card_intro_quip] = "UI_Menu_Quip_Preview",
	[eItemType.gladiator_card_kill_quip] = "UI_Menu_Quip_Preview",
	[eItemType.weapon_skin] = "UI_Menu_WeaponSkin_Preview"
}
#endif

#if UI
table< int, table< int, string > > equipSoundMap = {
	[eItemType.character_skin] = {
		[eRarityTier.COMMON] = "UI_Menu_LegenedSkin_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_LegendSkin_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_LegendSkin_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_LegendSkin_Equip_Legendary"
	},
	[eItemType.character_execution] = {
		[eRarityTier.COMMON] = "UI_Menu_Finisher_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Finisher_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Finisher_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Finisher_Equip_Legendary"
	},
	[eItemType.gladiator_card_frame] = {
		[eRarityTier.COMMON] = "UI_Menu_Banner_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Banner_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Banner_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Banner_Equip_Legendary"
	},
	[eItemType.gladiator_card_stance] = {
		[eRarityTier.COMMON] = "UI_Menu_Banner_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Banner_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Banner_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Banner_Equip_Legendary"
	},
	[eItemType.gladiator_card_badge] = {
		[eRarityTier.COMMON] = "UI_Menu_Banner_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Banner_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Banner_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Banner_Equip_Legendary"
	},
	[eItemType.gladiator_card_stat_tracker] = {
		[eRarityTier.COMMON] = "UI_Menu_Banner_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Banner_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Banner_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Banner_Equip_Legendary"
	},
	[eItemType.gladiator_card_intro_quip] = {
		[eRarityTier.COMMON] = "UI_Menu_Quip_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Quip_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Quip_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Quip_Equip_Legendary"
	},
	[eItemType.gladiator_card_kill_quip] = {
		[eRarityTier.COMMON] = "UI_Menu_Quip_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_Quip_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_Quip_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_Quip_Equip_Legendary"
	},
	[eItemType.weapon_skin] = {
		[eRarityTier.COMMON] = "UI_Menu_WeaponSkin_Equip_Common",
		[eRarityTier.RARE] = "UI_Menu_WeaponSkin_Equip_Rare",
		[eRarityTier.EPIC] = "UI_Menu_WeaponSkin_Equip_Epic",
		[eRarityTier.LEGENDARY] = "UI_Menu_WeaponSkin_Equip_Legendary"
	}
}
#endif



                         
                         
                         
                         
                         

#if SERVER || CLIENT || UI
void function CustomizeCommon_Init()
{
	#if UI
		FileStruct_LifetimeLevel newFileLevel
		fileLevel = newFileLevel

		AddCallbackAndCallNow_OnGRXInventoryStateChanged( UpdateAllCurrentCustomizeItemButtons )
		AddCallbackAndCallNow_OnGRXOffersRefreshed( UpdateAllCurrentCustomizeItemButtons )
		AddUICallback_InputModeChanged( OnInputModeChanged )
	#endif
}
#endif


#if UI
void function OnInputModeChanged( bool controllerModeActive )
{
	UpdateActionButton()
}
#endif



                          
                          
                          
                          
                          


#if UI
void function CustomizeButton_UpdateAndMarkForUpdating( var button,
array<LoadoutEntry> loadoutEntries,
ItemFlavor itemFlavor,
void functionref( ItemFlavor ) previewItemCb,
int functionref( ItemFlavor ) getItemCanEquipCanBuyStatusFunc,
bool useShortName = false,
void functionref( ItemFlavor, var ) customButtonUpdateFunc = null,
void functionref( ItemFlavor, void functionref() ) confirmationFunc = null,
array<LoadoutEntry> auxEntries = [],
void functionref( var ) middleClickOverrideFunc = null
)
{
	Assert( !(button in fileLevel.activeCustomizeButtons) )
	#if DEV
		foreach ( var buttonIter, CustomizeButtonContext cbcIter in fileLevel.activeCustomizeButtons )
		{
			Assert( Hud_GetParent( button ) == Hud_GetParent( buttonIter ), "Customize buttons from different parents were active at the same time!" )
			foreach ( loadoutEntry in loadoutEntries )
				Assert( cbcIter.loadoutEntries.contains( loadoutEntry ), "Customize buttons for different loadout entries were active at the same time!" )
			break
		}
	#endif

	CustomizeButtonContext cbc
	cbc.index = fileLevel.activeCustomizeButtons.len()
	cbc.button = button
	cbc.loadoutEntries = loadoutEntries
	cbc.auxEntries = auxEntries
	cbc.itemFlavor = itemFlavor
	cbc.useShortName = useShortName
	cbc.previewItemCb = previewItemCb
	cbc.getItemCanEquipCanBuyStatusFunc = getItemCanEquipCanBuyStatusFunc
	cbc.customButtonUpdateFunc = customButtonUpdateFunc
	cbc.confirmationFunc = confirmationFunc
	cbc.middleClickOverrideFunc = middleClickOverrideFunc
	fileLevel.activeCustomizeButtons[button] <- cbc

	if ( fileLevel.activeCustomizeButtons.len() == 1 )
	{
		foreach ( loadoutEntry in loadoutEntries )
			AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( LocalClientEHI(), loadoutEntry, OnLoadoutSlotContentsChanged )

		foreach ( loadoutEntry in auxEntries )
			AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( LocalClientEHI(), loadoutEntry, OnLoadoutSlotContentsChanged )
	}

	Hud_AddEventHandler( button, UIE_CLICK, CustomizeButton_OnClick )
	Hud_AddEventHandler( button, UIE_CLICKRIGHT, CustomizeButton_OnRightClick )
	Hud_AddEventHandler( button, UIE_DOUBLECLICK, CustomizeButton_OnRightOrDoubleClick )
	Hud_AddEventHandler( button, UIE_MIDDLECLICK, CustomizeButton_OnMiddleClick )

	UpdateCustomizeItemButton( cbc, true )
}
#endif


#if UI
void function CustomizeButton_UnmarkForUpdating( var button )
{
	Assert( button in fileLevel.activeCustomizeButtons )
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]

	delete fileLevel.activeCustomizeButtons[button]

	if ( fileLevel.activeCustomizeButtons.len() == 0 )
	{
		foreach ( loadoutEntry in cbc.loadoutEntries )
			RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( LocalClientEHI(), loadoutEntry, OnLoadoutSlotContentsChanged )

		foreach ( loadoutEntry in cbc.auxEntries )
			RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( LocalClientEHI(), loadoutEntry, OnLoadoutSlotContentsChanged )
	}

	Hud_RemoveEventHandler( button, UIE_CLICK, CustomizeButton_OnClick )
	Hud_RemoveEventHandler( button, UIE_CLICKRIGHT, CustomizeButton_OnRightClick )
	Hud_RemoveEventHandler( button, UIE_DOUBLECLICK, CustomizeButton_OnRightOrDoubleClick )
	Hud_RemoveEventHandler( button, UIE_MIDDLECLICK, CustomizeButton_OnMiddleClick )
}
#endif


#if UI
ItemFlavor function CustomizeButton_GetItemFlavor( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]
	return cbc.itemFlavor
}
#endif


#if UI
string function CustomizeMenus_GetCollectedString( LoadoutEntry entry, array<ItemFlavor> itemList, bool ignoreDefaultItemForCount, bool shouldIgnoreOtherSlots )
{
	int owned = GetUnlockedItemFlavorsForLoadoutSlot( LocalClientEHI(), entry, shouldIgnoreOtherSlots ).len()
	int total = itemList.len()

	if ( ignoreDefaultItemForCount )
	{
		owned--
		total--
	}

	if ( itemList.contains( entry.favoriteItemFlavor ) )
	{
		owned--
		total--
	}

	return Localize( "#COLLECTED_ITEMS", owned, total )
}
#endif


#if UI
int function CustomizeMenus_GetOwnedCount( LoadoutEntry entry, array<ItemFlavor> itemList, bool ignoreDefaultItemForCount, bool shouldIgnoreOtherSlots )
{
	int numOwned = GetUnlockedItemFlavorsForLoadoutSlot( LocalClientEHI(), entry, shouldIgnoreOtherSlots ).len()

	if ( ignoreDefaultItemForCount )
		numOwned--

	if ( itemList.contains( entry.favoriteItemFlavor ) )
		numOwned--

	return numOwned
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItem()
{
	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
			return true
	}

	return false
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItemFavorite()
{
	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		Assert( cbc.loadoutEntries.len() == 1 )
		LoadoutEntry entry     = cbc.loadoutEntries[0]
		array<ItemFlavor> favs = LoadoutSlot_GetFavorites( LocalClientEHI(), entry )

		if ( Hud_IsFocused( button ) )
		{
			if ( favs.contains( cbc.itemFlavor ) )
				return true
		}
	}

	return false
}

bool function CustomizeMenus_HasFavorites()
{
	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		Assert( cbc.loadoutEntries.len() == 1 )
		LoadoutEntry entry     = cbc.loadoutEntries[0]
		array<ItemFlavor> favs = LoadoutSlot_GetFavorites( LocalClientEHI(), entry )

		if ( favs.len() > 0 )
			return true
	}

	return false
}

bool function CustomizeMenus_IsFocusedItemFavoriteable()
{
	if ( !CustomizeMenus_IsFocusedItemUnlocked() )
		return false

	if ( CustomizeMenus_IsFocusedItemFavorite() )
		return false

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
		{
			if ( cbc.loadoutEntries[ 0 ].maxFavoriteCount == 0 )
				return false

			if ( !IsParentItemOwned( cbc ) )
				return false

			return CustomizeMenus_IsItemFavoritable( cbc.itemFlavor )
		}
	}

	return true
}

bool function CustomizeMenus_IsItemFavoritable( ItemFlavor itemFlavor )
{
	bool isTheRandom = false
	if ( ItemFlavor_GetType( itemFlavor ) == eItemType.music_pack
	|| ItemFlavor_GetType( itemFlavor ) == eItemType.loadscreen )
		isTheRandom = ItemFlavor_IsTheRandom( itemFlavor )

	return (!ItemFlavor_IsTheFavoriteSentinel( itemFlavor ) && !isTheRandom )
}

bool function CustomizeMenus_IsItemFlavorAbleToBeFavored( ItemFlavor itemFlavor )
{
	return ItemFlavor_CanEquipToWheel( itemFlavor )
}

bool function CustomizeMenus_IsFocusedItemAbleToBeFavored()
{
	if ( !CustomizeMenus_IsFocusedItemUnlocked() )
		return false

	if ( CustomizeMenus_IsFocusedItemAlreadyFavored() )
		return false

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
		{
			if ( ! Loadout_IsCharacterQuipLoadoutEntry( cbc.loadoutEntries[0] ) )
				return false
		}
	}

	return true
}

bool function CustomizeMenus_IsFocusedItemAlreadyFavored()
{
	ItemFlavor character = GetTopLevelCustomizeContext()
	array<ItemFlavor> favs = ItemFlavor_GetFavoredQuipArrayForCharacter( character )

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
		{
			if ( favs.contains( cbc.itemFlavor ) )
				return true
		}
	}

	return false
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItemEquippable()
{
	if ( !GRX_IsInventoryReady() )
		return false

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
		{
			bool isEquippable = false
			foreach ( loadoutEntry in cbc.loadoutEntries )
			{
				bool shouldIgnoreOtherSlots = ItemFlavor_GetType(cbc.itemFlavor) == eItemType.weapon_charm

				if ( cbc.getItemCanEquipCanBuyStatusFunc != null && cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor ) == eItemCanEquipCanBuyStatus.IS_EQUIPPED_AUTOMATICALLY )
					isEquippable = false
				else
					isEquippable = isEquippable || IsItemFlavorUnlockedForLoadoutSlot( LocalClientEHI(), loadoutEntry, cbc.itemFlavor, false, shouldIgnoreOtherSlots )
			}

			bool isEquipped = false
			foreach ( loadoutEntry in cbc.loadoutEntries )
			{
				if ( isEquippable && IsItemInCBCEquipped( cbc ) )
				{
					isEquipped = true
					break
				}
			}
			return !isEquipped && isEquippable
		}
	}

	return false
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItemUnlocked()
{
	if ( !GRX_IsInventoryReady() )
		return false

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
		{
			                                                          
			bool isEquippable = false
			foreach ( loadoutEntry in cbc.loadoutEntries )
			{
				bool shouldIgnoreOtherSlots = ItemFlavor_GetType(cbc.itemFlavor) == eItemType.weapon_charm
				isEquippable = isEquippable || IsItemFlavorUnlockedForLoadoutSlot( LocalClientEHI(), loadoutEntry, cbc.itemFlavor, false, shouldIgnoreOtherSlots )
			}

			return isEquippable
		}
	}

	return false
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItemLocked()
{
	if ( !GRX_IsInventoryReady() )
		return false

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
			return !GRX_IsItemOwnedByPlayer( cbc.itemFlavor )
	}

	return false
}
#endif


#if UI
bool function CustomizeMenus_IsFocusedItemParentItemLocked()
{
	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		if ( Hud_IsFocused( button ) )
			return !IsParentItemOwned( cbc )
	}

	return false
}
#endif


#if UI
bool function IsParentItemOwned( CustomizeButtonContext cbc )
{
	if ( !GRX_IsInventoryReady() )
		return false

	int canEquipCanBuyStatus = eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY
	if ( cbc.getItemCanEquipCanBuyStatusFunc != null )
		canEquipCanBuyStatus = cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor )

	if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY )
		return false

	return true
}
#endif

#if UI
void function CustomizeMenus_SetActionButton( var button )
{
	if ( button != null )
		Assert( fileLevel.actionButton == null, "CustomizeMenus_SetActionButton() passed a non-null value when fileLevel.actionButton wasn't null. This likely means some script isn't clearing it when it should." )

	if ( fileLevel.actionButton != null )
		Hud_RemoveEventHandler( fileLevel.actionButton, UIE_CLICK, ActionButton_OnClick )

	fileLevel.actionButton = button

	if ( fileLevel.actionButton != null )
		Hud_AddEventHandler( fileLevel.actionButton, UIE_CLICK, ActionButton_OnClick )

	UpdateActionButton()
}
#endif


#if UI
int function CanEquipCanBuyCharacterItemCheck( ItemFlavor flav )
{
	Assert( IsTopLevelCustomizeContextValid() )
	ItemFlavor character = GetTopLevelCustomizeContext()
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	if ( !GRX_IsItemOwnedByPlayer_AllowOutOfDateData( character, null ) )
		return eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY

	if ( ItemFlavor_GetType( flav ) == eItemType.character_execution && CharacterExecution_IsNotEquippable( flav ) )
		return eItemCanEquipCanBuyStatus.IS_EQUIPPED_AUTOMATICALLY

	return eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY
}
#endif




                   
                   
                   
                   
                   

#if UI
void function CustomizeButton_OnClick( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]
	CustomizeMenus_UpdateActionContext( button )
	PlayPreviewSound( cbc.itemFlavor )
	PreviewCustomizeButtonItem( cbc )

	if ( ItemFlavor_GetType( cbc.itemFlavor ) == eItemType.gladiator_card_badge || ItemFlavor_GetType( cbc.itemFlavor ) == eItemType.gladiator_card_stat_tracker )
	{
		                                                                                                        
		if ( !Hud_IsLocked( button ) )
		{
			CustomizeButton_OnRightOrDoubleClick( cbc.button )
		}
	}
}
#endif


#if UI
void function CustomizeButton_OnRightClick( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]

                 
                                                                                                 
      
	if ( cbc.loadoutEntries.len() > 1 )
       
	{
		                                   
		bool wasEquipped = false
		foreach ( loadoutEntry in cbc.loadoutEntries )
		{
			ItemFlavor item = LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntry )
			if ( item == cbc.itemFlavor )
			{
				wasEquipped = true
				ItemFlavor emptyItem
				foreach ( flavor in GetValidItemFlavorsForLoadoutSlot( LocalClientEHI(), loadoutEntry ) )
				{
					if ( GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "isTheEmpty" ) )
					{
						RequestSetItemFlavorLoadoutSlot( LocalClientEHI(), loadoutEntry, flavor )

                      
                                                                                                   
       
                                  
                            
       
                            

						break
					}
				}

				break
			}
		}

		if ( !wasEquipped )
		{
			CustomizeButton_OnRightOrDoubleClick( button )
		}

		return
	}

	CustomizeButton_OnRightOrDoubleClick( button )
}
#endif


#if UI
void function CustomizeButton_OnRightOrDoubleClick( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]
	CustomizeMenus_UpdateActionContext( button )

	if ( cbc.getItemCanEquipCanBuyStatusFunc != null && cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor ) == eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY )
	{
		ItemFlavor character = GetTopLevelCustomizeContext()

		PurchaseDialogConfig pdc
		pdc.flav = character
		pdc.quantity = 1
		pdc.onPurchaseResultCallback = void function( bool wasPurchaseSuccessful ) : ( character ) {
			if ( !wasPurchaseSuccessful )
				return

			AddCallback_OnGRXInventoryStateChanged( RefreshCharacterAfterPurchase )
			fileLevel.characterToRefresh = character
		}

		PurchaseDialog( pdc )
		return
	}
	else if ( cbc.getItemCanEquipCanBuyStatusFunc != null && cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor ) == eItemCanEquipCanBuyStatus.IS_EQUIPPED_AUTOMATICALLY )
	{
		return
	}

	if ( Mythics_IsItemFlavorMythicSkin( cbc.itemFlavor ) )
	{
		if( !GRX_IsItemOwnedByPlayer( cbc.itemFlavor ) )
			return
	}

	PreviewCustomizeButtonItem( cbc )
	EquipCustomizeButtonItemOrShowSlotPickerDialogOrShowUnlockDialog( cbc )
}
#endif


#if UI
void function CustomizeButton_OnMiddleClick( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]

	if ( cbc.middleClickOverrideFunc != null )
	{
		cbc.middleClickOverrideFunc( button )
		return
	}

	Assert( cbc.loadoutEntries.len() == 1, "Cannot use favorites with multi select" )

	LoadoutEntry entry = cbc.loadoutEntries[0]
	if ( entry.maxFavoriteCount == 0 )
		return

	if ( cbc.itemFlavor == entry.favoriteItemFlavor )
	{
		EmitUISound( "UI_Menu_Deny" )
		return
	}

	if ( CalcCanEquipCanBuyStatus( cbc ) == eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY
	|| CalcCanEquipCanBuyStatus( cbc ) == eItemCanEquipCanBuyStatus.CAN_EQUIP_CANNOT_BUY )
	{
		array<ItemFlavor> favorites = LoadoutSlot_GetFavorites( LocalClientEHI(), entry )

		if ( favorites.contains( cbc.itemFlavor ) )
		{
			EmitUISound( "ui_menu_cosmetic_unlock" )
			RequestClearItemFlavorFavoritesSlot( LocalClientEHI(), entry, favorites.find( cbc.itemFlavor ) )
			if ( IsTopLevelCustomizeContextValid() )
				PIN_Customization( GetTopLevelCustomizeContext(), cbc.itemFlavor, "clear_favorite" )
			else
				PIN_Customization( null, cbc.itemFlavor, "clear_favorite" )
		}
		else if ( CustomizeMenus_IsItemFavoritable( cbc.itemFlavor ) )
		{
			if ( favorites.len() < entry.maxFavoriteCount )
			{
				PlayEquipSound( cbc.itemFlavor )
				if ( !CustomizeMenus_HasFavorites() )
					PreviewCustomizeButtonItem( cbc )                                                           
				RequestSetItemFlavorFavoritesSlot( LocalClientEHI(), entry, cbc.itemFlavor, favorites.len() )
				if ( IsTopLevelCustomizeContextValid() )
					PIN_Customization( GetTopLevelCustomizeContext(), cbc.itemFlavor, "add_favorite" )
				else
					PIN_Customization( null, cbc.itemFlavor, "add_favorite" )
			}
			else
			{
				EmitUISound( "UI_Menu_Deny" )

				ConfirmDialogData dialogData
				dialogData.headerText = "#FAVORITES_FULL_TITLE"
				dialogData.messageText = Localize( "#FAVORITES_FULL_HINT", entry.maxFavoriteCount )
				                                                        

				OpenOKDialogFromData( dialogData )
			}
		}
	}
}
#endif

#if UI
void function CustomizeButton_AddOrClearFavoredQuip( var button )
{
	CustomizeButtonContext cbc = fileLevel.activeCustomizeButtons[button]

	Assert( cbc.loadoutEntries.len() > 0 && Loadout_IsCharacterQuipLoadoutEntry( cbc.loadoutEntries[0] ), "Can only favor Quips!" )

	EHI playerEHI = LocalClientEHI()

	ItemFlavor character = GetTopLevelCustomizeContext()
	array<LoadoutEntry> slotsForFavoredQuips = Loadout_FavoredQuipArrayForCharacter( character )

	array<ItemFlavor> favorites = ItemFlavor_GetFavoredQuipArrayForCharacter( character )

	ItemFlavor currQuip = cbc.itemFlavor

	if ( CalcCanEquipCanBuyStatus( cbc ) == eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY
			|| CalcCanEquipCanBuyStatus( cbc ) == eItemCanEquipCanBuyStatus.CAN_EQUIP_CANNOT_BUY )
	{

		if ( favorites.contains( currQuip ) )
		{
			EmitUISound( "ui_menu_cosmetic_unlock" )
			RequestClearFavoredQuip( currQuip )
		}
		else if ( CustomizeMenus_IsItemFlavorAbleToBeFavored( currQuip ) )
		{
			if ( favorites.len() < MAX_FAVORED_QUIPS )
			{
				PlayEquipSound( currQuip )
				RequestSetFavoredQuip( currQuip)
			}
			else
			{
				EmitUISound( "UI_Menu_Deny" )

				ConfirmDialogData dialogData
				dialogData.headerText = "#FAVORITES_FULL_TITLE"
				dialogData.messageText = Localize( "#FAVORITE_QUIPS_FULL_HINT", MAX_FAVORED_QUIPS )
				                                                        

				OpenOKDialogFromData( dialogData )
			}
		}
	}
}
#endif


#if UI
void function PreviewCustomizeButtonItem( CustomizeButtonContext cbc )
{
	Newness_IfNecessaryMarkItemFlavorAsNoLongerNewAndInformServer( cbc.itemFlavor )
	Hud_SetNew( cbc.button, false )

	if ( ItemFlavor_GetType( cbc.itemFlavor ) == eItemType.gladiator_card_badge || ItemFlavor_GetType( cbc.itemFlavor ) == eItemType.gladiator_card_stat_tracker )
	{
		                                                                                                        
		return
	}

	foreach ( var b, CustomizeButtonContext cbcIter in fileLevel.activeCustomizeButtons )
		Hud_SetSelected( b, cbc == cbcIter )

	if ( cbc.previewItemCb != null )
	{
		ItemFlavor itemToPreview = cbc.itemFlavor
		if ( ItemFlavor_IsTheFavoriteSentinel( itemToPreview ) )
		{
			Assert( cbc.loadoutEntries.len() == 1, "Cannot use favorites with multi equip menu" )
			itemToPreview = LoadoutSlot_GetItemFlavor( LocalClientEHI(), cbc.loadoutEntries[0] )
		}

		cbc.previewItemCb( itemToPreview )
	}

	UpdateFooterOptions()
	CustomizeMenus_UpdateActionContext( cbc.button )
}
#endif


#if UI
void function EquipCustomizeButtonItemOrShowSlotPickerDialogOrShowUnlockDialog( CustomizeButtonContext cbc )
{
	PlayerClickedToEquipThing( cbc )
}
#endif


#if UI
void function PlayerClickedToEquipThing( CustomizeButtonContext cbc )
{
	PlayerClickedToEquipThing_Part1_UnlockDialog( cbc )
}
#endif


#if UI
int function CalcCanEquipCanBuyStatus( CustomizeButtonContext cbc )
{
	int canEquipCanBuyStatus = eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY

	if ( cbc.getItemCanEquipCanBuyStatusFunc != null )
		canEquipCanBuyStatus = cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor )

	if ( ItemFlavor_IsItemDisabledForGRX( cbc.itemFlavor ) )
		canEquipCanBuyStatus = eItemCanEquipCanBuyStatus.CAN_EQUIP_CANNOT_BUY

	bool shouldIgnoreOtherSlots = true
	if ( !IsItemFlavorUnlockedForLoadoutSlot( LocalClientEHI(), cbc.loadoutEntries[ 0 ], cbc.itemFlavor, false, shouldIgnoreOtherSlots ) )
	{
		if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY )
			canEquipCanBuyStatus = eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CAN_BUY
		else if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CAN_EQUIP_CANNOT_BUY )
			canEquipCanBuyStatus = eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY
	}

	return canEquipCanBuyStatus
}
#endif


#if UI
void function PlayerClickedToEquipThing_Part1_UnlockDialog( CustomizeButtonContext cbc )
{
	int canEquipCanBuyStatus = CalcCanEquipCanBuyStatus( cbc )

	if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CAN_EQUIP_CAN_BUY
	|| canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CAN_EQUIP_CANNOT_BUY )
	{
		PlayerClickedToEquipThing_Part2_SlotPicker( cbc )
		return
	}

	if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CAN_BUY
	&& ItemFlavor_GetGRXMode( cbc.itemFlavor ) != eItemFlavorGRXMode.NONE
	&& !GRX_IsItemOwnedByPlayer( cbc.itemFlavor ) )
	{
		PurchaseDialogConfig pdc
		pdc.flav = cbc.itemFlavor
		pdc.quantity = 1
		pdc.markAsNew = false
		pdc.onPurchaseStartCallback = void function() : ( cbc ) {
			fileLevel.isUnlockOperationActive = true
			RuiSetBool( Hud_GetRui( cbc.button ), "isLoading", true )
		}
		pdc.onPurchaseResultCallback = void function( bool wasPurchaseSuccessful ) : ( cbc ) {
			fileLevel.isUnlockOperationActive = false
			RuiSetBool( Hud_GetRui( cbc.button ), "isLoading", false )

			if ( !wasPurchaseSuccessful )
				return   

			PlayerClickedToEquipThing_Part2_SlotPicker( cbc )
		}
		PurchaseDialog( pdc )
		return
	}

	                                                                                     

	                                                                
	  	                                 

	EmitUISound( "UI_Menu_Deny" )

	return
}
#endif


#if UI
void function PlayerClickedToEquipThing_Part2_SlotPicker( CustomizeButtonContext cbc )
{
	ItemFlavor ornull tlcc = null
	if ( IsTopLevelCustomizeContextValid() )
		tlcc = GetTopLevelCustomizeContext()

	if ( cbc.loadoutEntries.len() > 1 )
	{
		OpenSelectSlotDialog( cbc.loadoutEntries, cbc.itemFlavor, tlcc, void function( int slotIndex ) : ( cbc, tlcc ) {
			PlayerClickedToEquipThing_Part3_ConfirmationDialog( cbc, tlcc, slotIndex )
		} )
		return
	}

	PlayerClickedToEquipThing_Part3_ConfirmationDialog( cbc, tlcc, 0 )
}
#endif


#if UI
void function PlayerClickedToEquipThing_Part3_ConfirmationDialog( CustomizeButtonContext cbc, ItemFlavor ornull tlcc, int slotIndex )
{
	if ( cbc.confirmationFunc != null )
	{
		cbc.confirmationFunc( cbc.itemFlavor, void function() : ( cbc, tlcc, slotIndex ) {
			PlayerClickedToEquipThing_Part4_DoIt( cbc, tlcc, slotIndex )
		} )
		return
	}

	PlayerClickedToEquipThing_Part4_DoIt( cbc, tlcc, slotIndex )
}
#endif


#if UI
void function PlayerClickedToEquipThing_Part4_DoIt( CustomizeButtonContext cbc, ItemFlavor ornull tlcc, int slotIndex )
{
	PIN_Customization( tlcc, cbc.itemFlavor, "equip", slotIndex )

	RequestSetItemFlavorLoadoutSlot_WithDuplicatePrevention( LocalClientEHI(), cbc.loadoutEntries, cbc.itemFlavor, slotIndex )
	PlayEquipSound( cbc.itemFlavor )
}
#endif


#if UI
void function PlayPreviewSound( ItemFlavor item )
{
	string sound = "UI_Menu_Banner_Preview"

	int itemType = ItemFlavor_GetType( item )

	if ( itemType in previewSoundMap )
		sound = previewSoundMap[itemType]

	EmitUISound( sound )
}
#endif


#if UI
void function PlayEquipSound( ItemFlavor item )
{
	string sound = "UI_Menu_LegenedSkin_Equip_Common"

	if ( ItemFlavor_HasQuality( item ) )
	{
		int itemType = ItemFlavor_GetType( item )
		int tier     = ItemFlavor_GetQuality( item )

		if ( itemType in equipSoundMap && tier in equipSoundMap[ itemType ] )
			sound = equipSoundMap[ itemType ][ tier ]
	}

	EmitUISound( sound )
}
#endif


#if UI
void function UpdateCustomizeItemButton( CustomizeButtonContext cbc, bool justAdded )
{
	var rui = Hud_GetRui( cbc.button )

	                         
	string name = Localize( "#EMPTY" )
	if ( cbc.useShortName )
		name = Localize( ItemFlavor_GetShortName( cbc.itemFlavor ) )
	else
		name = Localize( ItemFlavor_GetLongName( cbc.itemFlavor ) )
	int quality = ItemFlavor_HasQuality( cbc.itemFlavor ) ? ItemFlavor_GetQuality( cbc.itemFlavor ) : 0

	bool isFavorite = false

	if ( cbc.loadoutEntries.len() == 1 )
	{
		LoadoutEntry entry     = cbc.loadoutEntries[0]
		array<ItemFlavor> favs = LoadoutSlot_GetFavorites( LocalClientEHI(), entry )
		isFavorite = favs.contains( cbc.itemFlavor )
	}
	else if ( cbc.loadoutEntries.len() > 1 && Loadout_IsCharacterQuipLoadoutEntry( cbc.loadoutEntries[0] ) )
	{
		ItemFlavor character = GetTopLevelCustomizeContext()
		array<ItemFlavor> favs = ItemFlavor_GetFavoredQuipArrayForCharacter( character )
		isFavorite = favs.contains( cbc.itemFlavor )
	}

	RuiSetBool( rui, "isFavorite", isFavorite )
	RuiSetString( rui, "buttonText", name )
	RuiSetImage( rui, "buttonImage", ItemFlavor_GetIcon( cbc.itemFlavor ) )
	RuiSetInt( rui, "quality", quality )
	RuiSetImage( rui, "sourceIcon", ItemFlavor_GetSourceIcon( cbc.itemFlavor ) )


	          
	                        
	   
	  	                       
	  	                                                                        
	  	                           
	  	                                             
	   

	          
	                                                   
	bool isNew = Newness_IsItemFlavorNew( cbc.itemFlavor )
	Hud_SetNew( cbc.button, isNew )

	                      
	bool isEquipped = IsItemInCBCEquipped( cbc )

	if ( justAdded )
		Hud_SetSelected( cbc.button, false )

	if ( isEquipped && justAdded )
	{
		PreviewCustomizeButtonItem( cbc )
		if ( cbc.index != 0 )
			Hud_ScrollToItemIndex( Hud_GetParent( Hud_GetParent( cbc.button ) ), cbc.index )
	}

	if ( isEquipped && cbc.getItemCanEquipCanBuyStatusFunc != null )
	{
		int canEquipCanBuyStatus = cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor )
		if ( canEquipCanBuyStatus == eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY )
			isEquipped = false
	}

	RuiSetBool( rui, "isEquipped", isEquipped )

	                
	bool isOwned = false
	if ( ItemFlavor_GetGRXMode( cbc.itemFlavor ) == GRX_ITEMFLAVORMODE_NONE )
	{
		foreach ( loadoutEntry in cbc.loadoutEntries )
			isOwned = isOwned || IsItemFlavorUnlockedForLoadoutSlot( LocalClientEHI(), loadoutEntry, cbc.itemFlavor, false, true )
	}
	else            
	{
		if ( !GRX_AreOffersReady() || !GRX_IsInventoryReady() )
		{
			                 
			Hud_SetEnabled( cbc.button, false )
			RuiSetBool( rui, "isLoading", true )
			return                                      
		}

		                 
		Hud_SetEnabled( cbc.button, true )
		RuiSetBool( rui, "isLoading", false )

		                
		isOwned = GRX_IsItemOwnedByPlayer( cbc.itemFlavor )

		if ( !isOwned )
		{
			ItemFlavorPurchasabilityInfo ifpi = GRX_GetItemPurchasabilityInfo( cbc.itemFlavor )
			                                            
			if ( ifpi.craftingOfferOrNull != null )
			{
				GRXScriptOffer offer = GRX_ScriptOfferFromCraftingOffer( expect GRXScriptCraftingOffer(ifpi.craftingOfferOrNull) )
				Assert( offer.prices.len() == 1 )
				Assert( offer.prices[0].flavors[0] == GRX_CURRENCIES[GRX_CURRENCY_CRAFTING] )

				                         
				int craftingPrice = offer.prices[0].quantities[0]
				RuiSetInt( rui, "craftingPrice", craftingPrice )

				                    
				RuiSetBool( rui, "canAfford", GRX_CanAfford( offer.prices[0], 1 ) )
			}
			else
			{
				RuiSetInt( rui, "craftingPrice", -1 )
				RuiSetBool( rui, "canAfford", false )
			}
		}
	}

	Hud_SetLocked( cbc.button, !isOwned )

	if ( cbc.customButtonUpdateFunc != null )
		cbc.customButtonUpdateFunc( cbc.itemFlavor, rui )
}
#endif


#if UI
void function UpdateAllCurrentCustomizeItemButtons()
{
	if ( fileLevel.isUnlockOperationActive )
		return

	foreach ( var button, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
	{
		UpdateCustomizeItemButton( cbc, false )
	}

	UpdateFooterOptions()
	UpdateActionButton()
}
#endif


#if UI
void function OnLoadoutSlotContentsChanged( EHI playerEHI, ItemFlavor contents )
{
	UpdateAllCurrentCustomizeItemButtons()
	UpdateActionButton()
}
#endif


#if UI
void function CustomizeMenus_UpdateActionContext( var button )
{
	if ( button in fileLevel.activeCustomizeButtons )
	{
		fileLevel.actionContext = fileLevel.activeCustomizeButtons[button]
	}
	else
	{
		if ( IsControllerModeActive() )
		{
			foreach ( var b, CustomizeButtonContext cbc in fileLevel.activeCustomizeButtons )
			{
				if ( Hud_IsSelected( b ) )
				{
					fileLevel.actionContext = fileLevel.activeCustomizeButtons[b]
					break
				}
			}
		}
		else
		{
			fileLevel.actionContext = null
		}
	}

	                                                                                                                                 
	UpdateActionButton()
}
#endif


#if UI
CustomizeButtonContext ornull function GetActionContext()
{
	return fileLevel.actionContext
}
#endif


#if UI
void function ActionButton_OnClick( var button )
{
	if ( fileLevel.isUnlockOperationActive )
		return

	CustomizeButtonContext ornull cbc = GetActionContext()
	if ( cbc == null )
		return

	expect CustomizeButtonContext( cbc )

	if ( cbc.getItemCanEquipCanBuyStatusFunc != null && cbc.getItemCanEquipCanBuyStatusFunc( cbc.itemFlavor ) == eItemCanEquipCanBuyStatus.CANNOT_EQUIP_CANNOT_BUY )
	{
		ItemFlavor character = GetTopLevelCustomizeContext()

		PurchaseDialogConfig pdc
		pdc.flav = character
		pdc.quantity = 1
		pdc.onPurchaseResultCallback = void function( bool wasPurchaseSuccessful ) : ( character ) {
			if ( !wasPurchaseSuccessful )
				return

			AddCallback_OnGRXInventoryStateChanged( RefreshCharacterAfterPurchase )
			fileLevel.characterToRefresh = character
		}

		PurchaseDialog( pdc )

		return
	}

	EquipCustomizeButtonItemOrShowSlotPickerDialogOrShowUnlockDialog( cbc )
}
#endif


#if UI
bool function IsItemInCBCEquipped( CustomizeButtonContext cbc )
{
	ItemFlavor item = cbc.itemFlavor

	foreach ( loadoutEntry in cbc.loadoutEntries )
	{
		if ( LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntry, true ) == item )
		{
			return true
		}
	}
	return false
}
#endif


#if UI
void function UpdateActionButton()
{
	if ( fileLevel.isXButtonRegistered )
	{
		DeregisterButtonPressedCallback( BUTTON_X, ActionButton_OnClick )
		fileLevel.isXButtonRegistered = false
	}

	if ( fileLevel.actionButton == null )
		return

	CustomizeButtonContext ornull cbc = GetActionContext()
	if ( cbc == null && fileLevel.isParentItemOwned )
	{
		Hud_SetVisible( fileLevel.actionButton, false )
		return
	}

	if ( cbc == null )
		return

	expect CustomizeButtonContext( cbc )
	ItemFlavor item = cbc.itemFlavor

	fileLevel.isParentItemOwned = IsParentItemOwned( cbc )
	bool isOwned                = GRX_IsItemOwnedByPlayer_AllowOutOfDateData( item )
	bool isEquipped             = IsItemInCBCEquipped( cbc )
	bool isVisible              = !fileLevel.isParentItemOwned || !isOwned || (isOwned && !isEquipped)

	if ( Mythics_IsItemFlavorMythicSkin( item ) )
		isVisible = (isOwned && !isEquipped)

	Hud_SetVisible( fileLevel.actionButton, isVisible )

	if ( !isVisible )
		return

	string buttonText
	bool controllerActive = IsControllerModeActive()

	if ( !fileLevel.isParentItemOwned )
		buttonText = controllerActive ? "#X_BUTTON_UNLOCK_LEGEND" : "#UNLOCK_LEGEND"
	else if ( !isOwned )
		buttonText = controllerActive ? "#X_BUTTON_UNLOCK" : "#UNLOCK"
	else
		buttonText = controllerActive ? "#X_BUTTON_EQUIP" : "#EQUIP"

	if ( controllerActive && !fileLevel.isXButtonRegistered && !CustomizeMenus_IsFocusedItem() )
	{
		RegisterButtonPressedCallback( BUTTON_X, ActionButton_OnClick )
		fileLevel.isXButtonRegistered = true
	}

	HudElem_SetRuiArg( fileLevel.actionButton, "centerText", buttonText )
}
#endif


#if CLIENT || UI
array<LoadoutEntry> function GetAppropriateLoadoutSlotsForItemFlavor( ItemFlavor itemFlav )
{
	int itemType = ItemFlavor_GetType( itemFlav )
	switch ( itemType )
	{
		case eItemType.character_skin:
			return [ Loadout_CharacterSkin( CharacterSkin_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.weapon_skin:
			return [ Loadout_WeaponSkin( WeaponSkin_GetWeaponFlavor( itemFlav ) ) ]
			break

		case eItemType.gladiator_card_frame:
			if ( GladiatorCardFrame_IsSharedBetweenCharacters( itemFlav ) )
			{
				return []
				break
			}

			return [ Loadout_GladiatorCardFrame( expect ItemFlavor( GladiatorCardFrame_GetCharacterFlavor( itemFlav ) ) ) ]
			break

		case eItemType.gladiator_card_stance:
			return [ Loadout_GladiatorCardStance( GladiatorCardStance_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.character_execution:
			return [ Loadout_CharacterExecution( CharacterExecution_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.gladiator_card_intro_quip:
			return [ Loadout_CharacterIntroQuip( CharacterIntroQuip_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.gladiator_card_kill_quip:
			return [ Loadout_CharacterKillQuip( CharacterKillQuip_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.gladiator_card_stat_tracker:
			if ( GladiatorCardStatTracker_IsSharedBetweenCharacters( itemFlav ) )
			{
				return []
				break
			}

			ItemFlavor character = expect ItemFlavor( GladiatorCardStatTracker_GetCharacterFlavor( itemFlav ) )
			                                        
			   
			  	                                                                                   
			  	 
			  		                                                                                    
			  		                                                           
			  		 
			  			                                                                              
			  			                                      
			  					                                                           
			  					                        
			  				                  
			  		 
			  	 
			   

			array<LoadoutEntry> slots
			for ( int trackerIdx = 0; trackerIdx < GLADIATOR_CARDS_NUM_TRACKERS; trackerIdx++ )
			{
				LoadoutEntry trackerSlot = Loadout_GladiatorCardStatTracker( character, trackerIdx )
				if ( LoadoutSlot_IsReady( LocalClientEHI(), trackerSlot ) )
				{
					slots.append( trackerSlot )
				}
			}
			return slots
			break

		case eItemType.melee_skin:
			return [ Loadout_MeleeSkin( MeleeSkin_GetCharacterFlavor( itemFlav ) ) ]
			break

		case eItemType.music_pack:
			return [ Loadout_MusicPack() ]
			break

		case eItemType.loadscreen:
			return [ Loadout_Loadscreen() ]
			break
	}

	return []
}
#endif


#if UI
bool function IsItemFlavorInspectable( ItemFlavor itemFlav )
{
	return InspectItemTypePresentationSupported( itemFlav ) || ItemFlavor_GetType( itemFlav ) == eItemType.loadscreen
}
#endif


#if CLIENT || UI
bool function IsItemFlavorEquippable( ItemFlavor itemFlav )
{
	if ( !IsItemFlavorRegistrationFinished() )
		return false

	if ( GetAppropriateLoadoutSlotsForItemFlavor( itemFlav ).len() == 0 )
		return false

	if ( !GRX_IsItemOwnedByPlayer_AllowOutOfDateData( itemFlav ) )
		return false

	return true
}
#endif


#if CLIENT || UI
void function EquipItemFlavorInAppropriateLoadoutSlot( ItemFlavor itemFlav )
{
	Assert( IsItemFlavorEquippable( itemFlav ) )

	RequestSetItemFlavorLoadoutSlot(
		LocalClientEHI(),
		GetAppropriateLoadoutSlotsForItemFlavor( itemFlav )[ 0 ],
		itemFlav )
}
#endif


#if CLIENT || UI
string function GetLocalizedItemFlavorDescriptionForOfferButton( ItemFlavor itemFlav, bool withQuality )
{
	ItemFlavor ornull associatedFlav = GetItemFlavorAssociatedCharacterOrWeapon( itemFlav )

	string qualityName       = (withQuality && ItemFlavor_HasQuality( itemFlav )) ? ItemFlavor_GetQualityName( itemFlav ) : ""
	string assocatedFlavName = associatedFlav != null ? ItemFlavor_GetShortName( expect ItemFlavor( associatedFlav ) ) : ""
	string typeName          = ItemFlavor_GetTypeName( itemFlav )

	if ( GetCurrentPlaylistVarBool( "item_flavor_loc_desc_nostrip", true  ) )                        
	{
		return Localize( "#OFFER_ITEM_DESC", Localize( qualityName ), Localize( assocatedFlavName ), Localize( typeName ) )
	}
	else
	{
		return strip( Localize( "#OFFER_ITEM_DESC",
			Localize( qualityName ),
			Localize( assocatedFlavName ),
			Localize( typeName )
		) )
	}
	unreachable
}
#endif


#if CLIENT || UI
string function GetLocalizedItemFlavorDescriptionForPlacard( ItemFlavor itemFlav )
{
	if ( ItemFlavor_GetType( itemFlav ) == eItemType.account_currency )
		return ItemFlavor_GetShortName( itemFlav )

	if ( ItemFlavor_GetType( itemFlav ) == eItemType.account_currency_bundle )
		return ItemFlavor_GetShortName( GRXCurrencyBundle_GetCurrencyFlav( itemFlav ) )

	return ItemFlavor_GetTypeName( itemFlav )
}
#endif


#if CLIENT || UI
asset function CustomizeMenu_GetRewardButtonImage( ItemFlavor flavor )
{
	int itemType      = ItemFlavor_GetType( flavor )
	asset buttonImage = $""

	switch ( itemType )
	{
		case eItemType.account_pack:
			buttonImage = ItemFlavor_GetIcon( flavor )
			if ( buttonImage == $"" )
			{
				buttonImage = $"rui/menu/buttons/battlepass/apex_pack"
			}
			break

		case eItemType.skydive_emote:
		case eItemType.character_execution:
		case eItemType.voucher:
		case eItemType.quest_mission:
                       
		case eItemType.quest_comic:
                             
		case eItemType.melee_skin:
			buttonImage = ItemFlavor_GetIcon( flavor )
			break

		case eItemType.emote_icon:
			buttonImage = $"rui/menu/buttons/battlepass/icon_holospray"
			break

		case eItemType.character_skin:
			buttonImage = ItemFlavor_GetIcon( flavor )
			if ( buttonImage == $"" )
			{
				ItemFlavor character = CharacterSkin_GetCharacterFlavor( flavor )
				buttonImage = ItemFlavor_GetIcon( character )
			}
			break
		case eItemType.character_emote:
			buttonImage = ItemFlavor_GetIcon( flavor )
			break
		case eItemType.character:
			buttonImage = CharacterClass_GetCharacterUnlockedStoreIcon( flavor )
			break

		case eItemType.weapon_skin:
			buttonImage = ItemFlavor_GetIcon( flavor )
			if ( buttonImage == $"" )
			{
				ItemFlavor weapon = WeaponSkin_GetWeaponFlavor( flavor )
				buttonImage = ItemFlavor_GetIcon( weapon )
			}
			break

		case eItemType.gladiator_card_frame:
			buttonImage = $"rui/menu/buttons/battlepass/banner_frame"
			break

		case eItemType.gladiator_card_stance:
			buttonImage = $"rui/menu/buttons/battlepass/banner_pose"
			break

		case eItemType.music_pack:
			buttonImage = $"rui/menu/buttons/battlepass/music_pack"
			break

		case eItemType.loadscreen:
			buttonImage = $"rui/menu/buttons/battlepass/loadscreen"
			break

		case eItemType.gladiator_card_intro_quip:
			buttonImage = $"rui/hud/chat_icons/icon_chat_introquip"
			break

		case eItemType.gladiator_card_kill_quip:
			buttonImage = $"rui/hud/chat_icons/icon_chat_killquip"
			break

		case eItemType.gladiator_card_stat_tracker:
			buttonImage = $"rui/menu/buttons/battlepass/tracker"
			break

		case eItemType.weapon_charm:
			buttonImage = $"rui/menu/buttons/battlepass/weapon_charm"
			break

		case eItemType.gladiator_card_badge:
			buttonImage = $"rui/menu/buttons/battlepass/badge"
			break

		case eItemType.account_currency:
			buttonImage = GRXCurrency_GetRewardIcon( flavor )
			break

		case eItemType.apex_coins:
			buttonImage = $"rui/menu/buttons/battlepass/currency_coins"
			break

		case eItemType.battlepass_purchased_xp:
			buttonImage = $"rui/menu/challenges/challenges_icon_levelup"
			break

                
                         
                                                       
        
                      

		default:
			Warning( "Unknown item type passed to CustomizeMenu_GetRewardButtonImage() " + DEV_GetEnumStringSafe( "eItemType", itemType ) )
			break
	}

	if ( buttonImage == $"" )
		Warning( "CustomizeMenu_GetRewardButtonImage() returning empty image for %s", ItemFlavor_GetHumanReadableRef( flavor ) )

	return buttonImage
}
asset function CustomizeMenu_GetGenericRewardButtonImage( ItemFlavor flavor )                                                                     
{
	int itemType      = ItemFlavor_GetType( flavor )
	asset buttonImage = $""

	switch ( itemType )
	{
		case eItemType.account_pack:
			buttonImage = ItemFlavor_GetIcon( flavor )
			if ( buttonImage == $"" )
			{
				buttonImage = $"rui/menu/buttons/battlepass/apex_pack"
			}
			break

		case eItemType.skydive_emote:
		case eItemType.character_execution:
		case eItemType.voucher:
		case eItemType.quest_mission:
                       
		case eItemType.quest_comic:
                             
		case eItemType.melee_skin:
			buttonImage = ItemFlavor_GetIcon( flavor )
			break

		case eItemType.emote_icon:
			buttonImage = $"rui/menu/buttons/battlepass/icon_holospray"
			break

		case eItemType.character_skin:
			ItemFlavor character = CharacterSkin_GetCharacterFlavor( flavor )
			buttonImage = ItemFlavor_GetIcon( character )
			break
		case eItemType.character_emote:
			buttonImage = ItemFlavor_GetIcon( flavor )
			break
		case eItemType.character:
			buttonImage = CharacterClass_GetCharacterUnlockedStoreIcon( flavor )
			break

		case eItemType.weapon_skin:
			ItemFlavor weapon = WeaponSkin_GetWeaponFlavor( flavor )
			buttonImage = ItemFlavor_GetIcon( weapon )
			break

		case eItemType.gladiator_card_frame:
			buttonImage = $"rui/menu/buttons/battlepass/banner_frame"
			break

		case eItemType.gladiator_card_stance:
			buttonImage = $"rui/menu/buttons/battlepass/banner_pose"
			break

		case eItemType.music_pack:
			buttonImage = $"rui/menu/buttons/battlepass/music_pack"
			break

		case eItemType.loadscreen:
			buttonImage = $"rui/menu/buttons/battlepass/loadscreen"
			break

		case eItemType.gladiator_card_intro_quip:
			buttonImage = $"rui/hud/chat_icons/icon_chat_introquip"
			break

		case eItemType.gladiator_card_kill_quip:
			buttonImage = $"rui/hud/chat_icons/icon_chat_killquip"
			break

		case eItemType.gladiator_card_stat_tracker:
			buttonImage = $"rui/menu/buttons/battlepass/tracker"
			break

		case eItemType.weapon_charm:
			buttonImage = $"rui/menu/buttons/battlepass/weapon_charm"
			break

		case eItemType.gladiator_card_badge:
			buttonImage = $"rui/menu/buttons/battlepass/badge"
			break

		case eItemType.account_currency:
			buttonImage = GRXCurrency_GetRewardIcon( flavor )
			break

		case eItemType.apex_coins:
			buttonImage = $"rui/menu/buttons/battlepass/currency_coins"
			break

		case eItemType.battlepass_purchased_xp:
			buttonImage = $"rui/menu/challenges/challenges_icon_levelup"
			break

                
                         
                                                       
        
                      

		default:
			Warning( "Unknown item type passed to CustomizeMenu_GetRewardButtonImage() " + DEV_GetEnumStringSafe( "eItemType", itemType ) )
			break
	}

	if ( buttonImage == $"" )
		Warning( "CustomizeMenu_GetRewardButtonImage() returning empty image for %s", ItemFlavor_GetHumanReadableRef( flavor ) )

	return buttonImage
}
#endif

#if UI
void function SetOrClearFavoriteFromFocus( var listPanel )
{
	var focus = GetFocus()

	var scrollPanel = Hud_GetChild( listPanel, "ScrollPanel" )

	if ( Hud_GetParent( focus ) == scrollPanel )
		CustomizeButton_OnMiddleClick( focus )
}

void function SetOrClearFavoredQuipFromFocus( var gridPanel )
{
	var focus = GetFocus()

	var scrollPanel = Hud_GetChild( gridPanel, "ScrollPanel" )

	if ( Hud_GetParent( focus ) == scrollPanel )
		CustomizeButton_AddOrClearFavoredQuip( focus )
}
#endif

#if UI
void function RefreshCharacterAfterPurchase()
{
	if ( fileLevel.characterToRefresh == null )
		return

	ItemFlavor character = expect ItemFlavor( fileLevel.characterToRefresh )

	JumpToCharacterCustomize( character )

	fileLevel.characterToRefresh = null
	RemoveCallback_OnGRXInventoryStateChanged( RefreshCharacterAfterPurchase )
}
#endif