global function Sh_RespawnBeacon_Init

global function RespawnBeacons_RegisterNetworking

global function GetRespawnStyle
global function IsRespawnBeacon
global function RespawnChamberOnUse
global function RespawnBeacon_ShouldUseBlockReload

#if SERVER
                                            
                                                
                                                
                                                   
                                                  
                                                
                                                             
                                                          
                                                        
                             
                                        
                                         
                                                 
                     
                                             
                          

                                   
                                        
                                               
                                            
                                           
                                      
                                       
                              
       
                                                                  
      
#endif

#if CLIENT
global function ServerCallback_RespawnPodStarted
global function ServerCallback_DisplayWaitingForRespawn
global function ServerCallback_RespawnDNAHint

global function ServerCallback_RespawnBeaconStart
global function ServerCallback_RespawnBeaconStop

global function TryPingRespawnItem

#endif

#if CLIENT
global function ServerToClient_RespawnChamberOnUse
#endif

global function GetRespawnStatus

global function CountTeammatesWaitingToBeRespawned
global function HasTeammatesToRespawn
#if SERVER
                                  
#endif
#if CLIENT
global function UpdateRespawnChamberRuis
#endif

                         
          
                                                            
                              
      
                               

global const string RESPAWN_CHAMBER_TARGETNAME = "respawn_chamber"
                   
                                                                  
      

global const string RESPAWN_DNA_TARGETNAME = "respawn_dna"
global const string RESPAWN_DROPSHIP_TARGETNAME = "respawn_dropship"

const string RESPAWN_BEACON_ALTMOVENODE_MOVER_SCRIPTNAME = "respawn_beacon_altmovenode_mover"

const float RESPAWN_BEACON_HOLO_EFFECT_HEIGHT = 75.0

global const float RESPAWN_DNA_LIFETIME = 90.0
const float RESPAWN_DROP_TIME = 10.0
global const float RESPAWN_BEACON_RESPAWN_TIME = 5.0

global const string RESPAWN_BEACON_SUCCESS_SOUND = "Survival_RespawnChamber_Activate"
global const string RESPAWN_BEACON_LOOP_SOUND = "Survival_RespawnBeacon_Linking_loop"

global const asset RESPAWN_DROPSHIP_MODEL = $"mdl/vehicle/goblin_dropship/goblin_dropship.rmdl"
global const asset RESPAWN_BEACON_EMITTER_FX = $"P_chamber_proj_holo"
global const asset RESPAWN_BEACON_BEAM_FX = $"P_chamber_beam"
global const asset RESPAWN_BEACON_SCAN_FX = $"P_chamber_celebration"

global const asset RESPAWN_BEACON_ICON = $"rui/hud/gametype_icons/survival/dna_station"
global const asset RESPAWN_BEACON_ICON_SMALL = $"rui/hud/gametype_icons/survival/dna_station_small"
const string SOUND_HOLOGRAM_LOOP = "Survival_Emit_RespawnChamber"

const float RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR = 300.0
const float RESPAWN_CHAMBER_ICON_FADE_DIST_FAR = 1000.0

const int RESPAWN_THANKS_DELAY = 4

const string ANIM_FLYIN_IDLE = "dropship_classic_mp_flyin_idle"
const string ANIM_FLYIN_MOVE = "dropship_classic_mp_flyin"

const float MOBILE_RESPAWN_BEACON_ICON_FADE_DIST_ZERO = 0.0
global const string MOBILE_RESPAWN_BEACON_TARGETNAME = "respawn_chamber_mobile"
                   
                                                                               
      

                         
                                                                             
      

global struct dropshipAnimData
{
	string                     idleAnim
	string                     idlePOVAnim
	string                     jumpAnim
	string                     jumpPOVAnim
	string                     attachment = "origin"
	bool                       hideProxy = true
	void functionref( entity ) viewConeFunc
	float                      yawAngle
	string                     firstPersonJumpOutSound                                                                                                                                                                    
}

global struct DropshipAltFlyinData
{
	vector startPos
	vector endPos
	float  timeToTake
	entity dropship
	string dropshipAISettings
}

struct
{
	array<dropshipAnimData>      dropshipAnimDataList
	array<entity>                allStations

	#if CLIENT
		array<var>         respawnChamberRuis
		table<entity, int> chamberToBeamFX

		bool mobileRespawnSpawnInProgress
	#endif

	#if SERVER
		                                                                          
		                                                                         
		                                                                                     
		                                                                    
		                                                                 
		                                                                
		                      	             
		                       	                     
		                                    
	#endif
}
file

void function Sh_RespawnBeacon_Init()
{
	#if SERVER
		                                                                                                         
	#endif

	PrecacheModel( RESPAWN_DROPSHIP_MODEL )

	if ( GetRespawnStyle() == eRespawnStyle.NONE )
		return

	PrecacheParticleSystem( RESPAWN_BEACON_EMITTER_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_BEAM_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_SCAN_FX )

	#if SERVER || CLIENT
		Remote_RegisterServerFunction( "ClientCallback_PingNearestRespawn", "vector", -FLT_MAX, FLT_MAX, 32 )
	#endif

	#if CLIENT
		RegisterSignal( "ReviveRuiThread" )
		RegisterSignal( "SpectatorShowRespawnRui" )

		AddCreateCallback( "prop_dynamic", RespawnEntitySpawned )
		AddCreateCallback( "prop_script", RespawnEntitySpawned )

		AddCreateCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_CreateCallback )
		AddDestroyCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_DestroyCallback )

		RegisterMinimapPackages()

		RegisterButtonPressedCallback( KEY_SPACE, TryPingRespawnItem )
		RegisterButtonPressedCallback( BUTTON_A, TryPingRespawnItem )

		if ( (GetRespawnStyle() == eRespawnStyle.RESPAWN_CHAMBERS) && RespawnBeaconsAreEnabled() )
			SetMapFeatureItem( 1100, "#RESPAWN_BEACON", "#RESPAWN_BEACON_DESC", RESPAWN_BEACON_ICON )

	#elseif SERVER
		                                                        
		                                                       

		                                                                               

		                                                                      

		                                                             
		                             
		                                                

		            
		                               
		                                                              
		                                                              
		                                                              
		                                                              
		                                          
		                               
		                                                                            

		            
		                               
		                                                              
		                                                              
		                                                              
		                                                              
		                                          
		                             
		                                                                            

		             
		                               
		                                                              
		                                                              
		                                                              
		                                                              
		                                          
		                             
		                                                                            

		           
		                               
		                                                              
		                                                              
		                                                              
		                                                              
		                                          
		                               
		                                                                            

		                                                                                              
		                      

		                                                          
		 
			                                                  
			                                                            
			                                            
		 

                              
		                                                                                       
        
	#endif
}


void function RespawnBeacons_RegisterNetworking()
{
	RegisterNetworkedVariable( "respawnStatus", SNDC_PLAYER_GLOBAL, SNVT_INT, eRespawnStatus.NONE )
	RegisterNetworkedVariable( "respawnStatusEndTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "respawnBannerPickedUpTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )

	#if CLIENT
		RegisterNetworkedVariableChangeCallback_int( "respawnStatus", RespawnStatusChanged )
	#endif
}

void function ShRespawnBeacon_RegisterAinAnalysisFuncs()
{
	AddDropshipFlightAnalysis( eFlightPathAnalysisIndex.RESPAWN_DROPSHIP_FLYIN_MOVE, RESPAWN_DROPSHIP_MODEL, ANIM_FLYIN_MOVE, AnaylsisFuncDropshipTestJumpout, "dropship_deploy" )
}

#if CLIENT
void function RegisterMinimapPackages()
{
	if ( GetRespawnStyle() == eRespawnStyle.RESPAWN_CHAMBERS )
	{
		RegisterMinimapPackage( "prop_script", eMinimapObject_prop_script.RESPAWN_CHAMBER, MINIMAP_OBJECT_RUI, MinimapPackage_RespawnChamber, FULLMAP_OBJECT_RUI, MinimapPackage_RespawnChamber )
		RegisterMinimapPackage( "prop_script", eMinimapObject_prop_script.RESPAWN_DNA, $"ui/minimap_square_respawn_dna_pickup.rpak", MinimapPackage_RespawnDNA, $"ui/in_world_minimap_respawn_dna.rpak", MinimapPackage_RespawnDNA )
	}
}

void function RespawnStatusChanged( entity player, int new )
{
	if ( !GetCurrentPlaylistVarBool( "mrb_show_ingame_ui", true ) )
		return

	if ( player == GetLocalClientPlayer() )
		UpdateRespawnStatus( new )

	if ( new == eRespawnStatus.WAITING_FOR_DROPPOD )
		FlashGameWindow()

	entity viewPlayer = GetLocalViewPlayer()

	if ( !IsValid( viewPlayer ) )
		viewPlayer = GetLocalClientPlayer()

	if ( !IsValid( viewPlayer ) )
		return

	bool waitingToBeRespawned = HasTeammatesToRespawn( viewPlayer.GetTeam() )

	foreach ( rui in file.respawnChamberRuis )
	{
		UpdateRespawnChamberRuis( rui, waitingToBeRespawned )
	}

	ArrayRemoveInvalid( file.allStations )

	if ( GetRespawnStyle() != eRespawnStyle.NONE )
	{
		int fxId = GetParticleSystemIndex( RESPAWN_BEACON_BEAM_FX )

		foreach ( ent in file.allStations )
		{
			if ( waitingToBeRespawned )
			{
				if ( !EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				{
					file.chamberToBeamFX[ ent ] = StartParticleEffectOnEntityWithPos( ent, fxId, FX_PATTACH_POINT_FOLLOW_NOROTATE, ent.LookupAttachment( "FX_EMITTER" ), <0, 0, 0>, <0, 0, 0> )
				}
			}
			else
			{
				if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				{
					EffectStop( file.chamberToBeamFX[ ent ], true, true )
				}

				file.chamberToBeamFX[ ent ] = -1
			}
		}
	}

	                                                                                                          
	DeathScreen_RespawnStatusChanged( player, new )
}

void function UpdateRespawnChamberRuis( var rui, bool waitingToBeRespawned )
{
	if ( waitingToBeRespawned )
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_FAR )
		RuiSetBool( rui, "pinToEdge", true )
		RuiSetBool( rui, "showClampArrow", true )
	}
	else if ( file.mobileRespawnSpawnInProgress )
	{
		RuiSetFloat( rui, "distanceFade", MOBILE_RESPAWN_BEACON_ICON_FADE_DIST_ZERO )
		RuiSetBool( rui, "pinToEdge", false )
		RuiSetBool( rui, "showClampArrow", false )
	}
	else
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
		RuiSetBool( rui, "pinToEdge", false )
		RuiSetBool( rui, "showClampArrow", false )
	}
}
#endif          

bool function RespawnBeaconsAreEnabled()
{
	return GetCurrentPlaylistVarBool( "respawn_beacons_enabled", true )
}

bool function IsRespawnBeacon( entity ent )
{
	switch ( ent.GetTargetName() )
	{
		case RESPAWN_CHAMBER_TARGETNAME:
                         
                                    
      
		case MOBILE_RESPAWN_BEACON_TARGETNAME:
			return true
	}
	return false
}

void function RespawnEntitySpawned( entity ent )
{
	if ( !IsRespawnStationEnt( ent ) )
		return

	if ( !RespawnBeaconsAreEnabled() && ent.GetTargetName() != MOBILE_RESPAWN_BEACON_TARGETNAME )
	{
		                                                              
		                                                                                     
		                                                             
		                                                                               

		if ( IsValid( ent ) )
			ent.Destroy()
		return
	}

	#if CLIENT
		if ( GetCurrentPlaylistVarBool( "mrb_show_ingame_ui", true ) )
		{
			AddEntityCallback_GetUseEntOverrideText( ent, RespawnChamber_TextOverride )
			var rui
			if ( ent.GetTargetName() == MOBILE_RESPAWN_BEACON_TARGETNAME )
				rui = AddOverheadIcon( ent, RESPAWN_BEACON_ICON, false, $"ui/overhead_icon_mobile_respawn_beacon.rpak" )
			else
				rui = AddOverheadIcon( ent, RESPAWN_BEACON_ICON, false, $"ui/overhead_icon_respawn_beacon.rpak" )
			RuiSetFloat2( rui, "iconSize", <80, 80, 0> )
			RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
			RuiSetBool( rui, "adsFade", true )
			RuiSetString( rui, "hint", "#RESPAWN_ALLCAPS" )

			thread ManageRespawnChamberData( ent, rui )

			if ( ent.GetTargetName() == RESPAWN_CHAMBER_TARGETNAME )                                                                               
				thread AddRadarToRespawnStation( ent )
		}
		else if ( IsValid( ent ) && ent in file.chamberToBeamFX )
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				EffectStop( file.chamberToBeamFX[ ent ], true, true )
		}
	#elseif SERVER
		                        
		                 
		               
		                               
		                                                         
		                                                                                  

		                                   
		                                   
		                                                                        
		                                         
	#endif

	file.allStations.append( ent )

	SetCallback_CanUseEntityCallback( ent, IsNotBusy )
	SetCallback_ShouldUseBlockReloadCallback( ent, RespawnBeacon_ShouldUseBlockReload )

	AddCallback_OnUseEntity_ClientServer( ent, RespawnChamberOnUse )

	            
	  	                                                                             
	  	          
	  	                                   
	  	                                  
	  	                                                                    
	        
}

#if SERVER
                                                       
 
	                         
	                               
	                                
	                              

	                         
		                                    
	    
		                     
 

                                                  
 
	                                           
		                                                                          

	                                  
 
                                                   
 
	                                

	                               
	                               

	                                           
	           

	                      
	 
		               
	 

	                            
	             

	                                                                                                                                                         

	                                                          
		      

	                                              
	                                                                                    
	                                                           
                    
                                                           
       
	                                      

	                               
	                                       

	                      
	 
		                               
		                                                      
		                                              
		              
	 

	                     
		                    
 

                                                                 
 
	                                        
		                                
 

                                                                              
 
	       

	                       
	 
		                                      
		                              
	 
	                                               
	 
		                                                  
	 
	    
	 
		                                         
		                           
		                           
	 

	                                                                          
	                                                                             
	                                                                                
	                                                                              
	                                   
	                                                                                                                                                                                                                                          
	                   
	                                                   
	 
		                     
		 
			                                                       
			 
				             
				      
			 
		 
	 

	                                                                            

	                                                                                                        
 

                                                                                                                                                                                                                                                           
 
	                            
	                              
	                  
	                  

	                         
	 
		                                                                     
		                      
		                                                      
		                    
		                    
		             

		                                  
		                                            
	 

	                                                
	                                              

	            
		                         
		 
			                                             
			 
				                                           
			 
		  

	                  
		                                      
	                                 
		                                         

	                                                         
	                                                      
	                         
	                          
	                             
	                                   
	                            
	                            
	                                               

	                         

	                                                       
		                                                              

	              
		                                                      
	                            

	             
		                                                               

	                                

	                                               
	 
		                        
		 
			                         
                    
				                                                        
				                                                            
				 
					                 
						                 
					    
						                 
				 
         
			                                                                                                                 
		 
	 

	                                  

	              
		                                                            

	                        

	                  
	             
	 
		                                                                                                                          
		                                        
	 
	    
	 
		                                                                                             
		                                   
		                                
	 
	                                                                                   

	                      

	                                                                   
		                        

	                                                                                                      

	             
	 
		                                                                    

		                                                                     
		                        
		                                                                                           
		                            
		                                                                                              
		        
		                                                             
		        
		                                                                                        
		                                                                                                          
		        
		                                             
		                                                                      
		                  
	 
	    
	 
		                                                                
	 

	                  
 

                                                          
 
	                                             
		                                             

	              
 

                                                         
 
	                                 

	                                                                       
	                                                                                         
	                                                                       
 

                                                             
 
	                            

	             

	                              
	                        
	 
		                                                                          
		                                                               
		 
			                      
		 
	 

	             
 

                                                                                       
 
	                                                                                                                                                             
	                                                          
 

                                                                                         
 
	                                                     
 

                                                                                        
 
	                                                    
 

                                                                                                        
 
	                                                  
 
#endif          

  
                          
  

bool function IsNotBusy( entity player, entity ent, int useFlags )
{
	if ( Bleedout_IsBleedingOut( player ) )
		return false

	if ( player.ContextAction_IsActive() )
		return false

	if ( !SURVIVAL_PlayerAllowedToPickup( player ) )
		return false

	if ( ent.e.isBusy )
		return false

	if ( StatusEffect_GetSeverity( player, eStatusEffect.interrupted ) > 0.0 )
		return false

	return true
}

#if CLIENT
void function ManageRespawnChamberData( entity ent, var rui )
{
	file.chamberToBeamFX[ ent ] <- -1
	file.respawnChamberRuis.append( rui )
	ent.EndSignal( "OnDestroy" )

	UpdateRespawnChamberRuis( rui, HasTeammatesToRespawn( GetLocalViewPlayer().GetTeam() ) )

	OnThreadEnd(
		function() : ( ent, rui )
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				EffectStop( file.chamberToBeamFX[ ent ], true, true )

			delete file.chamberToBeamFX[ ent ]

			file.respawnChamberRuis.fastremovebyvalue( rui )

			file.mobileRespawnSpawnInProgress = false
		}
	)

	WaitForever()
}

void function AddRadarToRespawnStation( entity ent )
{
	bool isMobile = ent.GetTargetName() == MOBILE_RESPAWN_BEACON_TARGETNAME

	vector fwd    = AnglesToForward( ent.GetAngles() )
	vector up     = AnglesToUp( ent.GetAngles() )
	vector rgt    = AnglesToRight( ent.GetAngles() )
	vector offset = up * 100
	vector angles = AnglesCompose( ent.GetAngles(), <0, 0, -10> )

	ent.EndSignal( "OnDestroy" )

	float height = isMobile ? 32.0 : RESPAWN_BEACON_HOLO_EFFECT_HEIGHT

	entity fxHolder = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", ent.GetOrigin() + up * height, <-90, 0, 0> )

	array<int> fx
	fx.append( StartParticleEffectOnEntity( fxHolder, GetParticleSystemIndex( RESPAWN_BEACON_EMITTER_FX ), FX_PATTACH_ABSORIGIN_FOLLOW, ATTACHMENTID_INVALID ) )
	EmitSoundOnEntity( fxHolder, SOUND_HOLOGRAM_LOOP )

	OnThreadEnd(
		function() : ( fx, fxHolder )
		{
			                                        
			foreach ( effect in fx )
			{
				EffectStop( effect, false, true )
			}
			fxHolder.Destroy()
		}
	)

	WaitForever()
}

void function MinimapPackage_RespawnDNA( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", $"" )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
	RuiSetFloat2( rui, "iconScale", <1.0, 60.0 / 120.0, 0.0> * 2.0 )

	thread RespawnDNA_SetCharacterIcon( ent, rui, "defaultIcon" )
}

void function RespawnDNA_SetCharacterIcon( entity ent, var rui, string argName )
{
	ent.EndSignal( "OnDestroy" )

	entity owner = ent.GetOwner()
	if ( !IsValid( owner ) )
		return

	owner.EndSignal( "OnDestroy" )

	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( owner ), Loadout_Character() )

	asset setFile = CharacterClass_GetSetFile( character )
	asset icon    = GetGlobalSettingsAsset( setFile, "unitframe_icon" )

	RuiSetImage( rui, argName, icon )
}

void function MinimapPackage_RespawnChamber( entity ent, var rui )
{
	#if MINIMAP_DEBUG
		printt( "Adding " + RESPAWN_BEACON_ICON + " (RespawnChamber) icon to minimap" )
	#endif

	RuiSetImage( rui, "defaultIcon", RESPAWN_BEACON_ICON )
	RuiSetImage( rui, "smallIcon", RESPAWN_BEACON_ICON_SMALL )
	RuiSetBool( rui, "hasSmallIcon", true )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
}

string function RespawnChamber_TextOverride( entity ent )
{
                    
                                     
                                   
       

	if ( file.mobileRespawnSpawnInProgress )
	{
		return ""
	}

	entity player = GetLocalViewPlayer()
	int team      = player.GetTeam()
	if ( GetPlayerArrayOfTeam( team ).len() == GetPlayerArrayOfTeam_Alive( team ).len() ||
			!HasTeammatesToRespawn( team ) )
	{
                     
                                                    
                                
      
        
			return "#HINT_RESPAWN_NEED"
	}

		return "#HINT_RESPAWN_USE"
}

string function RespawnDNA_TextOverride( entity ent )
{
	if ( GetLocalViewPlayer().GetTeam() == ent.GetTeam() )
		return Localize( "#HINT_PICKUP_DNA_USE", ent.GetOwner().GetPlayerName() )

	return "#HINT_DESTROY_DNA_USE"
}

#endif          

float function GetRespawnStationUseTime( entity ent )
{
	return RESPAWN_BEACON_RESPAWN_TIME
}

void function RespawnChamberOnUse( entity pickup, entity player, int pickupFlags )
{
	if ( !(pickupFlags & USE_INPUT_LONG) )
		return
                   
                                                                                                                                                                
        
     
	if ( !HasTeammatesToRespawn( player.GetTeam() ) )
		return
      

	float time = Time()
	RespawnChamberOnUse_Common( pickup, player, time )

#if SERVER
	                                                                 
	                                                                                                        
	                                                                                                                                                           
	                                                                                                                     
	                                                                                          
	                                                                                                                       
#endif
}

#if CLIENT
void function ServerToClient_RespawnChamberOnUse( entity pickup, entity player )
{
	if ( !IsValid( pickup ) || !IsValid( player ) )                                                                             
		return

	                                                                                                                                      
	                                                                                                                        
	                                                                                                                
	if ( player.p.isInExtendedUse )
	{
		                                    
		return
	}
	else
	{
		RespawnChamberOnUse_Common( pickup, player, Time() )
	}
}
#endif

bool function RespawnBeacon_ShouldUseBlockReload( entity player, entity ent )
{
	return false;
}

void function RespawnChamberOnUse_Common( entity pickup, entity player, float startTime )
{
	#if CLIENT
		HidePlayerHint( "#RESPAWN_AT_BEACONS_HINT" )
	#endif

	ExtendedUseSettings settings
	settings.successSound = RESPAWN_BEACON_SUCCESS_SOUND

	#if CLIENT
		settings.loopSound = RESPAWN_BEACON_LOOP_SOUND
		settings.displayRui = $"ui/health_use_progress.rpak"
		settings.displayRuiFunc = DisplayRuiForRespawnChamber
		settings.icon = $""

                     
                                                                                                                      
                                        
      
        
			settings.hint = "#HINT_RESPAWNING"
		settings.icon = RESPAWN_BEACON_ICON
		settings.serverStartTime = startTime

		if ( pickup.GetTargetName() == MOBILE_RESPAWN_BEACON_TARGETNAME )
		{
			settings.successFunc = RespawnSuccessClient_Mobile
		}
	#elseif SERVER
		                                          
		                                       

		                                                                 
		 
			                                                 
			                                              
		 

                           
                                                                
    
                                                        
                                                     
    
        

		                                                             
		                            
		                               
		                             
	#endif

	if ( pickup.GetTargetName() == MOBILE_RESPAWN_BEACON_TARGETNAME )
	{
		settings.duration = GetRespawnStationUseTime_Mobile( pickup )
	}
                          
                                                                   
   
                                                                
   
                                
	else
		settings.duration = GetRespawnStationUseTime( pickup )

	settings.useInputFlag = IN_USE_LONG

	thread ExtendedUse( pickup, player, settings )
}

#if SERVER
                                                                                                              
 
                         
                                                              
                                  
      

	                                                                 
		                             

	                      
 
#endif

#if CLIENT
void function DisplayRuiForRespawnChamber( entity ent, entity player, var rui, ExtendedUseSettings settings )
{
	float startTime = settings.serverStartTime > 0.0 ? settings.serverStartTime : Time()
	float endTime = startTime + settings.duration
	DisplayRuiForRespawnChamber_Internal( rui, settings.icon, startTime, endTime, settings.hint )
}

void function DisplayRuiForRespawnChamber_Internal( var rui, asset icon, float startTime, float endTime, string hint )
{
	RuiSetBool( rui, "isVisible", true )
	RuiSetImage( rui, "icon", icon )
	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetGameTime( rui, "endTime", endTime )
	RuiSetString( rui, "hintKeyboardMouse", hint )
	RuiSetString( rui, "hintController", hint )
}
#endif          

#if SERVER
                                                                                                    
 
	                                                                                                                                                                              
	                                                              
 

                                                                                                   
 
	                                                                                                                                                                        
	                                                           
 

                                                                     
 
                    
                                                        
                                         
       

	                                                     
		            

	                                                                                            
	           
 

                                                                                            
 
	                                                 
		      

	                                                             

	                                                           

	                                       
	                                    
	                                    

	                                                                        
	                                                                                                                                                            
	                                            
	                                         

	                                 		                   

	                                             
	 
		                        
		 
			                          
		 
	 

	             
 

                                                                                                                                                                    
 
	                            
	                                             
	 
		                                                                                                   
		 
			                          
			                                                    
		 
	 

	                                                       
	 
		                                          
	 

	                                                         
 
#endif          

  
                   
  

int function CountTeammatesWaitingToBeRespawned( int team )
{
	int count = 0
	foreach ( player in GetPlayerArrayOfTeam( team ) )
	{
		if ( !IsAlive( player ) )
		{
			if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
				count++
		}
	}
	return count
}

bool function HasTeammatesToRespawn( int team )
{
	return CountTeammatesWaitingToBeRespawned( team ) > 0
}


#if CLIENT
string function RespawnBeacon_TextOverride( entity ent )
{
	entity player = GetLocalViewPlayer()
	entity owner  = ent.GetOwner()

	if ( !IsValid( owner ) )
		return ""

	if ( !owner.IsPlayer() )
		return ""

	if ( ent.GetTeam() == player.GetTeam() )
		return Localize( "%use% Respawn " + owner.GetPlayerName() )

	return Localize( "%use% Destroy Respawn Beacon" )
}
#endif          

int function GetRespawnStatus( entity player )
{
	if ( !IsValid( player ) )
		return eRespawnStatus.NONE

	return player.GetPlayerNetInt( "respawnStatus" )
}

int function GetRespawnStyle()
{
	int respawnStyle
	string playlistRespawnStyle = GetCurrentPlaylistVarString( "survival_respawn_style", "respawn_chambers" ).tolower()
	bool respawnStyleFound = false

	for( int i = 0; i < eRespawnStyle._COUNT; i++ )
	{
		string enumStyle = GetEnumString( "eRespawnStyle", i )
		if (enumStyle.tolower() == playlistRespawnStyle)
		{
			respawnStyle = i
			respawnStyleFound = true
			break
		}
	}

	Assert( respawnStyleFound, "Playlist Respawn Style '" + playlistRespawnStyle + "' is not a specified enumerator." )

	return respawnStyle
}

#if SERVER
                                        
 
	                                              
	 
		                                                                                                                        
		                                            
		 
			                                                              
		 
	 
 
#endif          

#if SERVER
                                                          
 
	                                                    
	                                                                               
	                                    
 
#endif


#if CLIENT
void function ServerCallback_DisplayWaitingForRespawn( entity ent, float startTime, float endTime )
{
	thread DisplayWaitingForRespawnThread( ent, startTime, endTime )
}

void function DisplayWaitingForRespawnThread( entity ent, float startTime, float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )
	clGlobal.levelEnt.EndSignal( "ReviveRuiThread" )

	if ( !IsValid( ent ) )
		return

	ent.SetDoDestroyCallback( true )
	ent.EndSignal( "OnDestroy" )

	if ( Time() > endTime )
		return

	DeathScreen_UpdateRespawnTime( startTime, endTime )

	OnThreadEnd(
		function() : ()
		{
		}
	)

	wait endTime - Time()
}

void function ServerCallback_RespawnPodStarted( float endTime )
{
	thread ReviveRuiThread( endTime )
}

void function ReviveRuiThread( float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )

	DeathScreen_UpdateRespawnTime( Time(), endTime )

	Chroma_RespawningInDropship()

	OnThreadEnd(
		function() : ()
		{
			Chroma_RespawnComplete()
		}
	)

	wait (endTime - Time())
}

void function ServerCallback_RespawnDNAHint()
{
	AddPlayerHint( 10.0, 1.0, $"", "#RESPAWN_AT_BEACONS_HINT" )
}
#endif          

#if SERVER
                                                          
 
	                                                         
	                                  
	 
		                                     
			                             

		                                        
			                                

		                                                          
		 
			                                                                          
		 
	 
 

                                                                                       
 
	                                                      

	                                   

	                         
		      

	                                                 
		      

	                           
	   
	  	                          
	  	                           
	  	                             
	  		      
	   

                          
	                                                                                                                  
		      
      

	                                                                       
	                                                                            
	                                                                                
	                                                  

	                                                                                                                                                            
	                                                               
	                                                             

               
	                                           
      
 

                                                                              
 
	                                                        
	                                                                                                                     
	                                                     
	                                                                                                 

	                                                                                                                                                                            
		      
	                                                                                   
		      

	                                                                                 
		      

	                                                                           
 

                                                                   
                   
 
	                            
	                            

	            
		                         
		 
			                      
			 
				                     
				 
					                               
					                              
				 
			 
		 
	 

	                      
	                                                          

	             
 

                                                                          
 
                    
                                                                                  
       

	                             
	                      
                     
                                  
        
		      

	            
	           

	                    
	 
		                      
		                       
	 

                   
                        
                          
      

	                        
		      

	                                      
	 
		                                                                            
		 
			                                                     
			                                              
                              
					                             
          
					                                                                               
		 

		                                                                             
		                                                   
		                                                             
		                                                                         
		                               

		                                                         

		                                                                           

		                  
			             

		                     
		                                                                                    
	 
 

                            
                                                                                     
 
	                                         
	                          
	 
		                                                                                                                                    
		                                      
		                        
	 
 
      

                                        
 
	                                   
	                     
	 
		                                                                                                           
		                                  
		                   
	 
 

                                                                      
 
	                                                         
	                         
	 
		                                                                                                                     
		                                                   
		                       
	 
 

                                                                                                                                                      
 
	                             
	                             

	                                     
	                                                                    

	                                            
	                                                         
	                                                      
	                                                 
	                                                   
	                                                 

	                                          
	                                                       
	                                                    
	                                                 
	                                                 
	                                               

	                                     
	                                         
	                                                 
	                                                 
	                    
		                                                                             

	                                                                                                                                                                                          
	                                                                                                                   
	                                                                   
	                                     

	                                        

	                    
		                                                                                               
	                  

	                          
	                                          
	                                
	                                    

	                     
	                       
	                                           
	                                             

	            
		                           
		 
			                        
			 
				                         
					                                                             

				                                                    
				                                            

				                    
					                                             
				                                       
					                                
				                                                  
					                                     

				                                                              
				                                                          
				                          
				                                 
				                    
				                                   
				                          
			 
		 
	 

	                                                                  
	             

	                         
	 
		                         
		                     
	 
	    
	 
		                                  
	 

	                                                       
		              

	                                    

	                                       
	                                     
	                                  
	                                          
	                                            
	                        
	                                                                                 
	                                             
	                                                                
	                         
	 
		                                                
	 

	                            

	                                           
	 
		                                                                       
                              
			                                                                                          
			 
				                                                                                  
			 
        

		                                    
	 
 

                                                  
 
	                                           

	              
	 
		                         
		 
			                         

			                                                                             
			      
		 
		           
	 
 

                     
                                                                                            
 
                      
                                                                     

                                           
                                                        
                                                     
                                                  
                                                  
                                                

                                      
                                   
                                           
                                             
                        
                         

                                        
                                                

                                                                                  

             
                             
   
                           
    
                             
                                                                  

                                                        
                                                

                        
                                                  
                                           
                                     
                                                      
                                          

                                                    
                                       
                              
    
   
  

                                                                 
 
                          


                                                                           
 
	                                

	                                                                                                                           

	                                                  
	                                                                                                          
		                                                  
 

                                                                                    
 
	                             
	             
	                                             
	                       
	                                       
 

                                                                      
 
	                                      

	                                                             
	                                                                               
	                                         

	                                            
	                                                                                                           
	                                                                                 
	                                                                                                        
	                                                                                                       

	                         
	                                                                                     


	                                            
	                                            
	 
		                                  
		                                  
                                
                                                                                                                                                                
                                                                                                                                                                                            
   
          
                                                                                                                                                  
         
                                
   
                                                                                                                                                                                                                                    
   
          
                                                                                                                                
         
                                
   
                                      

		                                                                     
		                                                                                                
		 
			                                 
			              
		 

		                                                                                                                
		 
			                                  
			              
		 

		                              
		 
			                                                        
			                                                                                                                          
			                                       
			 
				                                                                     

				              
				                                         
				                                           
				                                                                                                          

				                                                                    
				                                                              
				                                   
				                                                                                                                                                     
				                                                                                                                                                                           
				                                                 
				                                                   

				       
					                                               
					                                                           
					                                      
					                                                                                
					                                                
				      
				                                                                                 

                                  
                                                                                                                                                                         
                                                             
     
                                     
                                                     
                                                      
                                 
                                
                                 
                                     
                              
                               
                              
                      
                    
                     

                                                                   
      
                                                                                          
                                                                                                                                   
                                                                                                                                   

                                                                                                                                              
                                                      
                             

                                                                                                                         
                             
       
                                                                                          
                                                
                                                                                                                      
                                                                                                  

                                                         
        
                                                                                                       
                                                                                
                                                                                    
        

                                                                             
                                                                                                                                                  
                                                                                                                      
        
               
                                                                                                                                                                   
              
                                                                              
                              
        
                                                                                                                                                                                       
        
               
                                                                                                                                                                                          
              
                                                                                                                       
                                                          
                                                                                               
                                                 

                                                          
         
                                                                               
         
            
         
                                         
         
                              
        
                                                                                                                                     
        
               
                                                                                                                                                                           
              
                                                                                                                         
                                        
                              
        
                                                                                                                                                                                                                 
        
               
                                                                                                                                                              
              
                                                                                                                                   
                                                                    
                              
        
                                                               
        
               
                                                                                                   
              
        
       

                                                                                                                                
                                                                                                               
       
                                                       
        
                                          
                                         
                                          
        
           
        

                                                                                                                                                      
                                           
                                           
                                           
               
                                                                                                                                                                                        
              
        

                                                                       
                                                                                      
                                                                          

                                                       
        
               
                                                                                                                                                                                                              
              
                                    
             
        
           
        
               
                                                                                                                                                                                                                  
              
        
       

                                                                                                       
                                                                                                          
                                                                                                                                                                                          
       
                                                                                                         
                                                                                    
                                                                                    
                                                        
        
               
                                                                                                                                                                                                                  
              
                                    
             
        
           
        
               
                                                                                                                                                                                                                      
              
        
       
      
     
                                        

				                                                                             
				                             
				 
					       
						                                                                                                                              
					      
					        
				 

				                                          
				 
					       
						                                                                                               
					      
					              
				 
				                     
				 
					                                                                            
					                                                                                              
					                                                                             
					                                                                               
					       
						                                                       
						        
							                                                                                                    
							                                            
							                                                        
							                                                       
						 
						                                                                                                                            
					      
					                                                   
					                                                      
					                                                                                   
					                                               
					 
						       
							                                                   
						      
						              
					 
					       
						                                                                                   
					      
				 
			 
		 
	 
	           
 

                                                 
 
	                          
		      

	                                                                                                                                
	                                                                                                         
	 
		                                                                                                 
	 

	                        
	                                
 

                                                  
 
	                                                                                                    
	                                                               
	                                                                             

	                                            

	                                                                                                                                                 
	                                    

	                                  
 

                                                                      
 
	                                                               
	 
		                                                                                       
			                                            
		                            
	 

	           
 
#endif          

bool function AnaylsisFuncDropshipTestJumpout( FlightPath flightPath, vector origin, float yaw )
{
	vector angles  = <0, yaw, 0>
	vector forward = AnglesToForward( angles )
	vector right   = AnglesToRight( angles )

	if ( !IsLegalFlightPath( flightPath, origin, forward, right, true ) )
		return false

	if ( !CanDeploy( flightPath, origin, angles, forward, right ) )
		return false

	return true
}

bool function CanDeploy( FlightPath flightPath, vector origin, vector angles, vector forward, vector right )
{
	Point deployPoint   = GetPreviewPoint( flightPath )
	vector deployOrigin = GetOriginFromPoint( deployPoint, origin, forward, right )
	vector deployAngles = GetAnglesFromPoint( deployPoint, angles )

	             
	deployAngles.x = 0
	deployAngles.z = 0

	vector deployFwd = AnglesToForward( deployAngles )

	deployOrigin = deployOrigin - deployFwd * 150                        

	TraceResults results = TraceHull( deployOrigin, deployOrigin - <0, 0, 1000>, <-300, -300, -300>, <300, 300, 300>, null, flightPath.traceMask, TRACE_COLLISION_GROUP_NONE )
	                                                            
	                                                                      
	                                                                         

	if ( results.startSolid )
		return false

	if ( results.fraction < 1 )
		return false

	return true
}

#if CLIENT
void function TryPingRespawnItem( entity player )
{
	if ( !IsSpectating() )
		return

	entity viewPlayer = GetLocalViewPlayer()

	if ( PlayerIsMarkedAsCanBeRespawned( player ) )
	{
		vector org = viewPlayer.GetOrigin()
		Remote_ServerCallFunction( "ClientCallback_PingNearestRespawn", org )
	}
}
#endif

#if SERVER
                                                                            
 
	                        
	                                   
		                                           
	    
		                                   

	                                  
		      

	                                     

	                                                                                     
	 
		                   
	 
	                                                                                            
	 
		                                       
	 
 

                                                                                                     
 
	                                        
		                                                                                                             

	                                                          
	 
		                   
	 
 

                                                                                              
 
	                                                     
 

                                                                      
 
	                                                                        

	                                                         
	 
		                   
	 
 

                                                                                             
 
	                                          
 

                                                                       
 
	                                        
 
#endif          

#if CLIENT
bool function IsRespawnStationPingType( int pingType )
{
	switch( pingType )
	{
		case ePingType.RESPAWN_STATION:
		case ePingType.RESPAWN_MOBILE:
                          
                                   
       
			return true
	}

	return false
}

void function PlayerWaypoint_CreateCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( WaypointOwnerIsMuted( wp ) )
		return

	if ( IsRespawnStationPingType( pingType ) )
	{
		if ( IsValid( pingedEnt ) )
		{
			if ( IsRespawnStationEnt( pingedEnt ) )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", false )
				}
			}
		}
	}

	if ( pingType == ePingType.RESPAWN_CARD )
	{
		if ( IsValid( pingedEnt ) && pingedEnt.GetNetworkedClassName() == PLAYER_WAYPOINT_CLASSNAME )
		{
			var rui = pingedEnt.wp.ruiHud
			if ( rui != null )
			{
				RuiSetGameTime( rui, "startPingTime", Time() )
			}
		}
	}
}

void function PlayerWaypoint_DestroyCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( IsRespawnStationPingType( pingType ) )
	{
		if ( IsValid( pingedEnt ) )
		{
			if ( IsRespawnStationEnt( pingedEnt ) )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", true )
				}
			}
		}
	}
}

void function ServerCallback_RespawnBeaconStart( float startTime, float endTime )
{
	if ( IsSpectating() )
	{
		thread SpectatorShowRespawnRui( startTime, endTime )
	}
}

void function SpectatorShowRespawnRui( float startTime, float endTime )
{
	entity player = GetLocalViewPlayer()

	if ( !IsValid( player ) )
		return

	if ( Time() > endTime )
		return

	player.EndSignal( "OnDeath" )
	clGlobal.levelEnt.EndSignal( "SpectatorShowRespawnRui" )

	var rui = CreateFullscreenRui( $"ui/health_use_progress.rpak" )
	DisplayRuiForRespawnChamber_Internal( rui, RESPAWN_BEACON_ICON, startTime, endTime, "#HINT_RESPAWNING" )

	EmitSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )

	OnThreadEnd(
		function() : ( rui, player )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )
			}

			RuiDestroy( rui )
		}
	)

	float waitTime = endTime - Time()
	wait waitTime
	EmitSoundOnEntity( player, RESPAWN_BEACON_SUCCESS_SOUND )
}

void function ServerCallback_RespawnBeaconStop()
{
	if ( IsSpectating() )
		clGlobal.levelEnt.Signal( "SpectatorShowRespawnRui" )

	entity player = GetLocalViewPlayer()
                   
                                    
                                   
      
}
#endif          

bool function IsRespawnStationEnt( entity ent )
{
	switch( ent.GetTargetName() )
	{
		case RESPAWN_CHAMBER_TARGETNAME:
		case MOBILE_RESPAWN_BEACON_TARGETNAME:
                          
                                    
       
			return true

	}

	return false
}

#if CLIENT
void function RespawnSuccessClient_Mobile( entity ent, entity playerUser, ExtendedUseSettings settings )
{
	file.mobileRespawnSpawnInProgress = true

	entity viewPlayer = GetLocalViewPlayer()

	if ( !IsValid( viewPlayer ) )
		viewPlayer = GetLocalClientPlayer()

	if ( !IsValid( viewPlayer ) )
		return

	bool waitingToBeRespawned = HasTeammatesToRespawn( viewPlayer.GetTeam() )
	foreach ( rui in file.respawnChamberRuis )
	{
		UpdateRespawnChamberRuis( rui, waitingToBeRespawned )
	}
}
#endif          

#if SERVER && DEV
                                                                                 
 
	             
	                                                    
	                                    
	 
		                                          
		 
			                           
		 
	 

	                        
	 
		                                           
	 
 
#endif