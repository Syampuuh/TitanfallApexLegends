global function ShWeaponInspect_Init
#if CLIENT
global function SCB_WeaponInspectHint
global function SCB_AttemptWeaponInspect
#endif

const float GLADIATOR_CARD_INSPECT_SHOW_TIME = 5.0

struct
{
	#if CLIENT
		var gladiatorCardRui
		int weaponInspectHideHudCount
	#endif
} file

void function ShWeaponInspect_Init()
{
	#if CLIENT
		RegisterConCommandTriggeredCallback( "weapon_inspect", OnInspectKeyPressed )

		RegisterConCommandTriggeredCallback( "scoreboard_profile", function( entity ply ) {
			                                                                            
			GetLocalClientPlayer().ClientCommand( "weapon_inspect" )
		} )

		AddCreateCallback("player", WeaponInspect_OnPlayerCreated )
	#endif
}

#if CLIENT
void function WeaponInspect_OnPlayerCreated( entity player )
{
	if ( player == GetLocalClientPlayer() && player.GetTeam() == TEAM_SPECTATOR )
		thread WeaponInspect_Observer_Think( player )
}

void function SCB_WeaponInspectHint()
{
	if ( GetLocalViewPlayer() != GetLocalClientPlayer() )
		return

	if ( IsControllerModeActive() )
	{
		AddPlayerHint( 4.0, 0.25, $"", "HINT_WEAPON_INSPECT_CONTROLLER" )
	}
	else
		AddPlayerHint( 4.0, 0.25, $"", "#HINT_WEAPON_INSPECT" )

}

void function WeaponInspect_Observer_Think( entity localClientPlayer )
{
	localClientPlayer.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ()
		{
			if( file.weaponInspectHideHudCount > 0 )
			{
				Minimap_EnableDraw()
				Crosshair_SetState( CROSSHAIR_STATE_SHOW_ALL )
				WeaponInspectHideHudElements( false )

				HideGladiatorCardSidePane()
			}
		}
	)

	bool lastInspectingWeapon = false

	while( true )
	{
		bool isInspectingWeapon = false
		entity viewPlayer = GetLocalViewPlayer()
		if ( viewPlayer )
		{
			entity viewWeapon = viewPlayer.GetActiveWeapon( eActiveInventorySlot.mainHand )
			isInspectingWeapon = ( viewWeapon != null ) && ( viewWeapon.GetWeaponActivity() == ACT_VM_WEAPON_INSPECT )
		}

		if( lastInspectingWeapon != isInspectingWeapon )
		{
			if( isInspectingWeapon )
			{
				Minimap_DisableDraw()
				Crosshair_SetState( CROSSHAIR_STATE_HIDE_ALL )
				WeaponInspectHideHudElements( true )
			}
			else
			{
				if( file.weaponInspectHideHudCount > 0 )
				{
					Minimap_EnableDraw()
					Crosshair_SetState( CROSSHAIR_STATE_SHOW_ALL )
					WeaponInspectHideHudElements( false )
				}
			}

			lastInspectingWeapon = isInspectingWeapon
		}

		WaitFrame()
	}
}

void function OnInspectKeyPressed( entity localPlayer )
{
	entity weapon = localPlayer.GetActiveWeapon( eActiveInventorySlot.mainHand )
	if ( !IsValid( weapon ) )
		return

	if ( !weapon.Anim_HasActivity( "ACT_VM_WEAPON_INSPECT" ) )
		return

	  
		                                                                                                             
		                                                    
		                                                   
			      

		                                                                     
		                                                
			                                               
	  

	thread WatchWeaponInspectState( GetLocalViewPlayer(), weapon )
}

void function SCB_AttemptWeaponInspect()
{
	if ( GetLocalViewPlayer() != GetLocalClientPlayer() )
		return

	GetLocalClientPlayer().ClientCommand( "weapon_inspect" )
}

void function ShowGladiatorCard( entity weapon, entity owner )
{
	thread DisplayGladiatorCardSidePane( eGladCardDisplaySituation.WEAPON_INSPECT_OVERLAY_ANIMATED,
		ToEHI( owner ), $"rui/gladiator_cards/header/icon_inspect_temp", "WEAPON OWNED BY", "[INSERT SKIN NAME HERE]" )
}


void function WatchWeaponInspectState( entity player, entity weapon )
{
	                                            
	                                                                                                                                                                            
	Minimap_DisableDraw()
	Crosshair_SetState( CROSSHAIR_STATE_HIDE_ALL )
	WeaponInspectHideHudElements( true )

	OnThreadEnd(
		function() : ()
		{
			Minimap_EnableDraw()
			Crosshair_SetState( CROSSHAIR_STATE_SHOW_ALL )
			WeaponInspectHideHudElements( false )

			HideGladiatorCardSidePane()
		}
	)

	while( true )
	{
		entity viewPlayer = GetLocalViewPlayer()
		if ( viewPlayer != player )
			break

		entity viewWeapon = viewPlayer.GetActiveWeapon( eActiveInventorySlot.mainHand )
		if ( viewWeapon != weapon )
			break

		if ( weapon.GetWeaponActivity() != ACT_VM_WEAPON_INSPECT )
			break

		WaitFrame()
	}
}

void function WeaponInspectHideHudElements( bool hide )
{
	if ( hide )
		file.weaponInspectHideHudCount++
	else
		file.weaponInspectHideHudCount--

	Assert( file.weaponInspectHideHudCount >= 0, "Tried to unhide the equipment slots when they were already visible" )

	var gamestateRui = ClGameState_GetRui()

	if ( file.weaponInspectHideHudCount == 0 && !hide )
	{
		RuiSetBool( gamestateRui, "weaponInspect", false )
		PlayerHudSetWeaponInspect( false )
		WeaponStatusSetWeaponInspect( false )
	}
	else if ( hide )
	{
		RuiSetBool( gamestateRui, "weaponInspect", true )
		PlayerHudSetWeaponInspect( true )
		WeaponStatusSetWeaponInspect( true )
	}
}
#endif
