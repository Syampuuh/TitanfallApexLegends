globalize_all_functions

struct
{
	table<string,table<string,int> > mapModeScoreLimits
} file

int function GetRoundScoreLimit_FromPlaylist()
{
	if ( !GameMode_IsDefined( GAMETYPE ) )
		return GetCurrentPlaylistVarInt( "roundscorelimit", 10 )

	return GameMode_GetRoundScoreLimit( GAMETYPE )
}

int function GetScoreLimit_FromPlaylist()
{
	if ( GameMode_HasMapSpecificScoreLimits( GAMETYPE ) )
		return GameMode_GetMapSpecificScoreLimit( GAMETYPE )

	if ( !GameMode_IsDefined( GAMETYPE ) )
		return GetCurrentPlaylistVarInt( "scorelimit", 10 )

	return GameMode_GetScoreLimit( GAMETYPE )
}

bool function GameMode_HasMapSpecificScoreLimits( string gameType )
{
	if ( gameType in file.mapModeScoreLimits )
	{
		if ( GetMapName() in file.mapModeScoreLimits[gameType] )
			return true
	}
	return false
}

int function GameMode_GetMapSpecificScoreLimit( string gameType )
{
	return file.mapModeScoreLimits[gameType][GetMapName()]
}

void function GameMode_SetMapSpecificScoreLimit( table<string,int> mapModeScoreTable, string gameType )
{
	Assert( !( gameType in file.mapModeScoreLimits ), "GAMETYPE has already been added to mapModeScoreLimits" )
	file.mapModeScoreLimits[gameType] <- mapModeScoreTable
}

bool function IsSuddenDeathGameMode()
{
	return GameMode_GetSuddenDeathEnabled( GameRules_GetGameMode() )
}

IntFromEntityCompare function GetScoreboardCompareFunc()
{
	return ScoreboardCompareFuncForGamemode( GameRules_GetGameMode() )
}

IntFromEntityCompare function ScoreboardCompareFuncForGamemode( string gamemode )
{
	IntFromEntityCompare func = GameMode_GetScoreCompareFunc( gamemode )
	return func
}

bool function IsRoundWinningKillReplayEnabled()
{
	return GetGlobalNonRewindNetBool("roundWinningKillReplayEnabled")
}

bool function IsRoundWinningKillReplayPlaying()
{
	return GetGlobalNonRewindNetBool( "roundWinningKillReplayPlaying" )
}

bool function HasRoundScoreLimitBeenReached()                                                                                                                                                                                    
{
	if ( !IsRoundBased() )
		return false

	int roundLimit = GetRoundScoreLimit_FromPlaylist()

	if ( !roundLimit )
		return false

	int militiaScore = GameRules_GetTeamScore2( TEAM_MILITIA )
	int imcScore = GameRules_GetTeamScore2( TEAM_IMC )

	if ( ( militiaScore >= roundLimit ) || ( imcScore >= roundLimit ) )
		return true

	return false
}

bool function IsTitanAvailable( entity player )
{
	return false
}


bool function IsRespawnAvailableBits( int index, int mask )
{
	Assert( index >= 0 )
	Assert( index <= 3 )

	return ( GetGlobalNonRewindNetInt( "respawnAvailableBits" +  index) & mask ) != 0
}

bool function IsRespawnAvailable( entity player )
{
	int varIndex = ( player.GetEntIndex() - 1 ) / 32
	int shiftIndex = player.GetEntIndex() - 1 - (varIndex*32)
	int elimMask = (1 << shiftIndex)

	return IsRespawnAvailableBits( varIndex, elimMask )
}

bool function IsPrivateMatchSpectator( entity player )
{
	      
	#if SERVER
	                                        
		            
	#endif

	if ( IsPrivateMatch() && player.GetPersistentVarAsInt( "privateMatchState" ) == 1 )
		return true

	return false
}

#if CLIENT
void function SendFPSToServer()
{
	                                    
	                                    
	                                   
	int frameRate = int( GetClientFPS() + 0.5 )
	                               
	                                   
	                                    

	entity player = GetLocalClientPlayer()
	player.ClientCommand( "CurrentFPS " + frameRate )
}
void function ServerToClient_LeafSystemMarkPvs()
{
	entity player = GetLocalClientPlayer()
	if ( IsValid( player ) )
		player.ClientCommand( "leafsystem_markpvs" )
}
#endif


int function GameState_WinBy2GetNumTies()
{
	int numRounds = GetRoundsPlayed()
	int minScore = GameMode_GetWinBy2MinScore( GameRules_GetGameMode() )

	if ( numRounds <= minScore )
		return 0

	int numTies = (numRounds - minScore + 1) / 2
	return numTies
}

bool function GameState_WinBy2IsMatchPoint()
{
	if( GameState_IsFinalRound() )
		return true

	int minScoreToWin = GameMode_GetWinBy2MinScore( GameRules_GetGameMode() )

	array< int > allTeams = GetAllValidPlayerTeams()
	foreach( int team in allTeams )
	{
		int myTeamScore = GameRules_GetTeamScore2( team )
		if ( myTeamScore+1 >= minScoreToWin )
		{
			bool hasCloseMatch = false
			foreach( int enemyTeam in allTeams )
			{
				if ( enemyTeam != team )
				{
					int enemyTeamScore = GameRules_GetTeamScore2( enemyTeam )
					if ( myTeamScore <= enemyTeamScore )
					{
						hasCloseMatch = true
						break
					}
				}
			}

			if ( !hasCloseMatch )
			{
				return true
			}
		}
	}

	return false
}

bool function GameState_IsFinalRound()
{
	return GetRoundsPlayed() == GetMaxRoundsToPlay() - 1
}

int function GetMaxRoundsToPlay()
{
	Assert( IsRoundBased() )

	return GetRoundScoreLimit_FromPlaylist() * 2 - 1
}