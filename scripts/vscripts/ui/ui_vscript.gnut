                      
            
                
                 

global function UICodeCallback_UIInit
global function UICodeCallback_UIShutdown
global function UICodeCallback_ControllerModeChanged
global function UICodeCallback_OnVideoOver
global function AddUICallback_OnLevelInit
global function AddUICallback_InputModeChanged
global function AddUICallback_KeyBindSet
global function AddUICallback_UIShutdown


global struct CTAData
{
	void functionref() showFunc
	void functionref() visitFunc
}

global struct TabDef
{
	var                                                    button
	var                                                    panel
	var                                                    parentPanel
	string                                                 title
	bool                                                   visible = true
	bool                                                   enabled = true
	bool                                                   new = false
	bool                                                   wantDividerAfter = false
	float                                                  tabBarLeftOffsetFracIfVisible = 0.0
	bool functionref( var panel, int destinationTabIndex ) canNavigateFunc = null
	CTAData ornull										   ctaData

	bool   useCustomColors
	vector customDefaultBGCol = <1.0, 1.0, 1.0>
	vector customDefaultBarCol = <1.0, 1.0, 1.0>
	vector customFocusedBGCol = <1.0, 1.0, 1.0>
	vector customFocusedBarCol = <1.0, 1.0, 1.0>
	vector customSelectedBGCol = <1.0, 1.0, 1.0>
	vector customSelectedBarCol = <1.0, 1.0, 1.0>
}

                   
global const int LEFT = 0
global const int RIGHT = 1

global struct InputDef
{
	int                          input
	int                          alignment = LEFT
	bool                         clickable = false
	string                       gamepadLabel
	var                          vguiElem
	string                       mouseLabel
	bool functionref()           conditionCheckFunc
	bool                         lastConditionCheckResult
	void functionref( var )      activateFunc
	void functionref( InputDef ) updateFunc
}

global struct DialogButtonData
{
	string             label
	void functionref() activateFunc
	string             focusMessage
	bool               startFocused

	void functionref( table payload ) activateFuncEx
	table                             payload

	bool   isDisabled = false
	vector customColor = <1, 1, 1>
}

global struct DialogFooterData
{
	string             label
	void functionref() activateFunc
}

global struct DialogMessageRuiData
{
	string message = ""
	vector style1Color = <1, 1, 1>
	vector style2Color = <0.5, 0.5, 0.5>
	vector style3Color = <0.5, 0.5, 0.5>

	float style1FontScale = 1.0
	float style2FontScale = 1.0
	float style3FontScale = 1.0
}

global struct DialogData
{
	var                    menu
	string                 header
	string                 message
	DialogMessageRuiData & ruiMessage
	array                  messageColor = [161, 161, 161, 255]
	asset                  image
	asset                  rightImage = $""
	bool                   forceChoice = false
	bool                   noChoice = false
	bool                   noChoiceWithNavigateBack = false
	bool                   showPCBackButton = false
	float                  inputDisableTime = 0
	table<int, bool>       coloredButton
	bool                   darkenBackground = false
	bool                   useFullMessageHeight = false
	float                  timeoutDuration = -1
	int                    magicNumber = 0
	bool                   showSpinner = false

	array<DialogButtonData> buttonData
	array<DialogFooterData> footerData
}

global struct MenuDef
{
	var menu

	void functionref( var )        initFunc
	void functionref()             openFunc
	void functionref()			   preCloseFunc
	void functionref()             closeFunc
	void functionref()             showFunc
	void functionref()             hideFunc
	void functionref()             getTopLevelFunc
	void functionref()             loseTopLevelFunc
	void functionref()             navBackFunc
	                                        
	void functionref()             inputModeChangedFunc
	array<void functionref( var )> thinkFuncs

	array<void functionref( var )> openFuncs                                                                                           
	array<void functionref( var )> closeFuncs                                                                                           

	array<InputDef>                     footerData
	table<int, void functionref( var )> registeredInput

	bool hasTabs = false

	bool        isDialog = false
	bool        isPopup = false
	bool        allowControllerFooterClick = false
	DialogData& dialogData
	bool        isDynamicHeight = false
	bool        gamepadCursorEnabled = true

	bool   clearBlur = true
	float  enterTime
	string pin_fromId = ""
	table  pin_metaData = {}
}

global struct PanelDef
{
	void functionref( var menu )                                     initFunc
	array<void functionref( var panel )>                             showFuncs
	array<void functionref( var panel )>                             hideFuncs
	array<void functionref( var panel, var oldFocus, var newFocus )> focusChangedFuncs

	void functionref( var panel ) navUpFunc
	void functionref( var panel ) navDownFunc
	void functionref( var panel ) navBackFunc

	string tabTitle = "Default"

	array<InputDef>                     footerData
	table<int, void functionref( var )> registeredInput
	table<int, bool functionref( var )> panelInputs                                                                                           

	bool hasTabs = false

	var defaultFocus

	bool  isActive = false
	bool  isCurrentlyShown = false
	float enterTime
	bool  panelClearBlur = false
	table pin_metaData = {}
}

global struct PieChartEntry
{
	string     displayName
	float      numValue
	array<int> color = [127, 127, 127, 255]
	float      fracValue = 0.0
}

global struct PieChartData
{
	array<PieChartEntry> entries
	array<int>           labelColor = [46, 49, 51, 255]
	bool                 timeBased = false
	float                sum = 0.0
}

global struct ConfirmDialogData
{
	string        headerText = "headerText"
	string        messageText = "messageText"
	array<string> okText = ["#B_BUTTON_CLOSE", "#B_BUTTON_CLOSE"]
	array<string> yesText = ["#A_BUTTON_YES", "#YES"]
	array<string> noText = ["#B_BUTTON_CANCEL", "#B_BUTTON_CANCEL"]
	asset         contextImage = $""

	float timerEndTime = -1.0

	void functionref( int )    resultCallback

	int dialogType
	var __menu
	bool extendedUseYes = false
	float timePenaltyWarning = 0.0

	float dialogConfirmDelay = -1.0
}

global struct HSV
{
	float hue
	float saturation
	float value
}

global struct UIGlobals
{
	table             menus = {}
	array             allMenus = []
	string            loadingLevel = ""
	string            loadedLevel = ""
	array<var>        activePanels = []
	table             signalDummy = {}
	float             dialogInputEnableTime = 0.0

	array    buttonConfigs
	array    stickConfigs

	array<void functionref()>                resolutionChangedCallbacks
	array<void functionref(bool)>            inputModeChangeCallbacks
	array<void functionref(string, string)>  keyBindSetCallbacks
	array<void functionref()>                uiShutdownCallbacks

	table<var, MenuDef> menuData

	table<string, int>                        intVars
	table<string, bool>                       boolVars
	table<string, var>                        varVars
	table<string, array<void functionref()> > varChangeFuncs

	array<void functionref()> onLevelInitCallbacks

	table                panels = {}
	array<var>           allPanels
	table<var, PanelDef> panelData
}

global UIGlobals uiGlobal

void function UICodeCallback_UIInit()
{
	PIN_Init()

	ScriptCompilerTest()

	ShUtilityAll_Init()
	LevelVarInit()

	VPKNotifyFile( "media/intro_captions.txt" )
	VPKNotifyFile( "cfg/startup.cfg" )
	VPKNotifyFile( "cfg/startup_retail.cfg" )

	UtilityUI_Init()

	Settings_Init()                                                         
	GameModes_Init()
	UIVars_Init()

	PassivesShared_Init()
	ShXP_Init()

	MenuGamepadLayout_Init()
	MenuUtility_Init()

	RegisterSignal( "LevelShutdown" )
	RegisterSignal( "CleanupInGameMenus" )
	RegisterSignal( "PlayVideoEnded" )
	RegisterSignal( "ActiveMenuChanged" )
	RegisterSignal( "LevelFinishedLoading" )
	RegisterSignal( "OpenErrorDialog" )
	RegisterSignal( "ReconnectFailed" )
	RegisterSignal( "BoughtItem" )
	RegisterSignal( "TrackIsOverScrollBar" )
	RegisterSignal( "UpdateUIMusicOnMusicPackLoadoutSlotReadyThread" )

	thread UpdateClientMenuOpenStateThread()

	InitGamepadConfigs()
	EmbeddedText_Init()
	InitMenus()

	ScrollPanelInit()
	GridPanelInit()

	ShGladiatorCards_Init()

	Sh_InitToolTips()

	ShLoadouts_VMInit()

	DeathBoxListPanel_VMInit()
	SurvivalGroundList_LevelInit()
	ShLoadscreen_Init()
}


void function UICodeCallback_UIShutdown()
{
	foreach ( func in uiGlobal.uiShutdownCallbacks )
	{
		func()
	}
}


void function UICodeCallback_ControllerModeChanged( bool controllerModeEnabled )
{
	                                                                                    
	foreach ( callbackFunc in uiGlobal.inputModeChangeCallbacks )
	{
		callbackFunc( controllerModeEnabled )
	}

	var activeMenu = GetActiveMenu()
	if ( activeMenu == null )
		return

	if ( uiGlobal.menuData[ activeMenu ].inputModeChangedFunc != null )
		uiGlobal.menuData[ activeMenu ].inputModeChangedFunc()

	UpdateFooterOptions()

	if ( IsDialog( activeMenu ) )                                                     
		UpdateDialogFooterVisibility( activeMenu, controllerModeEnabled )
}


void function UICodeCallback_OnVideoOver()
{
	TriggerVideoEnd()
}


void function UpdateClientMenuOpenStateThread()
{
	for ( ; ; )
	{
		WaitSignal( uiGlobal.signalDummy, "ActiveMenuChanged" )

		if ( !IsLobby() )
		{
			int newState = 0
			if ( IsDialogOnlyActiveMenu() )
				newState = 2
			else if ( GetActiveMenu() != null )
				newState = 1

			if ( CanRunClientScript() )
				RunClientScript( "SetMenuOpenState", newState )
		}
	}
}


void function AddUICallback_OnLevelInit( void functionref() callbackFunc )
{
	Assert( !(uiGlobal.onLevelInitCallbacks.contains( callbackFunc )), "Already added " + string( callbackFunc ) + " with AddUICallback_OnLevelInit" )
	uiGlobal.onLevelInitCallbacks.append( callbackFunc )
}


void function AddUICallback_UIShutdown( void functionref() callbackFunc )
{
	uiGlobal.uiShutdownCallbacks.append( callbackFunc )
}


void function AddUICallback_InputModeChanged( void functionref( bool ) callbackFunc )
{
	uiGlobal.inputModeChangeCallbacks.append( callbackFunc )
}


void function AddUICallback_KeyBindSet( void functionref( string, string ) callbackFunc )
{
	uiGlobal.keyBindSetCallbacks.append( callbackFunc )
}