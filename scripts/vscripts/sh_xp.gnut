global function ShXP_Init
global function GetAccountLevelForXP
global function GetTotalXPToCompleteAccountLevel
global function GetRewardsForAccountLevel
global function GetRewardsFromDataTable
global function GetPlayerAccountLevel
global function GetPlayerAccountDisplayLevel
global function GetAccountDisplayLevel
global function GetAccountDisplayBadge
global function GetHighestAccountDisplaylevel

global function XpEventTypeData_GetAmount
global function XpEventTypeData_GetFrac
global function XpEventTypeData_IsMultiplyer

global function GetPlayerAccountXPProgress
global function GetPlayerAccountXPPreviousProgress

global function CapPlayerXPToLevel

global function GetXPEventValue
global function GetXPEventCount

#if UI
global function GetXPEventNameDisplay
global function GetXPEventValueDisplay
global function XpEventTypeData_DisplayEmpty

global function GetImageForReward
global function GetStringForReward
global function InitXPData
global function UpdateXPEvents

global function CreateNestedAccountDisplayBadge
#endif

global function GetNextAccountLevel
global function GetTotalXPToReachAccountLevel

#if SERVER
                      
                                     
                               
       
                                    
                                         
            
#else
global const asset PLAYER_LEVELUP_FX = $"P_levelup_screen"
#endif

global const int ACCOUNT_LEVEL_RUI_SWITCH_0_BASE = 499
global const string ACCOUNT_BADGE_NAME = "gcard_badge_account_account_level"
global const string ACCOUNT_BADGE_STAT = "stats.account_level"

global struct XPEventData
{
	string _playlistVarName = ""

	float xpAmount = -1
	float xpFrac = 0.0

	bool isMultiplyer = false

	string displayString

	int countDisplayType = eNumericDisplayType.INT
	int awardDisplayType = eNumericDisplayType.INT

	bool displayEmpty = false
}

global enum eXPType
{
	                                                                            
	SURVIVAL_DURATION = 0,
	KILL = 1,
	DAMAGE_DEALT = 2,
	REVIVE_ALLY = 3,
	RESPAWN_ALLY = 4,
	UNUSED_5 = 5,
	KILL_LEADER = 6,
	UNUSED_7 = 7,
	WIN_MATCH = 8,
	KILL_CHAMPION_MEMBER = 9,
	BONUS_FRIEND = 10,
	ROUNDS_WON = 11,
	ACCOUNT_BOOST = 12,
	BONUS_FIRST_KILL = 13,
	BONUS_FIRST_KILL_AS = 14,              
	BONUS_CHAMPION = 15,
	BONUS_FIRST_GAME = 16,
	TOTAL_MATCH = 17,
	TOP_FIVE = 18,
	BONUS_FIRST_TOP_FIVE = 19,
	CHALLENGE_COMPLETED = 20,
                        
	RATINGS_LEADER = 21,
	OBJECTIVE_CAPTURE_DURATION = 22,
	BONUS_OBJECTIVES_COMPLETED = 23,
                              
	_count_,
}

global enum eEventXPStyle
{
	DEFAULT,
	GLOBAL_2X,
	WIN_TOP5_2X,
	FRIENDS_2X,

	_count_
}

global struct RewardData
{
	ItemFlavor& item
	int         quantity
}

struct
{
	array<int> totalXPToCompleteLevel
	int        maxAccountLevel
	int        xpForBonusLevels

	XPEventData[eXPType._count_] xpEventTypeData

	array<int> badgeDisplayLevels
} file


string[eXPType._count_] xpDisplayNames = ["Unhandled", ...]

void function ShXP_Init()
{
	#if CLIENT
		PrecacheParticleSystem( PLAYER_LEVELUP_FX )
	#endif

	#if SERVER
		                                                                       
		                                                                        
		                                                                                        
	#endif

	#if !UI
		InitXPData()                                                                  
	#endif

	                  
	  	                               
	  
	  	                                                                   
	  		                                       
	  
	  	                              
	        
}


#if SERVER || CLIENT || UI
int function GetPlayerAccountXPProgress( EHI playerEHI )
{
	#if CLIENT || UI
		Assert( playerEHI == LocalClientEHI() )
	#endif

	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	return FromEHI( playerEHI ).GetPersistentVarAsInt( "xp" )
}

int function GetPlayerAccountXPPreviousProgress( EHI playerEHI )
{
	#if CLIENT || UI
		Assert( playerEHI == LocalClientEHI() )
	#endif

	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	return FromEHI( playerEHI ).GetPersistentVarAsInt( "previousXP" )
}
#endif


#if SERVER
                                                                                            
 
	                      
	 
		                                  
		                                          
		                                   
		                  
	 
 
#endif

#if SERVER
                                     
 
	                                                    
	                                                       

	                                           
	 
		                                                   
		                                                   
	 
 

                                     
 
	       
		                                    
			      
	      

	                                                        
	                                             
	 
		                                                                                        
		                                                                               
	 
 
#endif

int function GetNextAccountLevel( entity player )
{
	int currentXP    = GetPlayerAccountXPProgress( ToEHI( player ) )
	int currentLevel = GetAccountLevelForXP( currentXP )

	return currentLevel + 1
}


int function GetTotalXPToCompleteAccountLevel( int levelIndex )
{
	Assert( levelIndex >= -1 )
	if ( levelIndex == -1 )
		return 0

	array<int> totalXPToCompleteLevel = file.totalXPToCompleteLevel
	int xpForBonusLevels              = file.xpForBonusLevels

	if ( levelIndex < totalXPToCompleteLevel.len() )
		return totalXPToCompleteLevel[levelIndex]

	int numBonusLevels = 1 + (levelIndex - totalXPToCompleteLevel.len())
	return totalXPToCompleteLevel[totalXPToCompleteLevel.len() - 1] + (numBonusLevels * xpForBonusLevels)
}


int function GetTotalXPToReachAccountLevel( int levelIndex )
{
	Assert( levelIndex > 0, "level " + levelIndex + " too low" )
	array<int> xpToCompleteLevel = file.totalXPToCompleteLevel
	int xpForBonusLevels         = file.xpForBonusLevels

	if ( levelIndex >= xpToCompleteLevel.len() )
	{
		int bonusLevels         = levelIndex - xpToCompleteLevel.len()
		int xpToReachBonusLevel = xpToCompleteLevel[ xpToCompleteLevel.len() - 1 ] + (bonusLevels * xpForBonusLevels)
		return xpToReachBonusLevel
	}

	return xpToCompleteLevel[ maxint( 0, (levelIndex - 1) ) ]
}


int function GetAccountLevelForXP( int xp )
{
	Assert( xp >= 0, "XP " + xp + " too low" )
	int levelIndex               = 0
	array<int> xpToCompleteLevel = file.totalXPToCompleteLevel
	for ( ; levelIndex < xpToCompleteLevel.len(); levelIndex ++ )
	{
		if ( xp < xpToCompleteLevel[levelIndex] )
			return levelIndex
	}

	int bonusXP = xp - xpToCompleteLevel[xpToCompleteLevel.len() - 1]

	int xpForBonusLevels = file.xpForBonusLevels
	                                                                                                                                                                                                                                                                                                               
	return int( levelIndex + ceil( bonusXP / xpForBonusLevels ) )
}


int function GetPlayerAccountLevel( entity player )
{
	return GetAccountLevelForXP( GetPlayerAccountXPProgress( ToEHI( player ) ) )
}


string function GetPlayerAccountDisplayLevel( entity player )
{
	int levelIndex = GetPlayerAccountLevel( player )

	return string( minint( levelIndex + 1, GetHighestAccountDisplaylevel() ) )
}


string function GetAccountDisplayLevel( int levelIndex )
{
	int progressionVersion = GetCurrentPlaylistVarInt( "account_progression_version", 3 )
	int displayLevel       = levelIndex + 1

	if ( progressionVersion < 3 && (levelIndex > 498) )
		return ""

	if ( levelIndex > 0 && displayLevel % 100 == 0 )
		return ""

	return string( levelIndex + 1 )
}


int function GetHighestAccountDisplaylevel()
{
	array<int> xpToCompleteLevel = file.totalXPToCompleteLevel

	return xpToCompleteLevel[ xpToCompleteLevel.len() - 1 ]
}


asset function GetAccountDisplayBadge( int levelIndex )
{
	return $"white"

	                                                             
	                                                                                    
	                                                                                                            
	  
	                      
	                                                           
	   
	  	                                             
	  	                         
	  
	  	                                 
	  		     
	   
	                                                             
	                                                                                                                                                                                     
	                   
}

#if UI
var function CreateNestedAccountDisplayBadge( var parentRui, string arg, int levelIndex )
{
	                                                                                               
	RuiDestroyNestedIfAlive( parentRui, arg )
	var nestedAccountRui
	if ( levelIndex <= ACCOUNT_LEVEL_RUI_SWITCH_0_BASE || GetCurrentPlaylistVarInt( "account_progression_version", 3 ) == 2 )
		nestedAccountRui = RuiCreateNested( parentRui, arg, $"ui/gcard_badge_account_t1.rpak" )
	else
		nestedAccountRui = RuiCreateNested( parentRui, arg, $"ui/gcard_badge_account_p1.rpak" )

	RuiSetInt( nestedAccountRui, "tier", levelIndex )

	return nestedAccountRui
}
#endif     

#if SERVER && DEV
                                                                   
 

 

                                                                          
 
	                                 

	                                                    

	                                   
 
#endif      

array<RewardData> function GetRewardsForAccountLevel( int levelIndex )
{
	                                                                          
	var accountXPDataTable
	if ( GetCurrentPlaylistVarInt( "account_progression_version", 3 ) == 3 )
		accountXPDataTable = GetDataTable( $"datatable/progression_account_v3.rpak" )
	else
		accountXPDataTable = GetDataTable( $"datatable/progression_account_v2.rpak" )

	return GetRewardsFromDataTable( accountXPDataTable, levelIndex )
}


array<RewardData> function GetRewardsFromDataTable( var dataTable, int levelIndex )
{
	printf( "AccountProgressionDebug: RewardDataTable: Rewards for level index %i requested", levelIndex )
	int rowCount       = GetDataTableRowCount( dataTable )
	int col_levelIndex = GetDataTableColumnByName( dataTable, "levelIndex" )

	int startRow          = -1
	int endRow            = rowCount - 1
	int highestLevelIndex = GetDataTableInt( dataTable, endRow, col_levelIndex )
	for ( int i; i < rowCount; i++ )
	{
		int lvlIdx = GetDataTableInt( dataTable, i, col_levelIndex )

		if ( lvlIdx == levelIndex && startRow == -1 )
		{
			startRow = i
			printf( "AccountProgressionDebug: RewardDataTable: Start row set to %i", startRow )
		}

		if ( lvlIdx == levelIndex + 1 )
		{
			endRow = i
			printf( "AccountProgressionDebug: RewardDataTable: End row set to %i", endRow )
			break
		}
	}

	if ( startRow == -1 )
	{
		for ( int i = 0; i < rowCount; i++ )
		{
			int lvlIdx = GetDataTableInt( dataTable, i, col_levelIndex )
			if ( lvlIdx == highestLevelIndex )
			{
				startRow = i
			}
		}

		Assert( startRow != -1, "Account Reward Progression unable to locate valid start index" )
		printf( "AccountProgressionDebug: RewardDataTable: Start Row for level index %i set to %i (levelIndex not found in Data Table)", levelIndex, startRow )
	}

	printf( "AccountProgressionDebug: RewardDataTable: Start Row set to %i, End Row set to %i", startRow, endRow )

	int col_reward    = GetDataTableColumnByName( dataTable, "reward" )
	int col_rewardQty = GetDataTableColumnByName( dataTable, "rewardQty" )

	Assert( endRow >= startRow, format( "Account Rewards: Collecting account rewards from negative range (start: %i, end: %i)", startRow, endRow ) )
	array<RewardData> rewards = []

	if ( startRow == endRow )
	{
		endRow++                                                                         
	}

	for ( int row = startRow; row < endRow; row++ )
	{
		asset rewardAsset = GetDataTableAsset( dataTable, row, col_reward )

		RewardData reward
		if ( IsValidItemFlavorSettingsAsset( rewardAsset ) )
		{
			reward.item = GetItemFlavorByAsset( rewardAsset )
			reward.quantity = GetDataTableInt( dataTable, row, col_rewardQty )
			rewards.append( reward )

			                                                                                                                                                                      
		}
		else if ( rewardAsset != $"" )
		{
			Warning( "Not awarding item because the settings asset specified is not valid! " + string(rewardAsset) )
		}
		                                
		   
		  	                                                                                           
		   
	}

	printf( "AccountProgressionDebug: RewardDataTable: Rewards for level %i:", levelIndex )
	for ( int i; i < rewards.len(); i++ )
	{
		printf( "AccountProgressionDebug: RewardDataTable: Reward #%i: %s", (i + 1), ItemFlavor_GetHumanReadableRef( rewards[i].item ) )
	}
	if ( rewards.len() == 0 )
	{
		printf( "AccountProgressionDebug: RewardDataTable: None (empty reward array)" )
	}

	return rewards
}


#if SERVER
                                                                   
 
	                                                       
	                                                     

	                                                                                
	                                                                            
	                                                                                                         

	                                                                                        
	                                                                                                             
 

                                              
 
	                                                
	                                                                                          

	                                                                
		                            

	                
	                                                                                                  

	                                            
		                                          

	                                                                                                        
	                            
 


#endif             


void function InitXPData()
{
	                                     
	                                                                          
	file.totalXPToCompleteLevel.clear()
	var accountXPDataTable
	if ( GetCurrentPlaylistVarInt( "account_progression_version", 3 ) == 3 )
		accountXPDataTable = GetDataTable( $"datatable/progression_account_v3.rpak" )
	else
		accountXPDataTable = GetDataTable( $"datatable/progression_account_v2.rpak" )
	int numRows            = GetDataTableRowCount( accountXPDataTable )
	int col_levelIndex     = GetDataTableColumnByName( accountXPDataTable, "levelIndex" )
	int col_xpPerLevel     = GetDataTableColumnByName( accountXPDataTable, "xpPerLevel" )
	int prevLvlIdx         = -1
	int cumulativeXP       = 0
	for ( int rowIndex = 0; rowIndex < numRows; rowIndex++ )
	{
		int lvlIdx = GetDataTableInt( accountXPDataTable, rowIndex, col_levelIndex )

		if ( lvlIdx > prevLvlIdx )
		{
			int xpToCompleteLevel = GetDataTableInt( accountXPDataTable, rowIndex, col_xpPerLevel )
			SetXPForLevel( lvlIdx + 1, cumulativeXP )
			cumulativeXP += xpToCompleteLevel
			file.totalXPToCompleteLevel.append( cumulativeXP )
			file.xpForBonusLevels = xpToCompleteLevel

			prevLvlIdx = lvlIdx
		}
	}

	                 
	printt( "InitXPEvents" )
	InitXpEventTypeData( eXPType.SURVIVAL_DURATION, "xp_survival_duration", "#EOG_XP_SURVIVED" )
	XpEventTypeData_SetCountDisplay( eXPType.SURVIVAL_DURATION, eNumericDisplayType.TIME_SECONDS_SHORT )
	XpEventTypeData_SetDisplayEmpty( eXPType.SURVIVAL_DURATION, true )

	InitXpEventTypeData( eXPType.KILL, "xp_kill", "#EOG_XP_KILLS" )
	XpEventTypeData_SetDisplayEmpty( eXPType.KILL, true )

	InitXpEventTypeData( eXPType.DAMAGE_DEALT, "xp_damage_dealt", "#EOG_XP_DAMAGE_DONE" )
	XpEventTypeData_SetCountDisplay( eXPType.DAMAGE_DEALT, eNumericDisplayType.SHORT_INT )
	XpEventTypeData_SetDisplayEmpty( eXPType.DAMAGE_DEALT, true )

	InitXpEventTypeData( eXPType.RESPAWN_ALLY, "xp_respawn_ally", "#EOG_XP_RESPAWN_ALLY" )
	XpEventTypeData_SetDisplayEmpty( eXPType.RESPAWN_ALLY, true )

	InitXpEventTypeData( eXPType.REVIVE_ALLY, "xp_revive_ally", "#EOG_XP_REVIVE_ALLY" )
	XpEventTypeData_SetDisplayEmpty( eXPType.REVIVE_ALLY, true )

	InitXpEventTypeData( eXPType.BONUS_CHAMPION, "xp_champion", "#EOG_XP_CHAMPION" )

	InitXpEventTypeData( eXPType.KILL_CHAMPION_MEMBER, "xp_kill_champion", "#EOG_XP_KILLED_CHAMPION" )
	XpEventTypeData_SetDisplayEmpty( eXPType.KILL_CHAMPION_MEMBER, true )

	InitXpEventTypeData( eXPType.KILL_LEADER, "xp_kill_leader", "#EOG_XP_KILL_LEADER" )
	XpEventTypeData_SetDisplayEmpty( eXPType.KILL_LEADER, true )

	InitXpEventTypeData( eXPType.BONUS_FIRST_KILL, "xp_first_kill", "#EOG_XP_FIRST_KILL" )

	InitXpEventTypeData( eXPType.BONUS_FIRST_KILL_AS, "xp_first_kill_as", "#EOG_XP_FIRST_KILL_AS" )              

	InitXpEventTypeData( eXPType.BONUS_FIRST_GAME, "xp_first_game", "#EOG_XP_FIRST_GAME" )

	InitXpEventTypeData( eXPType.BONUS_FRIEND, "xp_friend", "#EOG_XP_PREMADE_SQUAD" )

	InitXpEventTypeData( eXPType.CHALLENGE_COMPLETED, "xp_challenge_completed", "#EOG_XP_CHALLENGES_COMPLETED" )

	InitXpEventTypeData( eXPType.WIN_MATCH, "xp_win_match", "#EOG_XP_WON" )

	InitXpEventTypeData( eXPType.TOP_FIVE, "xp_top_five", "#EOG_XP_TOP5" )

	InitXpEventTypeData( eXPType.BONUS_FIRST_TOP_FIVE, "xp_first_top_five", "#EOG_XP_FIRST_TOP5" )

	InitXpEventTypeData( eXPType.TOTAL_MATCH, "xp_total_match", "#EOG_XP_TOTAL_MATCH" )

	InitXpEventTypeData( eXPType.ROUNDS_WON, "xp_round_won", "#EOG_XP_ROUNDS_WON" )

                         
		InitXpEventTypeData( eXPType.RATINGS_LEADER, "xp_ratings_leader", "#EOG_XP_RATINGS_LEADER" )
		XpEventTypeData_SetDisplayEmpty( eXPType.RATINGS_LEADER, true )

		InitXpEventTypeData( eXPType.OBJECTIVE_CAPTURE_DURATION, "xp_objective_capture_duration", "#EOG_XP_OBJECTIVE_CAPTURE_TIME" )
		XpEventTypeData_SetDisplayEmpty( eXPType.OBJECTIVE_CAPTURE_DURATION, true )
		XpEventTypeData_SetCountDisplay( eXPType.OBJECTIVE_CAPTURE_DURATION, eNumericDisplayType.TIME_SECONDS_SHORT )

		InitXpEventTypeData( eXPType.BONUS_OBJECTIVES_COMPLETED, "xp_bonus_objectives_completed", "#EOG_XP_BONUS_OBJECTIVES_COMPLETED" )
		XpEventTypeData_SetDisplayEmpty( eXPType.BONUS_OBJECTIVES_COMPLETED, true )
                               
}

#if UI
void function UpdateXPEvents()
{
	Assert( IsPersistenceAvailable(), "Cannot call UpdateXPEvents when persistence is not available" )
	XpEventTypeData_SetDisplayEmpty( eXPType.BONUS_FRIEND, !IsLastPlaylistSolo( GetLocalClientPlayer() ) )                                                        
}
#endif


void function InitXpEventTypeData( int xpType, string playlistVar, string displayString, float defaultFrac = 1.0 )
{
	file.xpEventTypeData[xpType]._playlistVarName = playlistVar
	file.xpEventTypeData[xpType].displayString = displayString
	file.xpEventTypeData[xpType].xpAmount = GetCurrentPlaylistVarFloat( playlistVar + "_amount", 0 )
	file.xpEventTypeData[xpType].xpFrac = GetCurrentPlaylistVarFloat( playlistVar + "_frac", defaultFrac )

	Assert( file.xpEventTypeData[xpType].xpAmount > -1 )
}


void function XpEventTypeData_SetDisplayEmpty( int xpType, bool state )
{
	file.xpEventTypeData[xpType].displayEmpty = state
}


void function XpEventTypeData_SetCountDisplay( int xpType, int displayType )
{
	file.xpEventTypeData[xpType].countDisplayType = displayType
}


float function XpEventTypeData_GetAmount( int xpType )
{
	return file.xpEventTypeData[xpType].xpAmount
}


float function XpEventTypeData_GetFrac( int xpType )
{
	return file.xpEventTypeData[xpType].xpFrac
}


bool function XpEventTypeData_IsMultiplyer( int xpType )
{
	return xpType == eXPType.BONUS_FRIEND
}


int function GetXPEventCount( entity player, int xpType )
{
	return player.GetPersistentVarAsInt( "xp_count[" + xpType + "]" )
}


int function GetXPEventValue( entity player, int xpType )
{
	return player.GetPersistentVarAsInt( "xp_match[" + xpType + "]" )
}

#if UI

string function GetXPEventNameDisplay( entity player, int xpType )
{
	int count = GetXPEventCount( player, xpType )

	XPEventData eventData = file.xpEventTypeData[xpType]

	float boost = expect float( player.GetPersistentVar( "lastGameBattlePassBoost" ) )
	                         
	if ( boost > 1.0 && (xpType == eXPType.WIN_MATCH || xpType == eXPType.TOP_FIVE) )
		return Localize( eventData.displayString + "_WITH_BOOST", int( RoundToNearestMultiplier( (boost - 1.0) * 100, 1.0 ) ) )

	return Localize( eventData.displayString, GetFormattedIntByType( count, eventData.countDisplayType ) )
}


bool function XpEventTypeData_DisplayEmpty( int xpType )
{
	return file.xpEventTypeData[xpType].displayEmpty
}

string function GetXPEventValueDisplay( entity player, int xpType )
{
	int eventValue = GetXPEventValue( player, xpType )
	if ( eventValue == 0 )
		return Localize( "#EOG_XP_NONE", GetXPEventValue( player, xpType ) )
	else
		return Localize( "#EOG_XP_PLUSNUMBER", GetXPEventValue( player, xpType ) )

	unreachable
}

asset function GetImageForReward( RewardData reward )
{
	asset icon = $""
	if ( IsItemFlavorStructValid( reward.item ) )
	{
		if ( ItemFlavor_GetType( reward.item ) == eItemType.account_currency )
			icon = GRXCurrency_GetRewardIcon( reward.item )
		else
			icon = ItemFlavor_GetIcon( reward.item )
	}

	return icon
}

string function GetStringForReward( RewardData reward )
{
	if ( reward.quantity > 1 )
		return FormatAndLocalizeNumber( "1", float( reward.quantity ), ItemFlavor_IsCurrency( reward.item ) || IsTenThousandOrMore( reward.quantity ) )

	return ItemFlavor_GetShortName( reward.item )
}
#endif         

void function CapPlayerXPToLevel( entity player, int levelCap )
{
	printf( "AccountProgressionDebug: Capping player's XP to %i", levelCap )

	if ( !IsValid( player ) )
		return

	int playerXP      = GetPlayerAccountXPProgress( ToEHI( player ) )
	int previousXP    = player.GetPersistentVarAsInt( "previousXP" )
	int currentXP     = playerXP - previousXP
	int xpForLevelCap = GetTotalXPToCompleteAccountLevel( levelCap - 1 )

	printf( "AccountProgressionDebug: Level Cap Check: playerXP = %i, xpForLevelCap = %i", playerXP, xpForLevelCap )
	#if SERVER
		                               
		 
			                                                                                                 
			                                              
		 

		                                 
		 
			                                             
			                                                      
		 
	#endif
}
