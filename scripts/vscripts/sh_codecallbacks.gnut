global function CodeCallbacksShared_Init

global function CodeCallback_AnimationDone
global function CodeCallback_AnimationInterrupted
global function CodeCallback_CanUseEntity
global function ClearCallback_CanUseEntityCallback
global function SetCallback_CanUseEntityCallback
global function CodeCallback_CanUseZipline
global function CodeCallback_ShouldUseBlockReload
global function SetCallback_ShouldUseBlockReloadCallback
global function CodeCallback_PlayerClassChanged
global function CodeCallback_OnUseEntity
                                         
global function CodeCallback_OnUseEnd
global function CodeCallback_OnUseButtonPressed
global function CodeCallback_OnUseButtonReleased
global function AddCallback_OnUseButtonPressed
global function RemoveCallback_OnUseButtonPressed
global function AddCallback_OnUseButtonReleased
global function RemoveCallback_OnUseButtonReleased

global function CodeCallback_ForceScriptError

global function AddCallback_PlayerClassChanged
global function AddCallback_PlayerClassActuallyChanged
global function AddCallback_PlayerCanUseZipline

global function CodeCallback_CanPlayerReload
global function CodeCallback_CanHitPingTrace

#if CLIENT
global function CodeCallback_OnTurretCancelPressed
global function CodeCallback_OnWeaponDisable
global function ClientCodeCallback_PartyUpdated
global function ClientCodeCallback_PartyMemberAdded
global function ClientCodeCallback_PartyMemberRemoved
global function ClientCodeCallback_UserInfoUpdated
global function AddCallback_OnPartyUpdated
global function RemoveCallback_OnPartyUpdated
#endif

#if SERVER
                                           
                                          
                                                  
                                                 
                                                
                                               
#endif

global function CodeCallback_OnPlayerWeaponActivated
global function AddCallback_OnPlayerWeaponSwitched

global function AddCallback_OnVehicleLaunch
global function CodeCallback_OnVehicleLaunch
global function AddCallback_OnVehicleCollide
global function CodeCallback_OnVehicleCollide

global function AddCallback_OnPlayerZoomIn
global function AddCallback_OnPlayerZoomOut

global function AddCallback_CheckPlayerCanUse
global function RemoveCallback_CheckPlayerCanUse

global function CodeCallback_OnPlayerStartZoomIn
global function CodeCallback_OnPlayerStartZoomOut

global function CodeCallback_CanStartCustomWeaponActivity
global function AddCallback_CanStartCustomWeaponActivity

global function CodeCallback_CheckPassThroughAddsMods
global function AddCallback_OnPassThrough

global function CodeCallback_GetLatestRankedPeriodName
global function CodeCallback_GetLatestArenaPeriodName

global function CodeCallback_GivePlayerDoubleJump
global function AddCallback_GivePlayerDoubleJump
global function RemoveCallback_GivePlayerDoubleJump


struct
{
	#if SERVER
		                                                         
		                                                                
		                                                      
	#endif
	#if CLIENT
		var disembarkRUI

		array< void functionref() > partyUpdatedCallbacks
	#endif

	array<bool functionref( entity, entity )> canPlayerUseCheckCallbacks

	array<void functionref( entity, entity, entity )> onPlayerSwitchedWeaponCallbacks
	table<entity , entity>							  playerPreviousActiveWeapon
} file

void function CodeCallbacksShared_Init()
{
	RegisterSignal( "OnAnimationDone" )
	RegisterSignal( "OnAnimationInterrupted" )
	RegisterSignal( "SettingsChanged" )
	RegisterSignal( "OnPrimaryAttack" )

	                                                                     
	RegisterSignal( "OnPlayerUse" )
	RegisterSignal( "OnPlayerUseLong" )
	RegisterSignal( "OnPlayerUseAlt" )

	                                                                          
	RegisterSignal( "PlayerPressedUse" )

	#if CLIENT
		RegisterConCommandTriggeredCallback( "-useAndReload", CancelDisembark )
		RegisterConCommandTriggeredCallback( "-use", CancelDisembark )
	#endif

	#if SERVER
		                                                  
		                                                        
	#endif
}

void function CodeCallback_AnimationDone( entity ent )
{
	#if SERVER
	                                           
	 
		                                      
		                                      
		                    
		                    
	 
	#endif
	Signal( ent, "OnAnimationDone" )
}


void function CodeCallback_AnimationInterrupted( entity ent )
{
	Signal( ent, "OnAnimationInterrupted" )
}

                                                                                                          

void function ClearCallback_CanUseEntityCallback( entity ent )
{
	ent.e.canUseEntityCallback = null
}


void function SetCallback_CanUseEntityCallback( entity ent, bool functionref( entity, entity, int ) callbackFunc )
{
	Assert( ent.e.canUseEntityCallback == null )
	ent.e.canUseEntityCallback = callbackFunc
}


bool function CodeCallback_CanUseEntity( entity player, entity ent, int useFlags )
{
	if ( !IsAlive( player ) )
		return false

	if ( player.IsPhaseShifted() )
		return false

	if ( GetGameState() == eGameState.WinnerDetermined || GetGameState() > eGameState.Epilogue )
		return false

	if ( ent == player )
		return false

	if ( ent.IsNPC() )
	{
		                             
		if ( Leech_IsLeechable( ent ) )
			return false
	}

	if ( player.IsTitan() )
		return false

	if ( ent.IsNPC() && !IsAlive( ent ) )
		return false

	if ( ent.e.canUseEntityCallback != null )
		return ent.e.canUseEntityCallback( player, ent, useFlags )

	foreach ( bool functionref( entity, entity ) callbackFunc in file.canPlayerUseCheckCallbacks )
	{
		if ( !callbackFunc( player, ent ) )
			return false
	}

	return true
}

void function ClearCallback_ShouldUseBlockReloadCallback( entity ent, bool functionref( entity, entity ) callbackFunc )
{
	ent.e.shouldUseBlockReloadCallback = null
}

void function SetCallback_ShouldUseBlockReloadCallback( entity ent, bool functionref( entity, entity ) callbackFunc )
{
	Assert( ent.e.shouldUseBlockReloadCallback == null )
	ent.e.shouldUseBlockReloadCallback = callbackFunc
}

bool function CodeCallback_ShouldUseBlockReload( entity player, entity ent )
{
	if ( ent.e.shouldUseBlockReloadCallback != null )
		return ent.e.shouldUseBlockReloadCallback( player, ent )

	return true;
}

const float ZIPLINE_MAX_USE_ANGLE = 35.0
bool function CodeCallback_CanUseZipline( entity player, entity zipline, vector ziplineClosestPoint )
{
	if ( !player.IsHuman() )
		return false

	if ( player.IsOnGround() )
	{
		if ( !PlayerCanSeePos( player, ziplineClosestPoint, false, ZIPLINE_MAX_USE_ANGLE ) )
			return false

		entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
		if ( IsValid( weapon ) && weapon.IsWeaponInAds() )
			return false
	}

	if ( GetGameState() == eGameState.WinnerDetermined || GetGameState() > eGameState.Epilogue )
		return false

	#if SERVER
		                                                   
		 
			                                                    
				            
		 
	#else
		foreach ( func in clGlobal.canUseZiplineCallbacks )
		{
			if ( !func( player, zipline, ziplineClosestPoint ) )
				return false
		}
	#endif

	return true
}


void function AddCallback_PlayerCanUseZipline( bool functionref( entity, entity, vector ) callbackFunc )
{
	#if SERVER
		                                                      
	#else
		clGlobal.canUseZiplineCallbacks.append( callbackFunc )
	#endif
}


bool function CodeCallback_CanPlayerReload( entity player )
{
	if ( player.p.isInExtendedUse )
		return false

	return true
}


bool function CodeCallback_CanHitPingTrace( entity ent )
{
	return !ent.e.ignorePingTrace
}


void function AddCallback_PlayerClassChanged( void functionref( entity ) callbackFunc )
{
	#if SERVER
		                                                             
	#else
		clGlobal.onPlayerClassChangedCallbacks.append( callbackFunc )
	#endif
}

void function AddCallback_PlayerClassActuallyChanged( void functionref( entity ) callbackFunc )
{
	#if SERVER
		                                                                     
	#else
		clGlobal.onPlayerClassActuallyChangedCallbacks.append( callbackFunc )
	#endif
}

void function CodeCallback_PlayerClassChanged( entity player, bool actualSettingsFileChanged )
{
	if ( !IsValid( player ) )
		return

	if ( IsLobby() )
		return

	player.Signal( "SettingsChanged" )
	string newClass = player.GetPlayerClass()

#if SERVER
	                                                                  
	 
		                      
	 

	                                
	 
		                                                                          
		 
			                      
		 
	 

	                                                                                                                    
	 
		                                                                                          
		                                                                                  
		                                     
		                                  
	 
#else
	foreach ( callbackFunc in clGlobal.onPlayerClassChangedCallbacks )
	{
		callbackFunc( player )
	}

	if ( actualSettingsFileChanged )
	{
		foreach ( callbackFunc in clGlobal.onPlayerClassActuallyChangedCallbacks )
		{
			callbackFunc( player )
		}
	}

#endif

	#if CLIENT
		player.classChanged = true
		player.p.classActuallyChanged = actualSettingsFileChanged

		                                              
		                                                  

		UpdatePlayerStatusCounts()

		                           
			                                
	#else
		player.kv.renderColor = "255 255 255 255"

		InitDamageStates( player )
	#endif

	                                        
	  	                

	                          
	  	                                      

	#if SERVER
		                                       
		                                
			                                                       

		                                      
	#endif
}


#if SERVER
                                                          
 
	                                            
	                              
		      

	                              
		      

	                              
		      

	                                                                                        
	                                                                         
		                 
 
#endif


#if SERVER
                                                                               
 
	                                               
 
#endif


#if SERVER
                                                                                      
 
	                                                      
 
#endif


#if SERVER
                                                                 
 
	                                                                                
		            
 
#endif

void function AddCallback_OnPlayerWeaponSwitched( void functionref(entity, entity, entity) callback )
{
	file.onPlayerSwitchedWeaponCallbacks.append( callback )
}

void function CodeCallback_OnPlayerWeaponActivated( entity player, entity activatedWeapon )
{
	if( !( player in file.playerPreviousActiveWeapon ) )
		file.playerPreviousActiveWeapon[player] <- null

	if( file.playerPreviousActiveWeapon[player] != activatedWeapon )
	{
		foreach ( void functionref(entity, entity, entity) cb in file.onPlayerSwitchedWeaponCallbacks )
			cb(player, activatedWeapon, file.playerPreviousActiveWeapon[player])
		file.playerPreviousActiveWeapon[player] = activatedWeapon
	}
}


bool function CodeCallback_OnUseEntity( entity player, entity ent, int useInputFlags )
{
	                                                                                     
	foreach ( callbackFunc in ent.e.onUseEntityCallbacks )
	{
		callbackFunc( ent, player, useInputFlags )
	}

	if ( useInputFlags & USE_INPUT_DEFAULT )
		Signal( ent, "OnPlayerUse", { player = player } )
	if ( useInputFlags & USE_INPUT_LONG )
		Signal( ent, "OnPlayerUseLong", { player = player } )
	if ( useInputFlags & USE_INPUT_ALT )
		Signal( ent, "OnPlayerUseAlt", { player = player } )

	#if CLIENT
		if ( IsFirstTimePredicted() )
		{
			if ( useInputFlags & USE_INPUT_DEFAULT && ent.e.predictedUseSuccess )
				ent.e.predictedUseCount += 1
		}
	#endif          

	                                                             
	return true
}


void function AddCallback_CheckPlayerCanUse( bool functionref( entity, entity ) callback )
{
	Assert( !file.canPlayerUseCheckCallbacks.contains( callback ), "Callback registered twice" )
	file.canPlayerUseCheckCallbacks.append( callback )
}


void function RemoveCallback_CheckPlayerCanUse( bool functionref( entity, entity ) callback )
{
	Assert( file.canPlayerUseCheckCallbacks.contains( callback ), "Callback was not registered" )
	file.canPlayerUseCheckCallbacks.fastremovebyvalue( callback )
}


#if CLIENT
void function CancelDisembark( entity player )
{
	if ( file.disembarkRUI != null )
	{
		RuiDestroy( file.disembarkRUI )
		file.disembarkRUI = null
	}
}
#endif

  
                                                      
 
 
  

void function CodeCallback_OnUseEnd( entity player )
{
	if ( player.Lunge_IsActive() )
		player.Lunge_ClearTarget()
}


void function AddCallback_OnUseButtonPressed( entity player, void functionref( entity ) callbackFunc )
{
	Assert( player.IsPlayer() )
	Assert( !player.e.onPlayerUseButtonPressed.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	player.e.onPlayerUseButtonPressed.append( callbackFunc )
}


void function RemoveCallback_OnUseButtonPressed( entity player, void functionref( entity ) callbackFunc )
{
	int ornull funcPos = player.e.onPlayerUseButtonPressed.find( callbackFunc )
	Assert( funcPos != null, "Cannot remove " + string( callbackFunc ) + " that was not added to entity" )
	player.e.onPlayerUseButtonPressed.remove( expect int( funcPos ) )
}


void function CodeCallback_OnUseButtonPressed( entity player )
{
	player.Signal( "PlayerPressedUse" )
	                                                                                             
	foreach ( callbackFunc in player.e.onPlayerUseButtonPressed )
	{
		callbackFunc( player )
	}
}


void function AddCallback_OnUseButtonReleased( entity player, void functionref( entity ) callbackFunc )
{
	Assert( player.IsPlayer() )
	Assert( !player.e.onPlayerUseButtonReleased.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	player.e.onPlayerUseButtonReleased.append( callbackFunc )
}


void function RemoveCallback_OnUseButtonReleased( entity player, void functionref( entity ) callbackFunc )
{
	int ornull funcPos = player.e.onPlayerUseButtonReleased.find( callbackFunc )
	Assert( funcPos != null, "Cannot remove " + string( callbackFunc ) + " that was not added to entity" )
	player.e.onPlayerUseButtonReleased.remove( expect int( funcPos ) )
}


void function CodeCallback_OnUseButtonReleased( entity player )
{
	                                                                                              
	foreach ( callbackFunc in player.e.onPlayerUseButtonReleased )
	{
		callbackFunc( player )
	}
}

#if CLIENT
void function CodeCallback_OnTurretCancelPressed( entity player )
{
	if ( InPrediction() && !IsFirstTimePredicted() )
		return

	ScreenFade( player, 0, 0, 0, 255, 0.1, 1.0, FFADE_OUT )
}
#endif              

                                                   
void function CodeCallback_ForceScriptError( entity ent, string errorMsg )
{
	Assert( 0, errorMsg )
}


void function AddCallback_OnVehicleLaunch( entity ent, void functionref( entity ) callbackFunc )
{
	Assert( !ent.e.onVehicleLaunchCallbacks.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	ent.e.onVehicleLaunchCallbacks.append( callbackFunc )
}


void function CodeCallback_OnVehicleLaunch( entity vehicle )
{
	                                                                                          
	foreach ( callbackFunc in vehicle.e.onVehicleLaunchCallbacks )
	{
		callbackFunc( vehicle )
	}
}


void function AddCallback_OnVehicleCollide( entity ent, void functionref( entity ) callbackFunc )
{
	Assert( !ent.e.onVehicleCollideCallbacks.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	ent.e.onVehicleCollideCallbacks.append( callbackFunc )
}


void function CodeCallback_OnVehicleCollide( entity vehicle )
{
	                                                                                           
	foreach ( callbackFunc in vehicle.e.onVehicleCollideCallbacks )
	{
		callbackFunc( vehicle )
	}
}

#if SERVER
                                                                         
                                                                                                                 
 
	                                             
 
#endif

array <void functionref(entity)> s_callbacksOnPlayerZoomIn
void function AddCallback_OnPlayerZoomIn( void functionref( entity player ) func )
{
	Assert( !s_callbacksOnPlayerZoomIn.contains( func ), "Callback registered twice" )
	s_callbacksOnPlayerZoomIn.append( func )
}

array <void functionref(entity)> s_callbacksOnPlayerZoomOut
void function AddCallback_OnPlayerZoomOut( void functionref( entity player ) func )
{
	Assert( !s_callbacksOnPlayerZoomOut.contains( func ), "Callback registered twice" )
	s_callbacksOnPlayerZoomOut.append( func )
}

table < int, array <bool functionref(entity, int)> > s_callbacksCanStartCustomWeaponActivity
void function AddCallback_CanStartCustomWeaponActivity( int activity, bool functionref( entity player, int activity ) func )
{
	if ( !(activity in s_callbacksCanStartCustomWeaponActivity) )
	{
		s_callbacksCanStartCustomWeaponActivity[ activity ] <- []
	}

	Assert( !s_callbacksCanStartCustomWeaponActivity[ activity ].contains( func ) )
	s_callbacksCanStartCustomWeaponActivity[activity].append( func )
}

array <void functionref( entity )> s_callbacksOnPassThrough
void function AddCallback_OnPassThrough( void functionref( entity hitEnt ) func )
{
	Assert( !s_callbacksOnPassThrough.contains( func ) )
	s_callbacksOnPassThrough.append( func )
}

#if SERVER
                                                
 
	                                                     
 


                                                   
 
	                                          
		                                        
 

                                                               
 
	                                                                                                      
	                              

	                                       
	                                                                                   

	                                                                                             
		                                        
 
#endif

void function CodeCallback_OnPlayerStartZoomIn( entity player )
{
	foreach ( func in s_callbacksOnPlayerZoomIn )
	{
		func( player )
	}
}


void function CodeCallback_OnPlayerStartZoomOut( entity player )
{
	foreach ( func in s_callbacksOnPlayerZoomOut )
	{
		func( player )
	}
}


bool function CodeCallback_CanStartCustomWeaponActivity( entity player, int activity )
{
	if ( activity in s_callbacksCanStartCustomWeaponActivity )
	{
		foreach ( func in s_callbacksCanStartCustomWeaponActivity[ activity ] )
		{
			if ( !func( player, activity ) )
				return false
		}
	}

	return true
}


string function CodeCallback_CheckPassThroughAddsMods( entity player, entity hitEnt, entity passingEntOrWeapon, string currWeaponName, array<string> currMods )
{
	foreach ( func in s_callbacksOnPassThrough )
	{
		func( hitEnt )
	}

	if ( !IsValid( player ) )
		return ""

	if ( StatusEffect_GetSeverity( hitEnt, eStatusEffect.pass_through_amps_weapon ) > 0 )
	{
		if ( passingEntOrWeapon.IsProjectile() )
		{
			if ( currMods.contains( "amped_damage" ) )
			{
				#if SERVER
					                               
						                                                                                                                                 
				#endif
			}
		}
		else if ( passingEntOrWeapon.IsWeaponX() )
		{
			if ( currMods.contains( "amped_damage" ) || currMods.contains( "amped_damage_alt"  ) )
			{
				#if SERVER
					                               
						                                                                                                                       
				#endif
			}

			if ( passingEntOrWeapon.GetWeaponClassName() == "mp_weapon_energy_ar" )
			{
				return "amped_damage_alt"
			}
		}

		return "amped_damage"
	}

	                    
	  	                                                                                 
	  		                                
	        

	return ""
}


string function CodeCallback_GetLatestRankedPeriodName()
{
	return Ranked_GetStryderLadderNameForLatestRankedPeriod()
}

string function CodeCallback_GetLatestArenaPeriodName()
{
	                                                                            
	return ArenasRanked_GetStryderLadderNameForLatestRankedPeriod()
}

#if CLIENT
void function CodeCallback_OnWeaponDisable( entity weapon )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( !IsAlive( weaponOwner ) )
		return

	if ( !weaponOwner.IsPlayer() )
		return

	if ( !IsPilot( weaponOwner ) )
		return

	if ( weaponOwner != GetLocalClientPlayer() || weaponOwner != GetLocalViewPlayer() )
		return

	HidePlayerHint( "#NO_RESERVE_AMMO" )
}

void function ClientCodeCallback_PartyUpdated()
{
	printt( "ClientCodeCallback_PartyUpdated" )
	foreach ( callbackFunc in file.partyUpdatedCallbacks )
	{
		callbackFunc()
	}
}

void function ClientCodeCallback_PartyMemberAdded()
{
	printt( "ClientCodeCallback_PartyMemberAdded" )
}

void function ClientCodeCallback_PartyMemberRemoved()
{
	printt( "ClientCodeCallback_PartyMemberRemoved" )
}

void function ClientCodeCallback_UserInfoUpdated( string hardware, string uid )
{
	printt( "ClientCodeCallback_UserInfoUpdated( " + hardware + ", " + uid + ")" )
}

void function AddCallback_OnPartyUpdated( void functionref() callbackFunc )
{
	if ( file.partyUpdatedCallbacks.contains( callbackFunc ) )
	{
		Assert( false, "Tried to add a callback that was already added" )
	}

	file.partyUpdatedCallbacks.append( callbackFunc )
}

void function RemoveCallback_OnPartyUpdated( void functionref() callbackFunc )
{
	Assert( file.partyUpdatedCallbacks.contains( callbackFunc ) )
	file.partyUpdatedCallbacks.fastremovebyvalue( callbackFunc )
}
#endif

void function CodeCallback_GivePlayerDoubleJump ( entity player )
{
	#if SERVER
		                                                          
		 
			              
		 
	#else
		foreach ( func in clGlobal.givePlayerDoubleJumpCallbacks )
		{
			func( player )
		}
	#endif
}

void function AddCallback_GivePlayerDoubleJump( void functionref( entity player ) func )
{
	#if SERVER
		                                                              
			                                                     
	#else
		if( !clGlobal.givePlayerDoubleJumpCallbacks.contains( func ) )
			clGlobal.givePlayerDoubleJumpCallbacks.append( func )
	#endif
}

void function RemoveCallback_GivePlayerDoubleJump( void functionref( entity player ) func )
{
	#if SERVER
		                                                             
	    	                                                                
	#else
		if( clGlobal.givePlayerDoubleJumpCallbacks.contains( func ) )
			clGlobal.givePlayerDoubleJumpCallbacks.fastremovebyvalue( func )
	#endif
}