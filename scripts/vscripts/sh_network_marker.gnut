untyped

global function NetworkMarkerShared_Init
global function RegisterMarker

#if SERVER
	                         
	                           
#else
	global function AddMarkerChangeCallback
	global function ServerCallback_UpdateMarker
#endif
global function NetworkMarkerIsValid

                                                  
global const MARKER_TOWERDEFENSEGENERATOR = "TowerDefenseGeneratorEnt"



                                                                                      
							                           
                                                                                      
global const MARKER_ENT_CLASSNAME = "script_ref"
global const MARKET_ENT_MARKED_NAME = "mfd_marked"
global const MARKET_ENT_PENDING_MARKED_NAME = "mfd_pending_marked"


void function RegisterNetworkMarkers()
{
	RegisterMarker( MARKER_TOWERDEFENSEGENERATOR )

	RegisterMarker( "LoadoutCrateMarker0" )
	RegisterMarker( "LoadoutCrateMarker1" )
	RegisterMarker( "LoadoutCrateMarker2" )
	RegisterMarker( "LoadoutCrateMarker3" )
	RegisterMarker( "LoadoutCrateMarker4" )
	RegisterMarker( "LoadoutCrateMarker5" )
	RegisterMarker( "LoadoutCrateMarker6" )
	RegisterMarker( "LoadoutCrateMarker7" )
	RegisterMarker( "LoadoutCrateMarker8" )
	RegisterMarker( "LoadoutCrateMarker9" )
}


void function NetworkMarkerShared_Init()
{
	level.NetworkMarkedEnts <- {}
	level.MarkerRegistryIndex <- 0

	#if SERVER
		                                   
	#else
		AddCreateCallback( MARKER_ENT_CLASSNAME, __OnMarkerCreated )

		level.RegisteredClientMarkers <- {}
		level.ClientFuncsForMarkedEnts <- {}
	#endif

	RegisterNetworkMarkers()
}

#if SERVER
	                                                  
	 
		                              
		 
			                           
			      
		 

		                           
	 

	                                        
	 
		                              
			      

		                            
	 

	                                                       
	 
		                                   
		                      
		                                
	 

	                                                         
	 
		                    
		                                                    
		                           
		                             
		                                                              
		                           

		                      

		                           
		                       

		             
	 

	                                                     
	 
		                                        
		                                                    

		                             
			                                                                             
	 

	                                                            
	 
		                                               
		                                                          
	 

#else             

	string function GetRegisteredNameFromMarkerIndex( int index )
	{
		Assert( index in level.RegisteredClientMarkers )
		return expect string( level.RegisteredClientMarkers[ index ] )
	}

	void function AddMarkerChangeCallback( string name, func )
	{
		Assert( !( name in level.ClientFuncsForMarkedEnts ) )
		level.ClientFuncsForMarkedEnts[ name ] <- func
	}

	void function __OnMarkerCreated( entity marker )
	{
		if ( !__IsMarker( marker ) )
			return

		string name = marker.GetTargetName()
		if ( name == "" )
			return

		__AddMarkerToList( marker )	                                                                                                                                             
		__UpdateMarkerOnClient( name )
	}

	void function ServerCallback_UpdateMarker( int index )
	{
		string name = GetRegisteredNameFromMarkerIndex( index )
		__UpdateMarkerOnClient( name )
	}

	void function __UpdateMarkerOnClient( string name )
	{
		if ( !( name in level.ClientFuncsForMarkedEnts ) )
			return

		local func = level.ClientFuncsForMarkedEnts[ name ]
		entity markedEntity = GetMarkedEntity( name )
		thread func( markedEntity, name )
	}
#endif

            
bool function __IsMarker( entity marker )
{
	#if SERVER
		                                                    
	#elseif CLIENT
		return marker.GetNetworkedClassName() == MARKER_ENT_CLASSNAME
	#endif
}

void function RegisterMarker( string name )
{
	#if SERVER
		                                                                  
		                           
	#elseif CLIENT
		level.RegisteredClientMarkers[ level.MarkerRegistryIndex ] <- name
		level.MarkerRegistryIndex++
	#endif
}

bool function NetworkMarkerIsValid( string name )
{
	if ( !__MarkerExists( name ) )
		return false

	entity markerEnt = __GetMarker( name )
	if ( !IsValid( markerEnt ) )
		return false

	return true
}

bool function __MarkerExists( string name )
{
	return ( name in level.NetworkMarkedEnts && IsValid( level.NetworkMarkedEnts[ name ] ) )
}

entity function GetMarkedEntity( string name )
{
	entity maker = __GetMarker( name )
	if ( maker )
		return maker.GetOwner()

	return null
}

entity function __GetMarker( string name )
{
	if ( __MarkerExists( name ) )
	{
		entity ent = expect entity( level.NetworkMarkedEnts[ name ] )
		if ( IsValid( ent ) )
			return ent
	}

	return null
}

void function __AddMarkerToList( entity marker )
{
	string name = marker.GetTargetName()
	Assert( name != "" )

	                                                        
	if ( !__MarkerExists( name ) )
		level.NetworkMarkedEnts[ name ] <- null

	level.NetworkMarkedEnts[ name ] = marker
}






