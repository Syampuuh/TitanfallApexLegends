global function Cl_SquadDisplay_Init

global function UICallback_UpdateGladCardVisibility
global function UICallback_PlayerStatusUpdateThread
global function UICallback_PopulateClientGladCard
global function UICallback_DestroyClientGladCardData
global function UICallback_DestroyAllClientGladCardData
global function UICallback_ToggleMute
global function UICallback_ToggleMutePing
global function UICallback_InviteSquadMate
global function UICallback_ReportSquadMate
global function UICallback_BlockSquadMate
global function UICallback_PopulatePlayerStatsRui
global function GetTeammateAtIndex

global struct PlayerInfo
{
	EHI ehi
	string uid
	string eaid
	string hardware
	entity player
	int    team

	string unspoofedUid
}

struct
{
	table<EHI, PlayerInfo> teammates
	table< var, NestedGladiatorCardHandle > elemToGladCardHandle
} file

void function Cl_SquadDisplay_Init()
{
	RegisterSignal( "DisconnectedUpdateThread0" )
	RegisterSignal( "DisconnectedUpdateThread1" )
	RegisterSignal( "DisconnectedUpdateThread2" )
	RegisterSignal( "DisconnectedUpdateThread3" )
	AddCreateCallback( "player", OnPlayerCreated )
	AddCallback_OnPlayerChangedTeam( OnPlayerTeamChanged )
}

void function OnPlayerCreated( entity player )
{
	                                                           

	OnPlayerTeamChanged( player, TEAM_UNASSIGNED, player.GetTeam() )
}

void function OnPlayerTeamChanged( entity player, int oldTeam, int newTeam )
{
	int playerTeam = -1
	entity clientPlayer = GetLocalClientPlayer()
	if ( IsValid( clientPlayer ) )
		playerTeam = clientPlayer.GetTeam()

	                                       
	                                                                                         

	EHI ehi = ToEHI( player )

	if ( player != GetLocalClientPlayer() && player.GetTeam() == GetLocalClientPlayer().GetTeam() && player.GetTeam() != TEAM_UNASSIGNED )
	{
		if ( !( ehi in file.teammates ) )
		{
			PlayerInfo info
			info.player = player
			info.uid = player.GetPlatformUID()
			info.eaid = player.GetEadpUserIdStr()
			info.hardware = player.GetUnspoofedHardware()
			info.unspoofedUid = player.GetUnspoofedPlatformUserIdStr()
			info.team = player.GetTeam()
			info.ehi = ehi
			file.teammates[ ehi ] <- info
		}
	}
	else
	{
		if ( ehi in file.teammates )
			delete file.teammates[ ehi ]
	}
}

void function UICallback_DestroyAllClientGladCardData()
{
	foreach ( rui, nestedGCHandle in file.elemToGladCardHandle )
	{
		nestedGCHandle.cardRui = null
		CleanupNestedGladiatorCard( nestedGCHandle )
	}

	file.elemToGladCardHandle.clear()
}


void function UICallback_DestroyClientGladCardData( var elem )
{
	var rui = Hud_GetRui( elem )

	if ( ( rui in file.elemToGladCardHandle ) )
	{
		CleanupNestedGladiatorCard( file.elemToGladCardHandle[ rui ] )
		delete file.elemToGladCardHandle[ rui ]
	}
}

void function UICallback_UpdateGladCardVisibility( var panel, var elem, int teamMemberIndex )
{
	entity player
	player = GetLocalClientPlayer()
	EHI ehi = player.GetEncodedEHandle()

	Hud_Show( elem )

	if ( teamMemberIndex > 0 )
	{
		PlayerInfo ornull info = GetTeammateAtIndex( teamMemberIndex )
		if ( info == null )
			Hud_Hide( elem )

                   
			if ( IsFallLTM() )
			{
				Hud_Hide( elem )
			}
        
	}
}

PlayerInfo ornull function GetTeammateAtIndex( int teamMemberIndex )
{
	entity player
	player = GetLocalClientPlayer()
	EHI ehi = player.GetEncodedEHandle()

	if ( teamMemberIndex > 0 )
	{
		int team = player.GetTeam()
		table<EHI, PlayerInfo> teamMembers = file.teammates

		int index = teamMemberIndex-1
		PlayerInfo teammateInfo

		bool foundTeammate = false
		int i=0
		foreach ( info in teamMembers )
		{
			if ( index == i++ )
			{
				teammateInfo = info
				foundTeammate = true
				break
			}
		}

		if ( foundTeammate )
			return teammateInfo
		else
			return null
	}

	return null
}

void function UICallback_PopulateClientGladCard( var panel, var elem, var muteButton, var mutePingButton, var reportButton, var blockButton, var inviteButton, var overlayButton, var disconnectedElem, var obfuscatedID, int teamMemberIndex, float startTime, int displayType )
{
	entity player
	player = GetLocalClientPlayer()
	EHI ehi = player.GetEncodedEHandle()
	string hardware

	startTime = Time()	                                                                                                         

	var rui = Hud_GetRui( elem )
	RuiSetBool( rui, "isEmpty", true )
	RuiSetBool( rui, "isUsingFullBox", displayType == eGladCardPresentation.FULL_BOX )

	if ( displayType == eGladCardPresentation.FULL_BOX )
	{
		bool ranked = IsRankedGame() || IsArenasRankedGame()
		float scale = float( GetScreenSize().height ) / 1080.0
		if ( muteButton != null )
		{
			int y = ranked ? Hud_GetBaseY( muteButton ) + int(70 * scale) : Hud_GetBaseY( muteButton )
			Hud_SetY( muteButton, y )
		}
	}

	SetIsVisible( disconnectedElem, false )

	if ( Hud_GetHudName( elem ) == "GCard0" )
	{
		Hud_SetX( elem, 0 )
		if ( GetExpectedSquadSize( GetLocalClientPlayer() ) == 2 )
			Hud_SetX( elem, 201 )
	}

	if ( teamMemberIndex > 0 )
	{
		PlayerInfo ornull teammateInfo = GetTeammateAtIndex( teamMemberIndex )

                   
			if ( IsFallLTM() )
			{
				if ( teammateInfo != null && expect PlayerInfo( teammateInfo ).ehi != GetLocalClientPlayer().GetEncodedEHandle() )
					teammateInfo = null
			}
        

		if ( teammateInfo != null )
		{
			expect PlayerInfo( teammateInfo )

			ehi = teammateInfo.ehi
			player = GetPlayerFromTeammateInfo( teammateInfo )

			bool isMuted = false
			bool isPingMuted = false
			bool canReport = false

			if ( IsValid( player ) )
			{
				isMuted = player.IsVoiceAndTextMuted()
				isPingMuted = PlayerIsPingMuted( player )

				SetIsMuted( muteButton, isMuted )
				SetIsMuted( mutePingButton, isPingMuted )

				canReport = CanReportPlayer( player )
			}
			else
			{
				int reportStyle = GetReportStyle()

				switch ( reportStyle )
				{
					case 1:                  
						canReport = CrossplayUserOptIn() ? true : teammateInfo.hardware == GetLocalClientPlayer().GetUnspoofedHardware()
						break

					case 2:               
						canReport = true
						break

					case 0:            
					default:
						canReport = false
				}
			}

			SetIsVisible( muteButton, true )
			SetIsVisible( mutePingButton, true )

			bool canInviteToParty = CanInviteSquadMate( teammateInfo.uid )
			bool isInMyParty = IsInMyParty( teammateInfo.uid )

			SetIsVisible( inviteButton, canInviteToParty || isInMyParty )
			SetIsSelected( inviteButton, isInMyParty )

			SetIsVisible( reportButton, canReport )

			SetIsVisible( blockButton, CrossplayUserOptIn() && !IsUserOnSamePlatform( teammateInfo.hardware ) )

			EHIScriptStruct teammateEHISS
			if ( EEHHasValidScriptStruct( ehi ) )
				teammateEHISS = GetEHIScriptStruct( ehi )
			if ( GetCurrentPlaylistVarBool( "showPlayerObfuscatedID", true ) && teammateEHISS.obfuscatedID != "" )
			{
				Hud_SetText( obfuscatedID, Localize( "#DEATH_SCREEN_ID", teammateEHISS.obfuscatedID ) )
				SetIsVisible( obfuscatedID, true )
			}

			if ( DeathScreenSummaryShouldFadeIn() )
			{
				FadeInButtonElement( muteButton, 1.5, 2.0 )
				FadeInButtonElement( reportButton, 1.5, 2.0  )
				FadeInButtonElement( blockButton, 1.5, 2.0  )
			}

			SetDefaultTooltipData( muteButton, isMuted ? "#UNMUTE" : "#MUTE" )
			SetDefaultTooltipData( mutePingButton, isPingMuted ? "#UNMUTE_PING" : "#MUTE_PING" )
			SetDefaultTooltipData( inviteButton, "#INVITE_SQUAD_MATE" )
			SetDefaultTooltipData( reportButton, "#REPORT_SQUAD_MATE" )
			SetDefaultTooltipData( blockButton, "#BLOCK_SQUAD_MATE" )

			if ( overlayButton != null )
				RunUIScript( "ClientCallback_UpdatePlayerOverlayButton", panel, overlayButton, GetPlayerNameFromEHI( ehi ), teammateInfo.uid, teammateInfo.hardware, teammateInfo.eaid, teammateInfo.unspoofedUid, teamMemberIndex )

			hardware = teammateInfo.hardware
		}
		else
		{
			if ( overlayButton != null )
				RunUIScript( "ClientCallback_UpdatePlayerOverlayButton", panel, overlayButton, "", "", "", "", "", teamMemberIndex )

			SetIsVisible( mutePingButton, false )
			SetIsVisible( muteButton, false )
			SetIsVisible( reportButton, false )
			SetIsVisible( inviteButton, false )
			SetIsVisible( blockButton, false )
			SetIsVisible( obfuscatedID, false )

			return
		}
	}
	else
	{
		hardware = player.GetUnspoofedHardware()
	}

	if ( displayType == eGladCardPresentation.FRONT_CLEAN )
	{
		string platformString = CrossplayUserOptIn() ? PlatformIDToIconString( GetHardwareFromName( hardware ) ) : ""
		RuiSetString( rui, "platformString", platformString )
	}

	if ( ehi == EHI_null )
		return

	bool isConnected = IsValid( GetEntityFromEncodedEHandle( ehi ) )

	RuiSetBool( rui, "isEmpty", false )
	RuiSetBool( rui, "isConnected", isConnected )

	if ( !isConnected && teamMemberIndex > 0 && disconnectedElem != null )
	{
		SetIsVisible( mutePingButton, false )
		SetIsVisible( muteButton, false )
		SetIsVisible( inviteButton, false )
		SetIsVisible( disconnectedElem, true )
	}

	NestedGladiatorCardHandle nestedGCHandle
	if (!( rui in file.elemToGladCardHandle ))
	{
		RuiDestroyNestedIfAlive( rui, "card" )
		nestedGCHandle = CreateNestedGladiatorCard( rui, "card", eGladCardDisplaySituation.SQUAD_MANAGEMENT_PAGE_ANIMATED, displayType )
		file.elemToGladCardHandle[ rui ] <- nestedGCHandle
	}
	else
	{
		nestedGCHandle = file.elemToGladCardHandle[ rui ]
	}

	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetString( rui, "playerName", GetPlayerNameFromEHI( ehi ) )

	ChangeNestedGladiatorCardOwner( nestedGCHandle, ehi, Time(), eGladCardLifestateOverride.ALIVE )
}


void function FadeInButtonElement( var button, float fadeInTime, float fadeInDelay )
{
	if ( button == null )
		return

	var rui = Hud_GetRui( button )

	RuiSetFloat( rui, "fadeInTime", fadeInTime )
	RuiSetFloat( rui, "fadeInDelay", fadeInDelay )
	RuiSetFloat( rui, "startTime", Time() )
}

void function UICallback_PlayerStatusUpdateThread( var panel, var elem, var muteButton, var mutePingButton, var reportButton, var inviteButton, var overlayButton, var disconnectedElem, int teamMemberIndex )
{
	                                                                      
	thread _PlayerStatusUpdateThread( panel, elem, muteButton, mutePingButton, reportButton, inviteButton, overlayButton, disconnectedElem, teamMemberIndex )
}

void function _PlayerStatusUpdateThread( var panel, var statsPanel, var muteButton, var mutePingButton, var reportButton, var inviteButton, var overlayButton, var disconnectedElem, int teamMemberIndex )
{
	Signal( clGlobal.levelEnt, "DisconnectedUpdateThread" + teamMemberIndex )
	EndSignal( clGlobal.levelEnt, "DisconnectedUpdateThread" + teamMemberIndex )
	EndSignal( clGlobal.levelEnt, "ShowRoundEndSquadResults" )
	PlayerInfo ornull info = GetTeammateAtIndex( teamMemberIndex )
	if ( info == null )
	{
		                                        
		if ( teamMemberIndex == 0 )
			thread UpdateMicStatus( GetLocalClientPlayer(), Hud_GetRui( statsPanel ) )

		return
	}

	expect PlayerInfo(info)

	bool wasConnected = true
	entity playerEnt = FromEHI( info.ehi )

	if ( IsValid( playerEnt ) )
		thread UpdateMicStatus( playerEnt, Hud_GetRui( statsPanel ) )

	while ( 1 )
	{
		bool connected = IsValid( playerEnt ) && playerEnt.IsConnectionActive()

		if ( connected != wasConnected )
		{
			SetIsEnabled( mutePingButton, connected )
			SetIsEnabled( muteButton, connected )
			SetIsVisible( inviteButton, connected )

			var statsRui = Hud_GetRui( statsPanel )
			                                                            
			_PopulatePlayerStatsRui( statsPanel, teamMemberIndex, connected )

			wasConnected = connected
		}

		WaitFrame()
	}
}

void function UpdateMicStatus( entity player, var rui )
{
	EndSignal( player, "OnDestroy" )
	EndSignal( clGlobal.levelEnt, "ShowRoundEndSquadResults" )

	int prevMicStatus = -2

	while( true )
	{
		int micStatus = GetPlayerMicStatus( player )
		if ( micStatus != prevMicStatus )
		{
			prevMicStatus = micStatus

			RuiSetInt( rui, "micStatus", micStatus )
		}

		WaitFrame()
	}
}

void function SetIsVisible( var button, bool isVisible )
{
	if ( !IsValid( button ) )
		return

	if ( isVisible )
	{
		Hud_Show( button )
	}
	else
	{
		Hud_Hide( button )
	}
}

void function SetIsEnabled( var button, bool enabled )
{
	if ( !IsValid( button ) )
		return

	Hud_SetEnabled( button, enabled )
}

void function SetIsSelected( var button, bool enabled )
{
	if ( !IsValid( button ) )
		return

	Hud_SetSelected( button, enabled )
}

void function SetIsMuted( var button, bool isMuted )
{
	if ( !IsValid( button ) )
		return

	RuiSetBool( Hud_GetRui( button ), "isMuted", isMuted )
}

void function SetDefaultTooltipData( var button, string titleText )
{
	if ( !IsValid( button ) )
		return

	ToolTipData d
	d.titleText = titleText
	d.tooltipStyle = eTooltipStyle.DEFAULT
	d.descText = "#REPORT_SQUAD_MATE_DESC"
	Hud_SetToolTipData( button, d )
}

void function UICallback_ToggleMute( var button )
{
	int index = int( Hud_GetScriptID( button ) )
	entity player
	player = GetLocalClientPlayer()

	PlayerInfo ornull teammateInfo = GetTeammateAtIndex( index )

	if ( teammateInfo != null )
	{
		expect PlayerInfo( teammateInfo )

		player = GetPlayerFromTeammateInfo( teammateInfo )

		if ( !IsValid( player ) )
			return

		TogglePlayerVoiceAndTextMute( player )
		var rui = Hud_GetRui( button )

		bool isMuted = player.IsVoiceAndTextMuted()

		RuiSetBool( rui, "isMuted", isMuted )

		ToolTipData d1
		d1.titleText = isMuted ? "#UNMUTE" : "#MUTE"
		d1.tooltipStyle = eTooltipStyle.DEFAULT
		d1.descText = " "
		Hud_SetToolTipData( button, d1 )
	}
}


void function UICallback_ToggleMutePing( var button )
{
	int index = int( Hud_GetScriptID( button ) )
	entity player
	player = GetLocalClientPlayer()
	int team = player.GetTeam()
	table<EHI, PlayerInfo> teamMembers = file.teammates

	index = index-1
	PlayerInfo teammateInfo

	bool foundTeammate = false
	int i=0
	foreach ( info in teamMembers )
	{
		if ( index == i++ )
	{
			teammateInfo = info
			foundTeammate = true
			break
		}
	}

	if ( foundTeammate )
	{
		player = GetPlayerFromTeammateInfo( teammateInfo )

		if ( !IsValid( player ) )
			return

		TogglePlayerWaypointMute( player )
		var rui = Hud_GetRui( button )

		bool isMuted = PlayerIsPingMuted( player )

		RuiSetBool( rui, "isMuted", isMuted )

		ToolTipData d1
		d1.titleText = isMuted ? "#UNMUTE_PING" : "#MUTE_PING"
		d1.tooltipStyle = eTooltipStyle.DEFAULT
		d1.descText = " "
		Hud_SetToolTipData( button, d1 )
	}
}


void function UICallback_InviteSquadMate( var button )
{
	int index = int( Hud_GetScriptID( button ) )
	entity player
	player = GetLocalClientPlayer()
	int team = player.GetTeam()
	table<EHI, PlayerInfo> teamMembers = file.teammates

	index = index-1
	PlayerInfo teammateInfo

	bool foundTeammate = false
	int i=0
	foreach ( info in teamMembers )
	{
		if ( index == i++ )
		{
			teammateInfo = info
			foundTeammate = true
			break
		}
	}

	if ( foundTeammate )
	{
		int localHardwareId = GetHardwareFromName( GetLocalClientPlayer().GetUnspoofedHardware() )
		if ( localHardwareId != GetHardwareFromName( teammateInfo.hardware ) )
		{
			RunUIScript( "ClientToUI_InviteToPlayByEAID", teammateInfo.eaid.tostring() )
		}
		else 
		{
			DoInviteToParty( [ teammateInfo.uid ] )
		}

		SetDefaultTooltipData( button, "#INVITE_SQUAD_MATE_DONE" )
		SetIsSelected( button, true )
	}
}

void function UICallback_ReportSquadMate( var button )
{
	int index = int( Hud_GetScriptID( button ) )
	entity player
	player = GetLocalClientPlayer()
	int team = player.GetTeam()
	table<EHI, PlayerInfo> teamMembers = file.teammates

	index = index-1
	PlayerInfo teammateInfo

	bool foundTeammate = false
	int i=0
	foreach ( info in teamMembers )
	{
		if ( index == i++ )
	{
			teammateInfo = info
			foundTeammate = true
			break
		}
	}

	if ( foundTeammate )
	{
		string friendlyOrEnemy = "friendly"

		int hardwareID = GetHardwareFromName( teammateInfo.hardware )
		RunUIScript( "ClientToUI_ShowReportPlayerDialog", GetPlayerNameFromEHI( teammateInfo.ehi ), hardwareID, teammateInfo.uid, teammateInfo.eaid, friendlyOrEnemy )
	}
}

void function UICallback_BlockSquadMate( var button )
{
	int index = int( Hud_GetScriptID( button ) )
	entity player
	player = GetLocalClientPlayer()
	int team = player.GetTeam()
	table<EHI, PlayerInfo> teamMembers = file.teammates

	index = index-1
	PlayerInfo teammateInfo

	bool foundTeammate = false
	int i=0
	foreach ( info in teamMembers )
	{
		if ( index == i++ )
		{
			teammateInfo = info
			foundTeammate = true
			break
		}
	}

	if ( foundTeammate )
	{
		printt( "#EADP UICallback_BlockSquadMate", teammateInfo.ehi, teammateInfo.hardware, teammateInfo.uid, teammateInfo.eaid )
		RunUIScript( "ClientToUI_ShowBlockPlayerDialog", GetPlayerNameFromEHI( teammateInfo.ehi ), teammateInfo.hardware, teammateInfo.uid, teammateInfo.eaid )
	}
}

entity function GetPlayerFromTeammateInfo( PlayerInfo teammateInfo )
{
	entity player = teammateInfo.player

	if ( !IsValid( player ) )
	{
		player = FromEHI( teammateInfo.ehi )
	}

	return player
}

void function UICallback_PopulatePlayerStatsRui( var panel, int index )
{
	                                                          
	_PopulatePlayerStatsRui( panel, index, true )
}

void function _PopulatePlayerStatsRui( var cardElem, int index, bool connected )
{
	                                                           
	SquadSummaryData squadSummaryData = GetSquadSummaryData()
	if ( index >= squadSummaryData.playerData.len() )
	{
		                                                 
		Hud_Hide( cardElem )
		#if DEV
			printt( "ClearPlayerStatsRui", index )
		#endif
		ClearPlayerStatsRui( Hud_GetRui( cardElem ) )
		return
	}

	                                              
	int eHandle = -1

	if ( index > 0 )
	{
		PlayerInfo ornull teammateInfo
		teammateInfo = GetTeammateAtIndex( index )

		if ( teammateInfo == null )
		{
			                                                  
			return
		}

		expect PlayerInfo( teammateInfo )
		eHandle = teammateInfo.ehi
	}
	else
	{
		                                                
		eHandle = GetLocalClientPlayer().GetEncodedEHandle()
	}

	Hud_Show( cardElem )

	var rui = Hud_GetRui( cardElem )

	for ( int i = 0; i<squadSummaryData.playerData.len(); i++ )
	{
		                                                                                                                                                            
		if ( squadSummaryData.playerData[i].eHandle == eHandle )
		{
			PopulatePlayerStatsRui( rui, i, connected)
			break
		}
	}
}