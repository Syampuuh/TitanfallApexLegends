untyped

global function ClGameState_Init
global function ClGameState_Think
global function ClGameState_GetRui
global function CLGameState_GetNetGraphRui
global function ClGameState_SetInfoStatusText
global function ClGameState_SetHasScreenBorder

global function AddCallback_OnScoreboardCreated
global function AddCallback_OnGameStateChanged

global function ShowRoundScoresInAnnouncement

global function PlayRoundWonConversationWithAnnouncementDelay

global function UpdateGamestateRuiTracking
global function UpdateCommonScoreRuiTracking

global function SetGameModeScoreBarUpdateRules
global function SetGameModeScoreBarUpdateRulesWithFlags
global function SetGameModeSuddenDeathAnnouncementSubtext

global function KillLeaderChangeCallback
global function UpdateKillLeaderOnGameStateRui

global function CreateScoreRUI
global function SetCommonScoreRUIVars
global function ClGameState_RegisterGameStateAsset
global function ClGameState_RegisterGameStateFullmapAsset
global function GetFullmapGameStateAsset

global function ClGameState_SetPilotTitanStatusCallback
global function GameState_UpdateRuiRoundEndGameTime

global function ClGameState_SetSwitchingSidesSubText

global function UpdateIsSonyMP

global enum ePlayerStatusType
{
	PTS_TYPE_NONE,
	PTS_TYPE_DEAD,
	PTS_TYPE_DEAD_PILOT_TITAN,
	PTS_TYPE_DEAD_READY,
	PTS_TYPE_PILOT,
	PTS_TYPE_READY,
	PTS_TYPE_PILOT_TITAN,
	PTS_TYPE_EVAC,
	PTS_TYPE_ION,
	PTS_TYPE_SCORCH,
	PTS_TYPE_RONIN,
	PTS_TYPE_TONE,
	PTS_TYPE_LEGION,
	PTS_TYPE_NORTHSTAR,
	PTS_TYPE_VANGUARD,
	PTS_TYPE_WAVE_READY,
	PTS_TYPE_WAVE_NOT_READY,
	PTS_TYPE_COUNT,
}

struct PilotTitanStatus
{
	int    playerCount
	int[8] slotTypes
}

global enum sbflag
{
	SKIP_STANDARD_UPDATE = (1 << 0),
	_count = 1
}

struct
{
	var  gamestateRui
	bool gameStateRuiCreated = false
	var  letterBoxRui = null
	bool thirtySecondWarningDone = false

	void functionref( var )     gameModeScoreBarUpdateRules
	array< void functionref() > onScoreboardCreatedFuncs
	int                         gameModeScoreBarUpdateFlags = 0

	table<int, PilotTitanStatus>   pilotTitanStatus
	int functionref( entity, int ) pilotTitanStatusCallback

	string switchingSidesSubText = "#GameState_SWITCHING_SIDES"
	string suddenDeathAnnouncementSubtext

	asset gameStateRuiAsset = $""
	asset gameStateFullmapRuiAsset = $""

	var  nestedNetGraphRui
	bool netGraphRuiCreated = false
	bool isNetGraphEnabled

	int cachedGameState = -1
	array< void functionref( int ) > onGameStateChangedFuncs
} file

const DEV_COUNTDOWNTIMER = 0                                                                                  






void function ClGameState_Init()
{
	RegisterSignal( "GameStateChanged" )
	RegisterNetVarIntChangeCallback( "gameState", ClGameState_Changed )
	RegisterNetVarBoolChangeCallback( "badRepPresent", UpdateScoreboardBadRepPresentMessage )

	AddOnSpectatorTargetChangedCallback( GameState_SpectatorTargetChanged )

	AddCallback_OnClientScriptInit( ClGameState_AddClient )
	AddCallback_OnScoreboardCreated( Hud_SetModeEmblem )

	file.isNetGraphEnabled = IsNetGraphEnabled()
	AddCallback_OnSettingsUpdated( OnSettingsUpdated )

	CreateScoreRUI()
}


void function CreateScoreRUI()
{
	var rui = CreatePermanentCockpitPostFXRui( GetGameStateAsset(), MINIMAP_Z_BASE - 1 )

	RuiTrackFloat( rui, "jumpEndTime", null, RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL, GetNetworkedVariableIndex( "PlaneDoorsOpenTime" ) )

	RuiTrackBool( rui, "netIssuePacketLoss", null, RUI_TRACK_NET_ISSUE_PACKETLOSS )
	RuiTrackBool( rui, "netIssueCongestion", null, RUI_TRACK_NET_ISSUE_CONGESTION )
	RuiTrackBool( rui, "netIssueLatency", null, RUI_TRACK_NET_ISSUE_LATENCY )
	RuiTrackBool( rui, "netIssuePredictionError", null, RUI_TRACK_NET_ISSUE_PREDICTION_ERROR )
	RuiTrackBool( rui, "netIssueLagCompFail", null, RUI_TRACK_NET_ISSUE_LAG_COMP_FAIL )
	RuiTrackBool( rui, "netIssueUserCmdDelay", null, RUI_TRACK_NET_ISSUE_USERCMD_DELAY )

	RuiTrackFloat( rui, "hdTextureProgress", null, RUI_TRACK_GAME_FULLY_INSTALLED_PROGRESS )
	RuiTrackBool( rui, "hdTextureNeedsReboot", null, RUI_TRACK_GAME_HAS_NON_FULLY_INSTALLED_ASSETS_LOADED )

	RuiTrackBool( rui, "audioIssueStarvation", null, RUI_TRACK_AUDIO_ISSUE_STARVATION )
	RuiTrackBool( rui, "audioIssueData", null, RUI_TRACK_AUDIO_ISSUE_DATA )
	RuiTrackBool( rui, "audioIssueLimits", null, RUI_TRACK_AUDIO_ISSUE_LIMITS )
	RuiTrackBool( rui, "audioIssueMarker", null, RUI_TRACK_AUDIO_ISSUE_MARKER_INSERTED )

	          
	if ( file.isNetGraphEnabled == true )
	{
		RuiSetBool( rui, "isNetGraphEnabled", file.isNetGraphEnabled )
		CreateNestedNetGraph( rui )
	}

	RuiSetInt( rui, "maxPlayerCount", GetCurrentPlaylistVarInt( "max_players", 12 ) )
	RuiSetString( rui, "gameModeString", GetCurrentPlaylistVarString( "name", "#PLAYLIST_UNAVAILABLE" ) )
	RuiSetString( rui, "mapName", GetCurrentPlaylistVarString( "map_name", "#PLAYLIST_UNAVAILABLE" ) )
	RuiSetImage( rui , "gameModeIcon", GetGamemodeLogoFromImageMap( GetCurrentPlaylistVarString( "gamemode_logo", "BATTLE_ROYALE" )) )
	file.gamestateRui        = rui
	file.gameStateRuiCreated = true

	SetCommonScoreRUIVars( rui )

	if ( file.gameModeScoreBarUpdateRules == null )
		SetGameModeScoreBarUpdateRules( GameModeScoreBarUpdateRules_Default )

	foreach ( func in file.onScoreboardCreatedFuncs )
	{
		func()
	}
}


void function Hud_SetModeEmblem()
{
	RuiSetAsset( file.gamestateRui, "emblemImage", GetModeEmblemImage( GetCurrentPlaylistName() ) )
}


void function SetCommonScoreRUIVars( var rui )
{
                  
		if ( IsFallLTM() )
		{
			RuiSetString( rui, "gameModeString", "" )                                                             
			RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
			RuiSetString( rui, "squadsRemainingTextSingular", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemainingTextPlural", "#SHADOW_SQUAD_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemaining2TextSingular", "#SHADOW_SQUAD_SHADOW_PLAYERS_REMAIN" )
			RuiSetString( rui, "squadsRemaining2TextPlural", "#SHADOW_SQUAD_SHADOW_PLAYERS_REMAIN" )
			return
		}
       
	if ( IsSoloMode() )
	{
		RuiSetBool( rui, "shouldDisplayLivingPlayerCount", false )
		RuiSetString( rui, "squadsRemainingTextSingular", "#SURVIVAL_PLAYERS_REMAIN" )
		RuiSetString( rui, "squadsRemainingTextPlural", "#SURVIVAL_PLAYERS_REMAIN" )
	}
	else
	{
		RuiSetBool( rui, "shouldDisplayLivingPlayerCount", true )

		if ( IsPVEMode() )
		{
			RuiSetInt( rui, "livingPlayerCountMin", -1 )
			RuiSetString( rui, "squadsRemainingTextSingular", "Squad" )
			RuiSetString( rui, "squadsRemainingTextPlural", "Squads" )
			                                                              
			                                             
		}
		else
		{
			RuiSetInt( rui, "livingPlayerCountMin", 10 )
			RuiSetString( rui, "squadsRemainingTextSingular", "#SURVIVAL_SQUADS_REMAIN" )
			RuiSetString( rui, "squadsRemainingTextPlural", "#SURVIVAL_SQUADS_REMAIN" )
		}
	}
}


void function UpdateGamestateRuiTracking( entity player )
{
	if ( IsValid( player ) && player.IsPlayer() )
		UpdateCommonScoreRuiTracking( file.gamestateRui, player )
}


void function UpdateCommonScoreRuiTracking( var rui, entity player )
{
	RuiTrackInt( rui, "killCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "kills" ) )
	RuiTrackInt( rui, "damageDealt", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "damageDealt" ) )

	if ( IsRankedGame() && !IsArenaMode() )
	{
		RuiTrackInt( rui, "participationCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "kill_participation" ) )
	}

	                                                                                                                                         
	RuiTrackBool( rui, "hasDeathFieldImmunity", player, RUI_TRACK_SCRIPT_NETWORK_VAR_BOOL, GetNetworkedVariableIndex( "hasDeathFieldImmunity" ) )
	RuiTrackInt( rui, "assistCount", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "assists" ) )

                                
		RuiTrackFloat( rui, "cameraViewFrac", player, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.camera_view )
       

                 
		if ( Crafting_IsEnabled() )
		{
			RuiTrackInt( ClGameState_GetRui(), "craftingMaterials", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "craftingMaterials" ) )
		}
       
}


void function GameModeScoreBarUpdateRules_Default( var rui )
{
	               
}


void function SetGameModeScoreBarUpdateRulesWithFlags( void functionref( var ) rules, int sbflags )
{
	file.gameModeScoreBarUpdateRules = rules
	file.gameModeScoreBarUpdateFlags = sbflags
}


void function SetGameModeScoreBarUpdateRules( void functionref( var ) rules )
{
	SetGameModeScoreBarUpdateRulesWithFlags( rules, 0 )
}


void function ClGameState_SetInfoStatusText( string statusText )
{
	if ( file.gameStateRuiCreated )
		RuiSetString( file.gamestateRui, "statusText", Localize( statusText ) )
}


asset function GetGameStateAsset()
{
	if ( file.gameStateRuiAsset != $"" )                                                                                               
		return file.gameStateRuiAsset

	return $"ui/gamestate_info.rpak"
}


asset function GetFullmapGameStateAsset()
{
	if ( file.gameStateFullmapRuiAsset != $"" )                                                                                               
		return file.gameStateFullmapRuiAsset

	return $"ui/gamestate_info_fullmap.rpak"
}


void function ClGameState_RegisterGameStateAsset( asset gameStateAsset )
{
	file.gameStateRuiAsset = gameStateAsset
}


void function ClGameState_RegisterGameStateFullmapAsset( asset gameStateFullmapAsset )
{
	file.gameStateFullmapRuiAsset = gameStateFullmapAsset
}


void function ClGameState_AddClient( entity player )
{
	player.cv.scoreboardBadRepPresentMessage <- HudElement( "ScoreboardBadRepPresentMessage", HudElement( "Scoreboard" ) )

	#if PC_PROG
		player.cv.scoreboardBadRepPresentMessage.SetText( "#ASTERISK_FAIRFIGHT_CHEATER" )
	#else
		player.cv.scoreboardBadRepPresentMessage.SetText( "#ASTERISK_BAD_REPUTATION" )
	#endif

	player.cv.hudCheaterMessage <- HudElement( "HudCheaterMessage" )
	if ( !Durango_IsDurango() && !IsLobby() && player.HasBadReputation() )
		player.cv.hudCheaterMessage.Show()
	else
		player.cv.hudCheaterMessage.Hide()
}


var function ClGameState_GetRui()
{
	if ( !file.gameStateRuiCreated )
		return null
	return file.gamestateRui
}

void function ClGameState_Think()
{
	entity player = GetLocalClientPlayer()

	PerfStart( PerfIndexClient.ScoreBoard )
	UpdateScoreBar( player )
	PerfEnd( PerfIndexClient.ScoreBoard )

	switch ( GetGameState() )
	{
		case eGameState.WaitingForPlayers:
			ClGameStateThink_WaitingForPlayers( player )
			break

		case eGameState.PickLoadout:
			ClGameStateThink_PickLoadOut( player )
			break

		case eGameState.Prematch:
			ClGameStateThink_Prematch( player )
			break

		case eGameState.Playing:
			PerfStart( PerfIndexClient.GameStatePlaying )
			ClGameStateThink_Playing( player )
			PerfEnd( PerfIndexClient.GameStatePlaying )
			break

		case eGameState.SwitchingSides:
			ClGameStateThink_SwitchingSides( player )
			break

		case eGameState.Postmatch:
			ClGameStateThink_Postmatch( player )
			break
	}
}


void function ClGameStateThink_Prematch( entity player )
{
	                                                   
	                                                                   
	                                       
	                                        
	  
	                                
	                    
	  	                                               

	                                       
	if ( !DEV_COUNTDOWNTIMER )
		return

	float timeRemaining = ceil( GetGameStartTime() - Time() )

	player.cv.prematchTimer.Show()
	player.cv.prematchTimerGlow.Show()
	player.cv.prematchDesc.Show()

	player.cv.prematchTimer.SetText( string( timeRemaining ) )
	player.cv.prematchTimerGlow.SetText( string( timeRemaining ) )
}


void function ClGameStateThink_WaitingForPlayers( entity player )
{
	int reservedCount   = GetTotalPendingPlayersReserved()
	int connectingCount = GetTotalPendingPlayersConnecting()
	int loadingCount    = GetTotalPendingPlayersLoading()

	int connectedCount       = GetPlayerArray().len()
	int allKnownPlayersCount = reservedCount + connectingCount + loadingCount + connectedCount
	int minPlayers           = GetCurrentPlaylistVarInt( "min_players", 0 )
	int expectedPlayers      = maxint( minPlayers, allKnownPlayersCount )

	if ( !("lastTimeRemaining" in player.cv) )
		player.cv.lastTimeRemaining <- null

	float endTime = GetNV_PreGameStartTime()
	if ( Time() <= endTime )
	{
		float timeRemainingFloat = (endTime - Time())
		float timeRemaining      = ceil( timeRemainingFloat )

		                                                                                                                       
		                                        

		if ( timeRemaining != player.cv.lastTimeRemaining )
		{
			string waitingForPlayersSound = WAITING_FOR_PLAYERS_COUNTDOWN_SOUND

                          
				if( IsArenaMode() )
					waitingForPlayersSound = ARENAS_WAITING_FOR_PLAYERS_COUNTDOWN_SOUND
         

			EmitSoundOnEntity( player, waitingForPlayersSound )
		}

		player.cv.lastTimeRemaining = timeRemaining
	}
	else
	{
		                                                                                                            
		                                        
	}
}


void function ClGameStateThink_PickLoadOut( entity player )
{
}


entity function GetTopCompetitor( int team )
{
	array<entity> players = GetPlayerArrayOfEnemies( team )

	entity topCompetitor
	foreach ( player in players )
	{
		if ( !topCompetitor || (GameRules_GetTeamScore( player.GetTeam() )) > GameRules_GetTeamScore( topCompetitor.GetTeam() ) )
			topCompetitor = player
	}

	return topCompetitor
}


string function GetTopCompetitorName( int team )
{
	entity topCompetitor = GetTopCompetitor( team )
	return topCompetitor != null ? topCompetitor.GetPlayerName() : "None"
}


int function GetTopCompetitorTeam( int team )
{
	entity topCompetitor = GetTopCompetitor( team )
	return topCompetitor != null ? topCompetitor.GetTeam() : 0
}


float function GetGameStateRoundEndTime()
{
	if ( IsRoundBased() )
		return GetRoundEndTime()

	return GetGameEndTime()
}


void function GameState_UpdateRuiRoundEndGameTime( var rui, string argName )
{
	float endTime = GetGameStateRoundEndTime()

	if ( (endTime == 0.0) || (Time() > endTime) )
		RuiSetGameTime( rui, argName, RUI_BADGAMETIME )
	else
		RuiSetGameTime( rui, argName, endTime )
}


void function ClGameStateThink_Playing( entity player )
{
	float endTime
	if ( IsRoundBased() )
		endTime = GetRoundEndTime()
	else
		endTime = GetGameEndTime()

	if ( !endTime )
		return

	if ( Time() > endTime )
		return

	if ( endTime - Time() > 30.0 )
		return

	if ( file.thirtySecondWarningDone )
		return

	thread ThirtySecondWarning()
	file.thirtySecondWarningDone = true
}


void function ThirtySecondWarning()
{
	string conversation = GameMode_GetGameEndingConversation( GameRules_GetGameMode() )
	if ( conversation != "" )
		PlayConversationToLocalClient( conversation )

	int lastSecond = -1
	while ( Time() < GetGameEndTime() && GetGameState() == eGameState.Playing )
	{
		int second = int( floor( GetGameEndTime() - Time() ) )
		if ( lastSecond == -1 )
		{
			lastSecond = second
		}
		else if ( second != lastSecond && second < 30 )
		{
			if ( second > 5 )
			{
				EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_tick_1P" )
			}
			else if ( second >= 0 )
			{
				EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_5_seconds_1P" )
			}
		}

		lastSecond = second

		WaitFrame()
	}

	EmitSoundOnEntity( GetLocalClientPlayer(), "HUD_match_start_timer_0_seconds_1P" )
}


void function ClGameStateThink_Postmatch( entity player )
{
}


void function ClGameStateThink_SwitchingSides( entity player )
{
	                                             
	                           
}


bool function IsSonyMP()
{
	int gamestate = GetGameState()
	if ( gamestate != eGameState.Playing && gamestate != eGameState.SuddenDeath && gamestate != eGameState.Resolution )
		return false

	int playerMatchState = PlayerMatchState_GetFor( GetLocalClientPlayer() )
	if ( playerMatchState != ePlayerMatchState.SKYDIVE_FALLING && playerMatchState != ePlayerMatchState.NORMAL )
		return false

	return true
}


void function UpdateIsSonyMP()
{
	bool isSonyMP = IsSonyMP()
	SetIsConsideredSonyMultiplayer( isSonyMP )
}


void function ClGameState_Changed( entity playerEnt, int newVal )
{
	Assert( newVal >= -1 )
	Assert( newVal < eGameState._count_ )

	if ( newVal == -1 )
		return

	string oldPrintVal = file.cachedGameState == -1 ? "-1" : GetEnumString( "eGameState", file.cachedGameState )
	string newPrintVal = newVal == -1 ? "-1" : GetEnumString( "eGameState", newVal )
	printf( "ClGameState_Changed(): cachedGameState = %s, newVal = %s", oldPrintVal, newPrintVal )

	if ( file.cachedGameState == newVal )
		return

	int gameState = newVal
	file.cachedGameState = gameState

	entity player = GetLocalClientPlayer()
	Signal( player, "GameStateChanged", { newState = gameState } )

	foreach( func in file.onGameStateChangedFuncs )
		func( gameState )

	if ( IsPrivateMatch() && IsSpectator( player ) )
	{
		RuiSetInt( file.gamestateRui, "livingPlayerCountMin", 0 )
	}

	if ( GetBugReproNum() != 144690 )
	{
		if ( player.cv == null )
			player.cv = level.clientVars
	}

	foreach ( callbackFunc in clGlobal.gameStateEnterCallbacks[ gameState ] )
	{
		callbackFunc()
	}

	switch ( gameState )
	{
		case eGameState.WaitingForCustomStart:
			                                        
			break

		case eGameState.WaitingForPlayers:
			break

		case eGameState.PickLoadout:
			break

		case eGameState.Prematch:
			RemoveAllRagdolls()
			HideEventNotification()

			if ( !GetCurrentPlaylistVarBool( "show_hud_in_prematch", false ) )
				SetCrosshairPriorityState( crosshairPriorityLevel.PREMATCH, CROSSHAIR_STATE_HIDE_ALL )

			                                                      
			                                                      
			                                                       

			if ( GetCurrentPlaylistVarInt( "prematch_letterbox_enabled", 0 ) == 1 )
				file.letterBoxRui = RuiCreate( $"ui/letter_box.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 0 )

			                                       
			  	                                                        

			                                         
			                                             
			                                        

			file.thirtySecondWarningDone = false

			StopLocal1PDeathSound()                                                                                             

			clGlobal.levelEnt.Signal( "AnnoucementPurge" )

			break

		case eGameState.Playing:
			ClearCrosshairPriority( crosshairPriorityLevel.PREMATCH )
			                                         
			if ( file.letterBoxRui != null )
				RuiSetGameTime( file.letterBoxRui, "hideStartTime", Time() )

			                                              
			                                                  
			                                             

			ShowScriptHUD( player )
			break

		case eGameState.SuddenDeath:
			AnnouncementData announcement = Announcement_Create( "#GAMEMODE_ANNOUNCEMENT_SUDDEN_DEATH" )
			Announcement_SetSubText( announcement, GetGameModeSuddenDeathAnnouncementSubtext() )

			Announcement_SetHideOnDeath( announcement, false )
			Announcement_SetDuration( announcement, 7.0 )
			Announcement_SetPurge( announcement, true )
			AnnouncementFromClass( player, announcement )
			break

		case eGameState.WinnerDetermined:
			if ( player.cv != null )
				player.cv.roundSpawnCount = 0
			break

		case eGameState.Resolution:
			ResetReconnectParametersAsync()
			                                              
			break

		case eGameState.SwitchingSides:

			float announcementDuration = 7.0
			if ( IsRoundWinningKillReplayEnabled() == true && (!IsRoundBased() && IsSwitchSidesBased()) )                                                                                                             
				announcementDuration = SWITCHING_SIDES_DELAY + ROUND_WINNING_KILL_REPLAY_TOTAL_LENGTH

			AnnouncementData announcement = Announcement_Create( "#GameState_HALFTIME" )
			announcement.sortKey = RUI_SORT_SCREENFADE + 1                         
			announcement.drawOverScreenFade = true
			Announcement_SetSubText( announcement, file.switchingSidesSubText )
			Announcement_SetHideOnDeath( announcement, false )
			Announcement_SetDuration( announcement, announcementDuration )
			Announcement_SetPurge( announcement, true )

			EmitSoundOnEntity( player, "UI_InGame_HalftimeText_Enter" )
			EmitSoundOnEntityAfterDelay( player, "UI_InGame_HalftimeText_Exit", announcementDuration )

			int friendlyTeam = player.GetTeam()
			int enemyTeam = friendlyTeam == TEAM_IMC ? TEAM_MILITIA : TEAM_IMC

			if ( friendlyTeam == TEAM_IMC )
			{
				Announcement_SetLeftIcon( announcement, TEAM_ICON_IMC )
				Announcement_SetRightIcon( announcement, TEAM_ICON_MILITIA )
			}
			else
			{
				Announcement_SetLeftIcon( announcement, TEAM_ICON_MILITIA )
				Announcement_SetRightIcon( announcement, TEAM_ICON_IMC )
			}

			if ( IsRoundBased() )
			{
				Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( friendlyTeam ) )
				Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( enemyTeam ) )
			}
			else
			{
				Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore( friendlyTeam ) )
				Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore( enemyTeam ) )
			}

			AnnouncementFromClass( player, announcement )

			break

		case eGameState.Postmatch:
			break
	}

	UpdateIsSonyMP()
}

void function AddCallback_OnGameStateChanged( void functionref( int ) func )
{
	Assert( !file.onGameStateChangedFuncs.contains( func ) )
	file.onGameStateChangedFuncs.append( func )
}

void function GameState_SpectatorTargetChanged( entity player, entity previousTarget, entity currentTarget )
{
	if ( IsValid( currentTarget ) )
		UpdateGamestateRuiTracking( currentTarget )
	else
		UpdateGamestateRuiTracking( player )
}


void function SetGameModeSuddenDeathAnnouncementSubtext( string text )
{
	file.suddenDeathAnnouncementSubtext = text
}


void function KillLeaderChangeCallback( entity player, entity new )
{
	UpdateKillLeaderOnGameStateRui( ClGameState_GetRui() )
	UpdateKillLeaderOnGameStateRui( GetFullmapGamestateRui() )
}


void function UpdateKillLeaderOnGameStateRui( var rui )
{
	if ( rui == null )
		return

	entity killLeader = GetGlobalNetEnt( "killLeader" )

	RuiSetBool( rui, "isPlayerKillLeader", GetLocalViewPlayer() == killLeader )
}


string function GetGameModeSuddenDeathAnnouncementSubtext()
{
	return file.suddenDeathAnnouncementSubtext
}


void function SwitchingSides_Changed()
{
	if ( IsMenuLevel() )
		return

	thread SwitchingSides_Changed_threaded()
}


void function SwitchingSides_Changed_threaded()
{
	                                      
	  
	                                
	   
	  	                                                          
	  	                             
	  	        
	   
	      
	   
	  	                             
	  
	   
}

                                                                                              
void function ShowRoundScoresInAnnouncement( AnnouncementData announcement, float subtext2IconDelay, int ornull imcTeamScore2 = null, int ornull militiaTeamScore2 = null )
{
	entity player = GetLocalClientPlayer()

	int friendlyTeam = player.GetTeam()
	int enemyTeam    = friendlyTeam == TEAM_IMC ? TEAM_MILITIA : TEAM_IMC

	asset leftIcon
	asset rightIcon

	if ( friendlyTeam == TEAM_IMC )
	{
		leftIcon  = TEAM_ICON_IMC
		rightIcon = TEAM_ICON_MILITIA
	}
	else
	{
		leftIcon  = TEAM_ICON_MILITIA
		rightIcon = TEAM_ICON_IMC
	}

	if ( GetGlobalNonRewindNetBool( "roundScoreLimitComplete" ) == true )                                                                                    
	{
		int winningTeam = GetNetWinningTeam()

		if ( friendlyTeam == winningTeam )
		{
			Announcement_SetSubText( announcement, "#GAMEMODE_MATCH_WON_BY_FRIENDLY_TEAM" )
			string friendlyTeamString = friendlyTeam == TEAM_IMC ? "#TEAM_IMC" : "#TEAM_MCOR"
			Announcement_SetOptionalSubTextArgsArray( announcement, [ friendlyTeamString ] )
		}
		else if ( enemyTeam == winningTeam )
		{
			Announcement_SetSubText( announcement, "#GAMEMODE_MATCH_WON_BY_ENEMY_TEAM" )
			string enemyTeamString = enemyTeam == TEAM_IMC ? "#TEAM_IMC" : "#TEAM_MCOR"
			Announcement_SetOptionalSubTextArgsArray( announcement, [ enemyTeamString ] )
		}
	}

	                                                                                                                      
	                                                                                                           
	if ( imcTeamScore2 == null && militiaTeamScore2 == null )
	{
		Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( friendlyTeam ) )
		Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", GameRules_GetTeamScore2( enemyTeam ) )
	}
	else
	{
		Assert( imcTeamScore2 != null && militiaTeamScore2 != null )                                                    
		if ( friendlyTeam == TEAM_IMC )
		{
			Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", imcTeamScore2 )
			Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", militiaTeamScore2 )
		}
		else
		{
			Announcement_SetLeftText( announcement, "#GAMEMODE_JUST_THE_SCORE", militiaTeamScore2 )
			Announcement_SetRightText( announcement, "#GAMEMODE_JUST_THE_SCORE", imcTeamScore2 )
		}
	}

	Announcement_SetLeftIcon( announcement, leftIcon )
	Announcement_SetRightIcon( announcement, rightIcon )
}


void function PlayRoundWonConversationWithAnnouncementDelay( float conversationDelay )
{
	WaitEndFrame()                                                                                                            
	clGlobal.levelEnt.EndSignal( "AnnoucementPurge" )

	if ( conversationDelay > 0 )
		wait conversationDelay

	int winningTeam = GetNetWinningTeam()

	if ( winningTeam == -1 )
		return

	entity player = GetLocalClientPlayer()
	if ( player.GetTeam() == winningTeam )
		PlayConversationToLocalClient( "RoundWonAnnouncement" )
	else if ( winningTeam != TEAM_UNASSIGNED )
		PlayConversationToLocalClient( "RoundLostAnnouncement" )
}


void function UpdateScoreboardBadRepPresentMessage( entity playerEnt, bool newVal )
{
	if ( IsLobby() )
		return

	entity player = GetLocalClientPlayer()

	if ( newVal )
		player.cv.scoreboardBadRepPresentMessage.Show()
	else
		player.cv.scoreboardBadRepPresentMessage.Hide()
}


void function ClGameState_SetSwitchingSidesSubText( string value )
{
	file.switchingSidesSubText = value
}


void function ClGameState_SetPilotTitanStatusCallback( int functionref( entity, int ) func )
{
	file.pilotTitanStatusCallback = func
}


void function UpdateScoreBar( entity player )
{
	PerfStart( PerfIndexClient.ScoreBoardUpdate )
	file.gameModeScoreBarUpdateRules( file.gamestateRui )
	PerfEnd( PerfIndexClient.ScoreBoardUpdate )
}


void function AddCallback_OnScoreboardCreated( void functionref() func )
{
	Assert( !file.onScoreboardCreatedFuncs.contains( func ) )
	file.onScoreboardCreatedFuncs.append( func )
}


var function CreateNestedNetGraph( var rui )
{
	RuiDestroyNestedIfAlive( rui, "netGraphHandle" )
	file.netGraphRuiCreated = false

	var nestedGraphRui = RuiCreateNested( rui, "netGraphHandle", $"ui/gamestate_netgraph.rpak" )
	RuiTrackInt( nestedGraphRui, "netGraphFPS", null, RUI_TRACK_NETGRAPH_FPS )
	RuiTrackInt( nestedGraphRui, "netGraphAmortizedLatency", null, RUI_TRACK_NETGRAPH_SPING )
	RuiTrackInt( nestedGraphRui, "netGraphBandwidthIn", null, RUI_TRACK_NETGRAPH_BANDWIDTH_IN )
	RuiTrackInt( nestedGraphRui, "netGraphBandwidthOut", null, RUI_TRACK_NETGRAPH_BANDWIDTH_OUT )
	RuiTrackInt( nestedGraphRui, "netGraphPacketLossIn", null, RUI_TRACK_NETGRAPH_PACKETLOSS_IN )
	RuiTrackInt( nestedGraphRui, "netGraphPacketLossOut", null, RUI_TRACK_NETGRAPH_PACKETLOSS_OUT )
	RuiTrackInt( nestedGraphRui, "netGraphChokeIn", null, RUI_TRACK_NETGRAPH_PACKETCHOKE_IN )
	RuiTrackInt( nestedGraphRui, "netGraphChokeOut", null, RUI_TRACK_NETGRAPH_PACKETCHOKE_OUT )
	RuiTrackInt( nestedGraphRui, "netGraphDataBlockSize", null, RUI_TRACK_NETGRAPH_DATABLOCK_SIZE )
	RuiTrackInt( nestedGraphRui, "netGraphDataBlockPercentDone", null, RUI_TRACK_NETGRAPH_DATABLOCK_PERCENT_DONE )

	#if DEV
		RuiSetBool( nestedGraphRui, "isDEV", true )
	#endif

	RuiSetString( nestedGraphRui, "netGraphServerID", GetServerDebugId() )

	                                                                                      
	                                                                                             
	  	                                                
	      
	  	                                                

	file.nestedNetGraphRui  = nestedGraphRui
	file.netGraphRuiCreated = true
}


var function CLGameState_GetNetGraphRui()
{
	if ( file.netGraphRuiCreated == false )
		return null

	if ( file.isNetGraphEnabled == false )
		return null

	return file.nestedNetGraphRui
}


void function OnSettingsUpdated()
{
	printf( "OnSettingsUpdated()" )
	bool isNetGraphEnabled = IsNetGraphEnabled()

	if ( file.isNetGraphEnabled != isNetGraphEnabled )
	{
		RuiSetBool( file.gamestateRui, "isNetGraphEnabled", isNetGraphEnabled )

		if ( isNetGraphEnabled )
		{
			CreateNestedNetGraph( file.gamestateRui )
		}
		else
		{
			RuiDestroyNestedIfAlive( file.gamestateRui, "netGraphHandle" )
		}

		file.isNetGraphEnabled = isNetGraphEnabled
	}
}


void function ClGameState_SetHasScreenBorder( bool value )
{
	                                         
	var rui = ClGameState_GetRui()
	if ( IsValid( rui ) )
	{
		RuiSetBool( rui, "hasScreenBorder", value )
	}
}