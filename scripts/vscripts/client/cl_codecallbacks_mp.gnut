untyped

global function ClientCodeCallbacks_Init

global function ClientCodeCallback_HotDropImpactTimeChanged
global function ClientCodeCallback_DropShipJetWakeFxEnabledChanged
global function ClientCodeCallback_TurretPanelChanged
global function ClientCodeCallback_OutOfBoundsDeadTimeChanged
global function ClientCodeCallback_OnShieldHealthChanged
global function ClientCodeCallback_OnHardpointTerminalChanged
global function ClientCodeCallback_OnHardpointIDChanged
global function ClientCodeCallback_OnHardpointChanged
global function ClientCodeCallback_OnHardpointEntityChanged
global function ClientCodeCallback_OnCinematicEventFlagsChanged
global function ClientCodeCallback_OnNextTitanRespawnAvailableChanged
global function ClientCodeCallback_OnNextCoreChargeAvailableChanged
global function ClientCodeCallback_OnCoreChargeExpireTimeChanged
global function ClientCodeCallback_OnEntityCreation
global function ClientCodeCallback_OnDeath
global function ClientCodeCallback_OnEntityDestroy
global function ClientCodeCallback_OnPlayerLifeStateChanged
global function ClientCodeCallback_OnPlayerChangedTeam
global function AddCallback_OnPlayerLifeStateChanged
global function ClientCodeCallback_KillReplayStarted
global function ClientCodeCallback_VoicePackChanged
global function ClientCodeCallback_KillReplayEnded
global function ClientCodeCallback_SpecReplayStarted
global function ClientCodeCallback_SpecReplayEnded
global function ClientCodeCallback_SpectatorModeStarted
global function ClientCodeCallback_SpectatorModeEnded
global function ClientCodeCallback_SpectatorTargetChanged
global function ClientCodeCallback_SpectatorPlayerTagModeChanged
global function ClientCodeCallback_SpectatorVisibleEnemiesChanged
global function ClientCodeCallback_SpectatorUiStateChanged
global function ServerCallback_YouRespawned
global function ServerCallback_YouDied
global function ClientCodeCallback_SaveResumed
global function ClientCodeCallback_OnSelectedWeaponChanged
global function ClientCodeCallback_OnLinkedButtonPairPressed
global function AddCallback_OnPlayerChangedTeam
global function AddCallback_OnYouRespawned
global function AddCallback_OnYouDied
global function AddEntityDestroyedCallback
global function ClientCodeCallback_UIScriptResetComplete
global function ClientCodeCallback_PerformSelfReport

global int SPECTATOR_UI_STATE = 0

global const string PLAYER_CLASSNAME = "player"

void function ClientCodeCallbacks_Init()
{
    RegisterSignal( "HardpointStateChanged" )
    RegisterSignal( "PlayerAlive" )
    RegisterSignal( "PlayerDying" )
    RegisterSignal( "PlayerDead" )
    RegisterSignal( "PlayerDiscardBody" )
    RegisterSignal( "KillReplayStarted" )
    RegisterSignal( "KillReplayEnded" )
}

void function ClientCodeCallback_OnLinkedButtonPairPressed( int binding )
{
	Ping_Interrupt()
}


void function ClientCodeCallback_HotDropImpactTimeChanged( entity player )
{
}

void function ClientCodeCallback_DropShipJetWakeFxEnabledChanged( entity dropship )
{
	if ( !IsValid( dropship ) )
		return
	thread JetwakeFXChanged( dropship )
}

void function ClientCodeCallback_TurretPanelChanged( entity turret )
{
	if ( !IsValid( turret ) )
		return
	                                     
}

void function ClientCodeCallback_OutOfBoundsDeadTimeChanged( entity player )
{
	if ( !IsValid( player ) )
		return
	thread OutOfBoundsDeadTime_Changed( player )
}

void function ClientCodeCallback_OnShieldHealthChanged( entity ent )
{
	if ( !IsAlive( ent ) )
		return

	int shieldHealth = ent.GetShieldHealth()
	int maxShieldHealth = ent.GetShieldHealthMax()

	if ( (GetLocalViewPlayer() != ent) || ent.IsTitan() || ent.IsThirdPersonShoulderModeOn() )
	{
		if ( (shieldHealth == 0) && ent.lastShieldHealth && (maxShieldHealth > 0) )
		{
			PlayShieldBreakEffect( ent )                                                                                       
		}
		else if ( shieldHealth == maxShieldHealth && ent.lastShieldHealth != maxShieldHealth && maxShieldHealth > 0 )
		{
			PlayShieldActivateEffect( ent )
		}
	}

	ent.Signal( "ShieldChanged" )

	ent.lastShieldHealth = ent.GetShieldHealth()
}

void function ClientCodeCallback_OnHardpointTerminalChanged( entity hp )
{
}

void function ClientCodeCallback_OnHardpointIDChanged( entity hp )
{
	if ( clGlobal.onHardpointIDChangedCallback != null )
		clGlobal.onHardpointIDChangedCallback( hp )
}

void function ClientCodeCallback_OnHardpointChanged( entity hardpoint )
{
	if ( clGlobal.onHardpointChangedCallback != null )
		clGlobal.onHardpointChangedCallback( hardpoint )
}

void function ClientCodeCallback_OnHardpointEntityChanged( entity player )
{
	if ( clGlobal.onHardpointEntityChangedCallback != null )
		clGlobal.onHardpointEntityChangedCallback( player )
}

void function ClientCodeCallback_OnCinematicEventFlagsChanged( entity player, int oldFlags )
{
	if ( !IsValid( player ) )
		return
	                                                                                                 

	                                                                                          
	                                                                               
	if ( player == GetLocalViewPlayer() )
		UpdateMainHudFromCEFlags( player )

	int playerFlags = player.GetCinematicEventFlags()

	int changedFlag = playerFlags ^ oldFlags                                                    
	                                                                                                    

	foreach ( flag, callbackInfoArray in clGlobal.onCinematicEventFlagChangedCallback )
	{
		if ( !( changedFlag & flag ) )
			continue

		foreach ( callbackFunc in callbackInfoArray )
		{
			callbackFunc( player )
		}
	}
}

void function ClientCodeCallback_OnNextTitanRespawnAvailableChanged( entity player )
{
	if ( !IsValid( player ) )
		return

	UpdatePlayerStatusCounts()

	if ( player != GetLocalViewPlayer() )
		return

	                              
}

void function ClientCodeCallback_OnNextCoreChargeAvailableChanged( entity titansoul )
{
}

void function ClientCodeCallback_OnCoreChargeExpireTimeChanged( entity titansoul )
{
}

void function ClientCodeCallback_OnEntityCreation( entity ent )
{
	if ( !IsValid( ent ) )
		return

	if ( ent.IsPlayer() )
		ShEHI_OnPlayerCreated( ent )

	string className = expect string( ent.GetNetworkedClassName() )
	if ( IsLobby() )
	{
		if ( className == PLAYER_WAYPOINT_CLASSNAME || className == PLAYER_CLASSNAME )                                    
		{
			foreach ( callbackFunc in clGlobal.onCreateCallbacks[ className ] )
			{
				callbackFunc( ent )
			}
		}

		if ( ent.GetNetworkedClassName() != PLAYER_CLASSNAME )
			return

		if ( ent == GetLocalClientPlayer() )
			Lobby_AddLocalPlayer()
        return
	}

	PerfStart( PerfIndexClient.OnEntityCreation )

	string targetName = ent.GetTargetName()

	if ( !("creationCount" in ent.s) )
	{
		ent.s.creationCount <- 0
	}

	if ( className == "player" )
	{
		if ( GetLocalClientPlayer() == ent )
			ent.cv = level.clientVars

		if ( ent == GetLocalViewPlayer() )
			Init_PlayerScripts( ent )
	}

	ent.lastShieldHealth = ent.GetShieldHealth()

	ClInitHighlight( ent )

	if ( className in clGlobal.onCreateCallbacks )
	{
		foreach ( callbackFunc in clGlobal.onCreateCallbacks[ className ] )
		{
			callbackFunc( ent )
		}
	}

	if ( targetName in clGlobal.onTargetNameCreateCallbacks )
	{
		foreach ( callbackFunc in clGlobal.onTargetNameCreateCallbacks[ targetName ] )
		{
			callbackFunc( ent )
		}
	}

	if ( className in clGlobal.onDestroyedCallbacks )
		ent.SetDoDestroyCallback( true )

	if ( targetName in clGlobal.onDestroyedCallbacks && targetName != className )
		ent.SetDoDestroyCallback( true )

	ent.s.creationCount++

	PerfEnd( PerfIndexClient.OnEntityCreation )
}

void function ClientCodeCallback_OnDeath( entity ent )
{
	                                                                                     

	string className = expect string( ent.GetNetworkedClassName() )

	ent.Signal( "OnDeath" )

	if ( className in clGlobal.onDeathCallbacks )
	{
		foreach ( callbackFunc in clGlobal.onDeathCallbacks[ className ] )
		{
			callbackFunc( ent )
		}
	}

	__RunOnDeathOrDestroyCallbacks( ent, className, ent.GetTargetName() )
}

void function __RunOnDeathOrDestroyCallbacks( entity ent, string className, string targetName )
{
	                                 
	if ( ( "ranOnDeathOrDestroyCallbacks" in ent.s ) )
		return

	if ( className in clGlobal.onDeathOrDestroyCallbacks )
	{
		foreach ( callbackFunc in clGlobal.onDeathOrDestroyCallbacks[ className ] )
		{
			callbackFunc( ent )
		}
	}

	ent.s.ranOnDeathOrDestroyCallbacks <- true
}

void function AddEntityDestroyedCallback( entity ent, void functionref( entity ) callbackFunc )
{
	ent.e.onEntityDestroyedCallbacks.append( callbackFunc )

	                                                                           
	ent.SetDoDestroyCallback( true )
}

void function ClientCodeCallback_OnEntityDestroy( entity ent )
{
	                                                 
	                                   

	array<void functionref( entity ent )> myCallbacks = clone( ent.e.onEntityDestroyedCallbacks )
	foreach ( callbackFunc in myCallbacks )
	{
		callbackFunc( ent )
	}

	var untypedClassName = ent.GetNetworkedClassName()
	if ( untypedClassName == null )
		return

	string className = string( untypedClassName )

	if ( className in clGlobal.onDestroyedCallbacks )
	{
		foreach ( callbackFunc in clGlobal.onDestroyedCallbacks[ className ] )
		{
			callbackFunc( ent )
		}
	}

	__RunOnDeathOrDestroyCallbacks( ent, className, ent.GetTargetName() )
}

void function ClientCodeCallback_OnPlayerLifeStateChanged( entity player, int oldLifeState )
{
	                                                                                                     
	                                                 

	int newLifeState = player.GetLifeState()

	                                                 
	foreach ( callbackFunc in clGlobal.onPlayerLifeStateChangedCallbacks )
	{
		callbackFunc( player, oldLifeState, newLifeState )
	}

	  
	                       
	 
		                
			                                                                 
			                                       
				                                    
			                              
			     
		                
			                                                                 
			                                       
				                                    
			                              
			     
		               
			                                                                
			                             
			     
		                      
			                                                                       
			                                    
			     
	 
	  
}

array <void functionref(entity, int, int)> s_callbacksOnPlayerChangedTeam
void function AddCallback_OnPlayerChangedTeam( void functionref( entity player, int oldTeam, int newTeam ) func )
{
	s_callbacksOnPlayerChangedTeam.append( func )
}

void function ClientCodeCallback_OnPlayerChangedTeam( entity player, int oldTeam )
{
	                                                                                                       

	if ( !IsValid( player ) )
		return                                                                                              

	int newTeam = player.GetTeam()
	ShEHI_OnPlayerChangedTeam( player, oldTeam, newTeam )

	foreach ( void functionref(entity, int, int) callbackFunc in s_callbacksOnPlayerChangedTeam )
		callbackFunc( player, oldTeam, newTeam )
}

void function AddCallback_OnPlayerLifeStateChanged( void functionref( entity, int, int ) callbackFunc )
{
	clGlobal.onPlayerLifeStateChangedCallbacks.append( callbackFunc )
}

void function ClientCodeCallback_KillReplayStarted()
{
	clGlobal.levelEnt.Signal( "KillReplayStarted" )
	thread RunKillReplayStartedCallbacks()
}

void function ClientCodeCallback_VoicePackChanged( entity player )
{
}

void function RunKillReplayStartedCallbacks()
{
	WaitFrame()
	foreach ( callbackFunc in clGlobal.killReplayStartCallbacks )
	{
		callbackFunc()
	}
}

void function ClientCodeCallback_KillReplayEnded()
{
	clGlobal.levelEnt.Signal( "KillReplayEnded" )
	thread RunKillReplayEndedCallbacks()
}

void function ClientCodeCallback_SpecReplayStarted()
{
	printl( "Spectate replay started" )
}

void function ClientCodeCallback_SpecReplayEnded()
{
	printl( "Spectate replay ended" )
}

  
    
 
                  			                        
                  			                                                          
                			                                  
                       		                                                                            
                       		                                        
                			                                       
               				                                       
                 			               
              

                   
 
  


void function ClientCodeCallback_SpectatorModeStarted( entity player, int observerMode )
{
	                                                     
	clGlobal.levelEnt.Signal( "OnSpectatorMode" )
	clGlobal.isSpectating = true
	clGlobal.observerMode = observerMode

	entity observerTarget = player.GetObserverTarget()

	switch ( observerMode )
	{
		case OBS_MODE_IN_EYE:
			foreach ( callbackFunc in clGlobal.firstPersonSpectateStartCallbacks )
				callbackFunc( player, observerTarget )
			break

		case OBS_MODE_CHASE:
			foreach ( callbackFunc in clGlobal.thirdPersonSpectateStartCallbacks )
				callbackFunc( player, observerTarget )
			break

		case OBS_MODE_ROAMING:
			foreach ( callbackFunc in clGlobal.freeCamSpectateStartCallbacks )
				callbackFunc( player )
			break

		default:
			break
	}
}

void function ClientCodeCallback_SpectatorModeEnded( entity player, int oldObsMode, entity oldTarget )
{
	                                                 
	clGlobal.isSpectating = false

	switch ( oldObsMode )
	{
		case OBS_MODE_IN_EYE:
			foreach ( callbackFunc in clGlobal.firstPersonSpectateEndCallbacks )
				callbackFunc( player, oldTarget )
			break

		case OBS_MODE_CHASE:
			foreach ( callbackFunc in clGlobal.thirdPersonSpectateEndCallbacks )
				callbackFunc( player, oldTarget )
			break

		case OBS_MODE_ROAMING:
			foreach ( callbackFunc in clGlobal.freeCamSpectateEndCallbacks )
				callbackFunc( player )
			break

		default:
			break
	}
}

void function ClientCodeCallback_SpectatorTargetChanged( entity player, entity prevTarget, entity currTarget )
{
	                                                                                     

	foreach ( callbackFunc in clGlobal.onSpectatorTargetChangedCallbacks )
		callbackFunc( player, prevTarget, currTarget )
}

void function ClientCodeCallback_SpectatorPlayerTagModeChanged( entity player, int newMode )
{
	                                                                                      

	foreach ( callbackFunc in clGlobal.onSpectatorPlayerTagModeChangedCallbacks )
		callbackFunc( player, newMode )
}

void function ClientCodeCallback_SpectatorVisibleEnemiesChanged( bool enemiesVisible )
{
	foreach ( callbackFunc in clGlobal.onSpectatorMinimapEnemiesVisibleChangedCallbacks )
		callbackFunc( enemiesVisible )
}

void function ClientCodeCallback_SpectatorUiStateChanged( int newState )
{
	SPECTATOR_UI_STATE = newState

	foreach ( callbackFunc in clGlobal.onSpectatorUiStateChangedCallbacks )
		callbackFunc( newState )
}

void function RunKillReplayEndedCallbacks()
{
	foreach ( callbackFunc in clGlobal.killReplayEndCallbacks )
	{
		callbackFunc()
	}
}

array <void functionref()> s_callbacksOnYouRespawned
void function AddCallback_OnYouRespawned( void functionref() func )
{
	s_callbacksOnYouRespawned.append( func )
}

void function ServerCallback_YouRespawned()
{
	clGlobal.levelEnt.Signal( "LocalClientPlayerRespawned" )

	entity clientPlayer = GetLocalClientPlayer()
	StopLocal1PDeathSound()

	thread OnClientPlayerAlive( clientPlayer )

	clGlobal.lastKiller = null
	ClHighlight_YouRespawned()

	foreach ( void functionref() callbackFunc in s_callbacksOnYouRespawned )
		callbackFunc()
}

array <void functionref(entity, float, int, float)> s_callbacksOnYouDied
void function AddCallback_OnYouDied( void functionref( entity attacker, float healthFrac, int damageSourceId, float recentHealthDamage ) func )
{
	s_callbacksOnYouDied.append( func )
}

void function ServerCallback_YouDied( entity attacker, float healthFrac, int damageSourceId, float recentHealthDamage )
{
	printt( "ServerCallback_YouDied() healthFrac/recentDamage: " + healthFrac, recentHealthDamage )
	entity clientPlayer = GetLocalClientPlayer()
	PlayLocal1PDeathSound()

	if ( IsValid( attacker ) )
	{
		clGlobal.lastKiller = attacker
		clGlobal.lastKillerEntIndex = attacker.GetEntIndex()
		ClHighlight_YouDied( attacker )
		AttackerDisplayNameStruct names = GetAttackerDisplayNamesFromClassname( attacker, true )
		clGlobal.nameOfLastKiller.attackerName = names.attackerName
		clGlobal.nameOfLastKiller.attackerPetName = names.attackerPetName
		clGlobal.nameOfLastKiller.healthFrac = healthFrac
		clGlobal.nameOfLastKiller.damageSourceId = damageSourceId

		entity player = GetLocalClientPlayer()

		if ( player.e.recentDamageHistory.len() > 0 )
		{
			if ( attacker == player.e.recentDamageHistory[ 0 ].attacker )
				player.e.recentDamageHistory[ 0 ].attackerEHandle = attacker.GetEncodedEHandle()

			clGlobal.lastDamageHistory = player.e.recentDamageHistory[ 0 ]
		}
	}

	foreach( callbackFunc in s_callbacksOnYouDied )
		callbackFunc( attacker, healthFrac, damageSourceId, recentHealthDamage )

	thread OnClientPlayerDying( clientPlayer )
}

void function ClientCodeCallback_SaveResumed()
{
}

void function ClientCodeCallback_OnSelectedWeaponChanged( entity selectedWeapon )
{
	                                                
	foreach ( callbackFunc in clGlobal.onWeaponChangedCallbacks )
	{
		callbackFunc( selectedWeapon )
	}
}

void function ClientCodeCallback_UIScriptResetComplete()
{
	foreach ( callbackFunc in clGlobal.uiScriptResetCallbacks )
		callbackFunc()
}

void function ClientCodeCallback_PerformSelfReport(){

	int hardwareID = GetHardwareFromName(GetUnspoofedPlayerHardware())
	string uid  = GetPlayerUID()
	string name = GetPlayerName()
	string eaid = EADP_GetEadpIdFromFirstPartyID(uid, hardwareID)

	if(!IsLobby())
	{
		printf("ClientCallback_ReportPlayer: Self reporting %s uid=%s eaid=%s", name, uid, eaid)
		Remote_ServerCallFunction( "ClientCallback_ReportPlayer", hardwareID, uid, eaid, "#REPORT_PLAYER_REASON_OFFENSIVE" )
	}
	else
	{
		printf("ClientCallback_LobbyReportPlayer: Self reporting %s uid=%s eaid=%s", name, uid, eaid)
		Remote_ServerCallFunction( "ClientCallback_LobbyReportPlayer", hardwareID, uid, eaid, "#REPORT_PLAYER_REASON_OFFENSIVE" )
	}
}

