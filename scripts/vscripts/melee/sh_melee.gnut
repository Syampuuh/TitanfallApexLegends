  
                                                    
                                    
  

#if SERVER || CLIENT || UI
global function MeleeShared_Init

global function Loadout_MeleeSkin
global function MeleeSkin_GetMainWeaponClassname
global function MeleeSkin_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetMenuAnimSeq
global function MeleeSkin_GetKOSound
global function MeleeSkin_GetMenuModelRotation
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
global function MeleeSkin_GetStoreImage
global function MeleeSkin_GetItemInspectScale
global function MeleeSkin_GetItemInspectOffset
                                         
                                        
#endif


#if SERVER || CLIENT
global function DoesWeaponTriggerMeleeAttack
global function DoesWeaponClassTriggerMeleeAttack
global function IsWeaponClassMelee
global function GetPlayerMeleeAttackWeapon
global function AttackerCanStartMelee
global function IsValidMeleeAttackTarget
global function GetMeleeSkinByWeaponName
#endif

#if SERVER || CLIENT
global function CodeCallback_OnMeleePressed
global function CodeCallback_OnMeleeStartActivity
global function CodeCallback_OnMeleeHeld
global function CodeCallback_OnMeleeReleased
global function CodeCallback_IsValidMeleeAttackTarget
global function CodeCallback_OnMeleeAttackAnimEvent
#endif

#if SERVER
                                          
                                                       
#elseif CLIENT
global function ClientCodeCallback_ShowMeleePrompt
#endif


                
                
                
                
                
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_DURATION = 0.25

                                                                            
                                                           
                                        
                                                       



                       
                       
                       
                       
                       
struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap

	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap

	table<string, ItemFlavor> weaponClassNameMeleeSkinMap
}
FileStruct_LifetimeLevel& fileLevel



                         
                         
                         
                         
                         
#if SERVER || CLIENT || UI
void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
}
#endif


#if SERVER || CLIENT || UI
void function OnItemFlavorRegistered_Character( ItemFlavor characterClass )
{
	array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( characterClass, "meleeSkins", "flavor" )
	foreach ( ItemFlavor meleeSkin in meleeSkinList )
	{
		fileLevel.weaponClassNameMeleeSkinMap[MeleeSkin_GetOffhandWeaponClassname( meleeSkin )] <- meleeSkin
		#if SERVER || CLIENT
			                                                       
			                                                      
			PrecacheWeapon( MeleeSkin_GetMainWeaponClassname( meleeSkin ) )
			PrecacheWeapon( MeleeSkin_GetOffhandWeaponClassname( meleeSkin ) )
		#endif
	}

	MakeItemFlavorSet( meleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_meleeskin_for_" + ItemFlavor_GetGUIDString( characterClass ) )
	entry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( characterClass )
	entry.DEV_category = "character_meleeskins"
	entry.DEV_name = ItemFlavor_GetHumanReadableRef( characterClass ) + " Melee Skin"
	entry.defaultItemFlavor = meleeSkinList[0]
	entry.validItemFlavorList = meleeSkinList
	entry.isSlotLocked = bool function( EHI playerEHI ) {
		return !IsLobby()
	}
	entry.isActiveConditions = { [Loadout_Character()] = { [characterClass] = true, }, }
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	fileLevel.characterMeleeSkinLoadoutEntryMap[characterClass] <- entry

	#if SERVER && DEV
		                                                                                                                   
			                                                                       
		   
	#endif
}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetStoreImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "storeImage" )
}
#endif


#if SERVER || CLIENT || UI
float function MeleeSkin_GetItemInspectScale( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "itemInspectScale" )
}
#endif


#if SERVER || CLIENT || UI
vector function MeleeSkin_GetItemInspectOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "itemInspectOffset" )
}
#endif


                          
                          
                          
                          
                          
#if SERVER || CLIENT || UI
LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}
#endif


                            
                                                             
   
  	                                                               
  
  	                                                                            
   
        
  
  
                            
                                                            
   
  	                                                               
  
  	                                                                           
   
        


#if SERVER || CLIENT || UI
string function MeleeSkin_GetMainWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "mainWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetOffhandWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "offhandWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	string mainWeaponClassname = MeleeSkin_GetMainWeaponClassname( meleeSkin )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuAnimSeq( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "menuAnimSeq" )
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetKOSound( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "koSound" )
}
#endif


#if SERVER || CLIENT || UI
vector function MeleeSkin_GetMenuModelRotation( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( meleeSkin ), "menuMdlRot" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	Assert( GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" ) != "" )

	return GetItemFlavorByAsset( GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" ) )
}
#endif


#if SERVER || CLIENT
bool function DoesWeaponTriggerMeleeAttack( entity weapon )
{
	return (weapon.IsWeaponMelee() || weapon.GetWeaponSettingBool( eWeaponVar.attack_button_presses_melee ))
}
#endif


#if SERVER || CLIENT
bool function DoesWeaponClassTriggerMeleeAttack( string weaponName )
{
	return (IsWeaponClassMelee( weaponName ) || GetWeaponInfoFileKeyField_GlobalBool( weaponName, "attack_button_presses_melee" ))
}
#endif


#if SERVER || CLIENT
bool function IsWeaponClassMelee( string weaponName )
{
	                                              
	int fireMode = expect int(GetWeaponInfoFileKeyField_Global( weaponName, "fire_mode" ))
	return (fireMode == eWeaponFireMode.offhandMelee || fireMode == eWeaponFireMode.offhandMeleeHybrid)
}
#endif


#if SERVER || CLIENT
entity function GetPlayerMeleeAttackWeapon( entity player )
{
	entity meleeAttackWeapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )                                             
	if ( !IsValid( meleeAttackWeapon ) || !meleeAttackWeapon.IsWeaponMelee() )
	{
		meleeAttackWeapon = player.GetOffhandWeapon( OFFHAND_MELEE )                                  

		if ( !IsValid( meleeAttackWeapon ) )
			return null
	}

	Assert( meleeAttackWeapon.IsWeaponMelee() )

	return meleeAttackWeapon
}
#endif


#if SERVER || CLIENT
ItemFlavor ornull function GetMeleeSkinByWeaponName( string weaponName )
{
	if ( !(weaponName in fileLevel.weaponClassNameMeleeSkinMap) )
		return null

	return fileLevel.weaponClassNameMeleeSkinMap[weaponName]
}
#endif


#if SERVER || CLIENT
bool function IsValidMeleeAttackTarget( entity attacker, entity inputWeaponOrNull, entity attackWeapon, entity target )
{
	if ( attacker == target )
		return false

	if ( !IsValid( target ) )
		return false

	if ( target.IsBreakableGlass() )
		return true                

	if ( !target.CanBeMeleed() )
		return false

	#if SERVER                                                                               
		                                                                                                                               
			            
	#endif

	if ( !attacker.DoesShareRealms( target ) )
		return false

	if ( IsValid( attackWeapon ) && !attackWeapon.GetMeleeCanHitHumanSized() && IsHumanSized( target ) )
		return false

	if ( target.IsPhaseShifted() )
		return false

	if ( target.IsPlayer() || target.IsNPC() )
	{
		                                
		if ( target.ContextAction_IsMeleeExecutionTarget() )
			return false
	}

	return true
}
#endif



                   
                   
                   
                   
                   
#if SERVER || CLIENT
entity function GetMeleeAttackLungeTarget( entity attacker, entity meleeAttackWeapon )
{
	return PlayerMelee_LungeConeTrace( attacker, meleeAttackWeapon, SHARED_CB_IS_VALID_MELEE_ATTACK_TARGET )
}
#endif


#if SERVER || CLIENT
bool function AttackerCanStartMelee( entity attacker, entity inputWeaponOrNull, entity attackWeapon )
{
	Assert( attacker.IsPlayer() )

	if ( !IsAlive( attacker ) )
		return false

	if ( attacker.PlayerMelee_GetState() != PLAYER_MELEE_STATE_NONE )
		return false

	if ( attacker.IsWeaponSlotDisabled( eActiveInventorySlot.mainHand ) )                   
		return false

	                                               
	  	            

	if ( attacker.IsPhaseShifted() )
		return false

	if ( attacker.Lunge_IsActive() )
		return false

	if ( IsValid( inputWeaponOrNull ) && !GetCurrentPlaylistVarBool( "quick_melee_enabled", true )
	&& inputWeaponOrNull == attacker.GetOffhandWeapon( OFFHAND_MELEE ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
bool function CodeCallback_IsValidMeleeAttackTarget( entity attacker, entity target )
{
	entity meleeInputWeapon  = null                                                                      
	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !IsValidMeleeAttackTarget( attacker, meleeInputWeapon, meleeAttackWeapon, target ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleePressed( entity attacker, entity meleeInputWeapon )
{
	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !AttackerCanStartMelee( attacker, meleeInputWeapon, meleeAttackWeapon ) )
		return

	attacker.ClearOffhand( eActiveInventorySlot.mainHand )
	attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )

	                         
	                                            
	{
		bool isShadowSquad = IsPlayerShadowZombie( attacker )

		bool doorLungeEnabled = !isShadowSquad && GetCurrentPlaylistVarBool( "blockable_door_can_be_hurt_by_special_kick", true )
		entity lungeTarget    = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		vector eyeTraceHitPos
		if ( doorLungeEnabled && !IsValid( lungeTarget ) )
		{
			TraceResults eyeTrace = TraceLine(
				attacker.EyePosition(), attacker.EyePosition() + 150.0 * attacker.GetViewVector(),
				[ attacker ], TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE
			)
			lungeTarget = eyeTrace.hitEnt
			eyeTraceHitPos = eyeTrace.endPos

                
                                
    
                         
                                                                                       
                                                              
     
                                 
                                    
    
      
		}

                  
                                                                                                                                                             
       
		if ( doorLungeEnabled && IsValid( lungeTarget ) && IsDoor( lungeTarget ) )
        
		{
			meleeAttackWeapon.AddMod( "proto_door_kick" )

			if ( !meleeAttackWeapon.HasMod( "melee_crypto_drone" ) && !meleeAttackWeapon.HasMod( "melee_valk_helmet" ) )
			{
				meleeAttackWeapon.AddMod( "proto_door_kick_impact_table" )
			}

			attacker.Lunge_SetTargetPosition( <eyeTraceHitPos.x, eyeTraceHitPos.y, lungeTarget.GetWorldSpaceCenter().z - 52 > )                             
			attacker.Lunge_SetSmoothTime( 0.7 )
			attacker.Lunge_EnableFlying()
		}
		else if ( meleeAttackWeapon.HasMod( "proto_door_kick" ) )
		{
			meleeAttackWeapon.RemoveMod( "proto_door_kick" )
			
			if ( meleeAttackWeapon.HasMod( "proto_door_kick_impact_table" ) )
				meleeAttackWeapon.RemoveMod( "proto_door_kick_impact_table" )
		}
	}

	#if SERVER
		                                                                        
	#endif

	attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeStartActivity( entity attacker, entity meleeAttackWeapon )
{
	if ( GetBugReproNum() == 53982 )
		Assert( attacker.PlayerMelee_IsAttackActive() )
	else if ( !attacker.PlayerMelee_IsAttackActive() )
		return                                        

	const float STUN_EFFECT_CUTOFF = 0.05
	float movestunEffect = StatusEffect_GetSeverity( attacker, eStatusEffect.move_slow )
	bool movestunBlocked = (movestunEffect > STUN_EFFECT_CUTOFF)
	if ( !movestunBlocked )
	{
		entity lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		if ( IsValid( lungeTarget ) )
		{
			bool lungeStartWasSuccessful = attacker.Lunge_SetTargetEntity( lungeTarget )

			if ( lungeStartWasSuccessful && attacker.IsOnGround() )
				attacker.Lunge_LockPitch( true )
		}
	}

	                                         
                           
            
                               
        
       
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeHeld( entity player, entity weapon )
{
	  
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeReleased( entity player, entity weapon )
{
	  
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeAttackAnimEvent( entity attacker, entity meleeAttackWeapon )
{
	Assert( IsValid( attacker ) )

	if ( !attacker.PlayerMelee_IsAttackActive() )
		return                         

	Assert( attacker.PlayerMelee_GetState() == PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
	Assert( !attacker.PlayerMelee_GetAttackHitEntity() )

	#if SERVER
		                                                                                                                                             
	#endif

	float attackRange = meleeAttackWeapon.GetMeleeAttackRange()

	               
	table legacyTraceResults = PlayerMelee_AttackTrace( attacker, attackRange, (bool function( entity attacker, entity target ) : (meleeAttackWeapon) {
		return IsValidMeleeAttackTarget( attacker, null, meleeAttackWeapon, target )
	}) )

	entity target                         = expect entity(legacyTraceResults.ent)
	vector endPosition                    = expect vector(legacyTraceResults.position)
	int surfaceProp                       = expect int(legacyTraceResults.surfaceProp)
	int staticPropID                      = expect int(legacyTraceResults.staticPropID)
	int impactEffectFlags                 = expect int(legacyTraceResults.impactEffectFlags)
	int codeDamageType                    = expect int(legacyTraceResults.damageType)
	vector startPosition                  = expect vector(legacyTraceResults.startPosition)
	bool shouldHitForward                 = expect bool(legacyTraceResults.hitWithFlatTrace)
	vector hitNormal                      = Normalize( startPosition - endPosition )
	int meleeAttackWeaponImpactTableIndex = meleeAttackWeapon.GetImpactTableIndex()

	#if SERVER
		                                                           
		                                                                                                                           
		                                                                                                       
		                                                                       
	#endif

	if ( IsValid( target ) )
	{
		                                                                       
		                          

		                                
		if ( !attacker.PlayerMelee_IsAttackActive() )
			return

		              
		attacker.PlayerMelee_SetAttackHitEntity( target )
		if ( !target.IsWorld() )
			attacker.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

		                                   
		if ( target.IsBreakableGlass() )
		{
			#if SERVER
				                                     
			#endif              
		}
		else
		{
			                         
			bool targetIsEnemy  = IsEnemyTeam( attacker.GetTeam(), target.GetTeam() )
			float severityScale = (targetIsEnemy ? MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY : MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY)
			meleeAttackWeapon.DoMeleeHitConfirmation( severityScale )

			                       
			#if SERVER
				                                                                                     
				                                                               
				                                  

				                                                     
				 
					                                 
					                                                
					                       
				 

				                                                                                                               
				                                    
				                               
				  	                                               

				                                                                            
				                                                                                          

				                     
					                                                      
					                            
					                                
					                      
					                    
					                          
				 

				                                                                  
			#endif
		}
	}
	else
	{
		                                                                     
		                                                                      
		                                                                  
		                            

		vector impactEffectTraceBegin        = meleeAttackWeapon.GetAttackPosition()
		vector impactEffectTraceEnd          = impactEffectTraceBegin + (attackRange * meleeAttackWeapon.GetAttackDirection())
		TraceResults impactEffectTraceResult = TraceLineHighDetail( impactEffectTraceBegin, impactEffectTraceEnd, attacker, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE, attacker )
		if ( impactEffectTraceResult.hitEnt )
		{
			target = impactEffectTraceResult.hitEnt

			                                                                                                                
			if ( target.IsPlayer() && IsEnemyTeam( attacker.GetTeam(), target.GetTeam() ) )
				return

			startPosition = impactEffectTraceBegin
			endPosition = impactEffectTraceResult.endPos
			hitNormal = impactEffectTraceResult.surfaceNormal
			surfaceProp = impactEffectTraceResult.surfaceProp
			staticPropID = impactEffectTraceResult.staticPropID
			#if SERVER
				                                                                                                             
			#endif
		}
	}

	                                                                         
	                                                                       
	                                                                      
	                                       

	if ( IsValid( target ) )
	{
		attacker.DispatchImpactEffects( target, startPosition, endPosition, hitNormal, surfaceProp, staticPropID, codeDamageType, meleeAttackWeaponImpactTableIndex, attacker, impactEffectFlags )
	}

	#if SERVER
		                                                                                                      
		 
			                     
				                                                      
				                            
				                                
				                     
				                   
			 
			                                                                                                                      
		 
	#endif

	                                                      
	if ( IsValid( target ) )
	{
		float  knockbackMagnitude	= meleeAttackWeapon.GetWeaponSettingFloat( eWeaponVar.melee_knockback_velocity_magnitude )
		vector lookDirection		= attacker.GetViewForward()
		if(shouldHitForward )
		{
			lookDirection.z = 0
			lookDirection = Normalize(lookDirection)
		}
		vector pushBackVelocity		= knockbackMagnitude * lookDirection

		if ( target.CanBeMeleed() )
		{
			if ( target.IsPlayer() || target.IsNPC() || target.IsPlayerDecoy() )
			{
				vector targetDirection = target.GetWorldSpaceCenter() - attacker.GetWorldSpaceCenter()
				if ( DotProduct( lookDirection, targetDirection ) < 0 )
				{
					pushBackVelocity = -pushBackVelocity
				}

				if ( target.IsPlayer() )
				{
					if ( LengthSqr( pushBackVelocity ) > 0.0 )
					{
						target.KnockBack( pushBackVelocity, MELEE_KNOCKBACK_DURATION )
					}
				}
#if SERVER
				    
				 
					                                                     
					                                                   
				 
#endif
			}
		}

		                                                                     
		attacker.Lunge_ClearTarget()

		vector attackerKnockBackVelocity = -pushBackVelocity
		const float GroundOffset = 10
		bool isAttackingGround           = (endPosition.z - GroundOffset) <= attacker.GetOrigin().z

		attackerKnockBackVelocity.z = 0.0
		attackerKnockBackVelocity *= 0.5
		float currentVelDotInKnockbackDir = -1.0
		if ( LengthSqr( attackerKnockBackVelocity ) > 0.0 && !isAttackingGround )
		{
			vector currentVel = attacker.GetVelocity()
			currentVelDotInKnockbackDir = DotProduct(Normalize(attackerKnockBackVelocity), Normalize(currentVel))
			if( currentVelDotInKnockbackDir <= 0.0  )                                        
			{
				attacker.KnockBack( attackerKnockBackVelocity, 0.25 )
			}
		}


		#if DEV
			const bool DEBUG_MELEE_KNOCKBACK = false
			if ( DEBUG_MELEE_KNOCKBACK )
			{
				DebugDrawSphere( <endPosition.x, endPosition.y, endPosition.z - GroundOffset>, 2, <0, 100, 255>, false, 5.0 )
				DebugDrawSphere( endPosition, 3, COLOR_RED, false, 5.0 )
				DebugDrawSphere( attacker.GetOrigin(), 4, COLOR_GREEN, false, 5.0 )
				DebugDrawArrow( attacker.GetOrigin(), endPosition, 3, <100, 255, 0>, false, 5.0 )

				if( currentVelDotInKnockbackDir <= 0.0 )
				{
					printt("Melee knockback YES")
				}
				else
				{
					printt("Melee knockback NO - would have sped us up")
				}

				printt( "Melee knockback isAttackingGround: " + isAttackingGround + " endPosition.z: " + endPosition.z + " attackerOrigin.z: " + attacker.GetOrigin().z )
			}
		#endif

		attacker.GrappleDetach()
	}
}
#endif


#if SERVER
                                                         
 
	      
 
#endif


#if SERVER
                                                                                   
 
	      
 
#endif


#if CLIENT
bool function ClientCodeCallback_ShowMeleePrompt( entity player )
{
	return false
}
#endif


                       
                       
                       
                       
                       
#if SERVER && DEV
                                                                                      
 
	                
		      
	                         
		      

	                                       
	 
		                                                                                                          
		      
	 

	                                                   
 
#endif          


