                                                            


global function ShStats_LevelInit

#if SERVER || CLIENT || UI
global function GetCurrentStatSeasonRefOrNull
global function GetCurrentStatRankedPeriodRefOrNullByType
global function CurrentModeSupportsCustomStats
global function CurrentModeIsSurvival
#endif

#if SERVER
                                                              
                                                 
                                           
                                      
                                    
                                              
                                              
                       
                                                    
      
                                         
                                    
                                  
                                         
                                                   
                                 
                                             
                                                
                                                                    
                                             

                                      
                                     
                                        

                                         
                                                 
                                     
                                            
                                               
                                                    
                                                     
                                               
                                                          
                                                          
                                                                  
                                                                  
                                        
                                         
                                                     

                                               

           
                                         

                                              

                                               
                                             
                                                    

                                            

                                                     
                      
                                                       
      

                                                      

             
                                                     
                                                        

          
                                              

            
                                                       
                                                             

           
                                                                           
                                                     
                                                           

       
                                                  
                                            
                                                    

         
                                                   
                                                   

         
                                           
                                        
                                                                        

             
                                          
                                              
                                                      

          
                                                       
                                                         
                                                       

          
                                                   
                                                      
                                                      

         
                                                  
                                                  
                                                   

            
                                                 
                                               

         
                                         
                                       
                                             

           
                                         
                                             
                                                

          
                                             
                                                
                                             

       
                                               
                                         
                                                   

       
                                                      
                                                
                                                     

       
                                                  
                                     
                                              

      
                                          
                                            
                                            

             
                                                       
                                                          
                                                        

                 
                                                         
                                                            
                                                        
      

               
                                                   
                                                 
                                               
                                                   
      


         
                                              
                                             

                     
                                                                   
                           

                                 
                                              

                                          

                        
                                                     
                                                         
                                                             
                                                         
                                                        
                                                   
                                                           
                                                          
                              

                                                    
#endif         


                      
                      
                      
                      
                      

global const array<string> STATS_ALTERNATE_MODE_REFS = [
                       
"arenas",
      
"winter_express",
"shadowroyale",
                        
"control",
                              
                        
          
      
                    
       
      
]

global const array<string> STATS_MATCH_TYPES = [
"survival",                                        
                       
"arenas",
      
"winter_express",
"shadowroyale",
                        
"control",
                              
                        
          
      
                    
       
      
]

#if SERVER || CLIENT || UI
global struct CareerStats
{
	StatTemplate& account_level
	StatTemplate& total_legendary_items
	StatTemplate& num_characters_with_banners_once_filled
	StatTemplate& respawn_dev
	StatTemplate& ea_access_member
	StatTemplate& fashionista
	StatTemplate& weapons_with_legendary_skin
	StatTemplate& well_rounded
	StatTemplate& times_fully_kitted
	StatTemplate& distance_kill
	StatTemplate& placements_win_with_friends
	StatTemplate& placements_win_with_no_witnessess
	StatTemplate& placements_win_with_min_executions_per_person
	StatTemplate& team_work_kill_count
	StatTemplate& max_placement_win_streak_with_premade_squad
	StatTemplate& looted_all_launch_loot_once
	StatTemplate& master_of_all
	StatTemplate& starter_pack
	StatTemplate& founder_pack
	StatTemplate& twitch_pack
	StatTemplate& daily_challenges_completed
	StatTemplate& challenge_xp_earned
	StatTemplate& challenge_stars_earned

	                                                    
	                                                                          
	                                                                        
	StatTemplate& looted_all_nongold_weapons_in_1_match

	StatTemplate& looted_epic_item
	StatTemplate& looted_legendary_item
	StatTemplate& looted_legendary_helmet
	StatTemplate& looted_legendary_armor

	StatTemplate& thanks
	StatTemplate& dooms
	StatTemplate& kills
	StatTemplate& times_got_doomed
	StatTemplate& deaths
	StatTemplate& assists
	StatTemplate& kills_or_assists
	                                   
	                                        
	StatTemplate& times_respawned_ally
	StatTemplate& winning_kills
	StatTemplate& kills_while_killleader
	StatTemplate& kills_max_single_game
	StatTemplate& damage_done
	StatTemplate& damage_done_midair
	StatTemplate& damage_taken
	StatTemplate& shots
	StatTemplate& hits
	StatTemplate& headshots
	StatTemplate& executions
	StatTemplate& revived_ally
	StatTemplate& respawned_ally


	              
	StatTemplate& damage_done_to_prowler_on_storm_point
	StatTemplate& damage_done_to_spider_on_storm_point

	StatTemplate& modes_games_played
	StatTemplate& modes_damage_done
	StatTemplate& modes_placements_win
	StatTemplate& modes_kills
	StatTemplate& modes_assists
	StatTemplate& modes_kills_or_assists
	StatTemplate& modes_deaths
	StatTemplate& modes_dooms
	StatTemplate& modes_executions
	StatTemplate& modes_headshots
	                        
	StatTemplate& modes_kills_max_single_game
	StatTemplate& modes_damage_done_max_single_game
	StatTemplate& modes_win_streak_current
	StatTemplate& modes_win_streak_longest
	StatTemplate& modes_revived_ally

	StatTemplate& modes_season_games_played
	StatTemplate& modes_season_damage_done
	StatTemplate& modes_season_placements_win
	StatTemplate& modes_season_kills
	StatTemplate& modes_season_assists
	StatTemplate& modes_season_deaths
	StatTemplate& modes_season_dooms
	                        
	StatTemplate& modes_season_kills_max_single_game
	StatTemplate& modes_season_damage_done_max_single_game
	StatTemplate& modes_season_win_streak_current
	StatTemplate& modes_season_win_streak_longest
	StatTemplate& modes_season_revived_ally

	StatTemplate& modes_character_games_played
	StatTemplate& modes_character_damage_done
	StatTemplate& modes_character_kills
	StatTemplate& modes_character_dooms
	StatTemplate& modes_character_deaths
	StatTemplate& modes_character_placements_win
	                                                  
	                                                          
	StatTemplate& modes_weapon_damage_done
	StatTemplate& modes_weapon_dooms
	StatTemplate& modes_weaponcategory_damage_done
	StatTemplate& modes_weaponcategory_dooms

	StatTemplate& all_modes_games_played
	StatTemplate& all_modes_damage_done
	StatTemplate& all_modes_placements_win
	StatTemplate& all_modes_kills
	StatTemplate& all_modes_assists
	StatTemplate& all_modes_kills_or_assists
	StatTemplate& all_modes_deaths
	StatTemplate& all_modes_dooms
	StatTemplate& all_modes_executions
	StatTemplate& all_modes_headshots
	StatTemplate& all_modes_kills_max_single_game
	StatTemplate& all_modes_damage_done_max_single_game
	StatTemplate& all_modes_revived_ally
	StatTemplate& all_modes_weaponcategory_damage_done
	StatTemplate& all_modes_weaponcategory_dooms
	StatTemplate& all_modes_character_games_played
	StatTemplate& all_modes_character_damage_done
	StatTemplate& all_modes_character_kills
	StatTemplate& all_modes_character_dooms
	StatTemplate& all_modes_character_placements_win

                        
		StatTemplate& arenas_badge_perfect_game                                                     
		StatTemplate& arenas_badge_no_down_win                                             

		StatTemplate& arenas_cash_stations_captured
		StatTemplate& arenas_rounds_won

		                                                                                                                                 
		                                                                                                                                 
		StatTemplate& arenas_character_win_streak_current_new
		StatTemplate& arenas_character_win_streak_longest_new
		StatTemplate& arenas_character_kills_max_single_game
		StatTemplate& arenas_character_damage_done_max_single_game
		StatTemplate& arenas_character_rounds_won

		StatTemplate& arenas_skills_purchased
		StatTemplate& arenas_ordnance_purchased
		StatTemplate& arenas_heals_purchased
		StatTemplate& arenas_weapons_upgraded
       

	                 
	StatTemplate& games_played_any_mode
	StatTemplate& character_games_played_any_mode

	                                
	StatTemplate& ring_closings_survived
	StatTemplate& br_top_10_or_arena_win
	StatTemplate& melee_damage_any_mode
	StatTemplate& kills_with_red_weapons_any_mode
	StatTemplate& damage_with_red_weapons_any_mode
	StatTemplate& kills_or_assists_any_mode
	              
	StatTemplate& self_revives
	StatTemplate& executions_any_mode
	StatTemplate& health_restored_any_mode
	StatTemplate& weaponcategory_damage_done_any_mode
	StatTemplate& damage_done_any_mode
	StatTemplate& top_3_with_3_kill_ko_assist
	StatTemplate& headshots_any_mode
	              
	StatTemplate& damage_done_first_ring_round_br
	StatTemplate& damage_done_hipfire_any_mode
	StatTemplate& damage_done_ordnance_any_mode
	StatTemplate& evoarmor_evolves_to_red
	StatTemplate& arenas_win_with_5_kill_ko_assist
	              
                         
                                                                                                                                                                                        
       
	                          

	StatTemplate& games_played
	StatTemplate& placements_win
	StatTemplate& placements_win_with_squad_alive
	StatTemplate& placements_top_3
	StatTemplate& placements_top_5
	StatTemplate& placements_top_10
	StatTemplate& win_streak_current
	StatTemplate& win_streak_longest
	StatTemplate& win_streak_account_badge_current
	StatTemplate& win_streak_account_badge_longest
	StatTemplate& neutral_airdrops_looted
	                                 
	StatTemplate& weapon_kills
	StatTemplate& weapon_dooms
	StatTemplate& weapon_damage_done
	StatTemplate& weapon_shots
	StatTemplate& weapon_hits
	StatTemplate& weapon_headshots
	StatTemplate& character_kills
	StatTemplate& character_dooms
	StatTemplate& character_deaths
	StatTemplate& character_winning_kills
	StatTemplate& character_kills_while_killleader
	StatTemplate& character_damage_done
	StatTemplate& character_damage_done_any_mode
	StatTemplate& character_damage_done_max_single_game
	StatTemplate& character_shots
	StatTemplate& character_hits
	StatTemplate& character_headshots
	StatTemplate& character_executions
	StatTemplate& character_revived_ally
	StatTemplate& character_games_played
	StatTemplate& character_games_with_5_kills
	StatTemplate& character_games_with_20_kills
	StatTemplate& character_most_squad_squad_kills_in_1_game
	StatTemplate& character_placements_win
	StatTemplate& character_placements_win_with_squad_alive
	StatTemplate& character_placements_top_3
	StatTemplate& character_placements_win_with_friends
	StatTemplate& character_placements_win_as_jumpmaster
	StatTemplate& character_placements_win_as_killleader
	StatTemplate& character_placements_win_as_killleader_and_champion
	StatTemplate& character_placements_win_flawless_1
	StatTemplate& character_placements_win_flawless_2
	StatTemplate& character_placements_win_with_5_headshots

	StatTemplate& character_won_last_game
	StatTemplate& character_hot_streaks
	StatTemplate& character_games_with_respawning_both_teammates
	StatTemplate& character_rapid_eliminations
	StatTemplate& character_reinforcement_recalls
	StatTemplate& character_banner_once_filled

	StatTemplate& character_most_wins_in_24h
	StatTemplate& character_neutral_airdrops_looted
	                                           
	StatTemplate& character_weapon_kills
	StatTemplate& character_weapon_dooms
	StatTemplate& character_weapon_damage_done
	StatTemplate& character_weapon_shots
	StatTemplate& character_weapon_hits
	StatTemplate& character_weapon_headshots
	StatTemplate& character_weaponcategory_kills
	StatTemplate& character_weaponcategory_dooms
	StatTemplate& character_weaponcategory_damage_done
	StatTemplate& character_weaponcategory_shots
	StatTemplate& character_weaponcategory_hits
	StatTemplate& character_weaponcategory_headshots

	StatTemplate& weaponcategory_kills
	StatTemplate& weaponcategory_dooms
	StatTemplate& weaponcategory_damage_done
	StatTemplate& weaponcategory_headshots

	StatTemplate& evoarmor_evolves
	StatTemplate& evoarmor_evolves_to_purple

	StatTemplate& voidring_damage_prevented

	          
	StatTemplate& crafting_items_crafted
	StatTemplate& crafting_materials_collected
	StatTemplate& crafting_harvester_used_any_mode                            
	               
	StatTemplate& times_jumpmaster
	StatTemplate& times_jumpmaster_post_fix                                                                       
	StatTemplate& valentines_revives_and_respawns

	                                   
	StatTemplate& recon_passive_beacons_scanned

	            
	StatTemplate& bangalore_passive_distance
	StatTemplate& bangalore_tactical_smoke_hits
	StatTemplate& bangalore_ultimate_damage_done

	             
	StatTemplate& bloodhound_tactical_enemies_detected
	StatTemplate& bloodhound_tactical_traps_detected
	StatTemplate& bloodhound_ultimate_kills_while_active

	          
	StatTemplate& caustic_tactical_barrels_traps_detonated
	StatTemplate& caustic_gas_damage_dealt
	StatTemplate& caustic_passive_enemies_in_gas_killed

	         
	StatTemplate& crypto_passive_enemies_scanned
	StatTemplate& crypto_ultimate_shield_damage
	StatTemplate& crypto_ultimate_traps_destroyed

	            
	StatTemplate& gibraltar_tactical_bubble_enemy_damage_absorbed
	StatTemplate& gibraltar_ultimate_bombardment_kills
	StatTemplate& gibraltar_passive_gunshield_enemy_damage_absorbed

	           
	StatTemplate& lifeline_tactical_drone_healing_given
	StatTemplate& lifeline_ultimate_droppod_items_grabbed_by_allies
	StatTemplate& lifeline_passive_enemy_damage_absorbed
	StatTemplate& lifeline_passive_allies_revived

	       
	StatTemplate& loba_tactical_meters_teleported
	StatTemplate& loba_ultimate_loot_taken_by_allies
	StatTemplate& loba_passive_loot_pinged_through_walls

	         
	StatTemplate& mirage_decoys_created
	StatTemplate& mirage_successful_bamboozles
	StatTemplate& mirage_successful_revives

	         
	StatTemplate& octane_stim_distance_traveled
	StatTemplate& octane_jump_pad_allies_launched
	StatTemplate& octane_passive_health_regenerated

	             
	StatTemplate& pathfinder_tactical_meters_moved_by_grapple
	StatTemplate& pathfinder_ultimate_ziplines_used_by_allies
	StatTemplate& pathfinder_passive_beacons_scanned

	          
	StatTemplate& rampart_tactical_bullets_amped
	StatTemplate& rampart_tactical_damage_blocked
	StatTemplate& rampart_ultimate_bullets_fired

	           
	StatTemplate& revenant_silenced_target
	StatTemplate& revenant_silenced_target_knockdowns
	StatTemplate& revenant_death_totem_activates

	          
	StatTemplate& wattson_breaches_detected
	StatTemplate& wattson_friendly_shields_charged
	StatTemplate& wattson_enemy_ordnance_intercepted

	         
	StatTemplate& wraith_ultimate_phase_tunnel_ally_uses
	StatTemplate& wraith_passive_voices_heard
	StatTemplate& wraith_tactical_time_spent_in_phase

	          
	StatTemplate& horizon_hard_landings_avoided
	StatTemplate& horizon_teammates_gravity_lifted
	StatTemplate& horizon_blackhole_damage_done

	       
	StatTemplate& fuse_grenade_distance_thrown
	StatTemplate& fuse_cluster_bomb_hits
	StatTemplate& fuse_motherlode_enemies_captured

	       
	StatTemplate& valk_distance_travelled_passive
	StatTemplate& valk_enemies_hit_tactical
	StatTemplate& valk_teammates_carried_ult

	       
	StatTemplate& seer_enemy_heartbeats_heard
	StatTemplate& seer_focus_of_attention_hits
	StatTemplate& seer_exhibit_enemies_inside

	      
	StatTemplate& ash_enemies_marked
	StatTemplate& ash_enemies_tethered
	StatTemplate& ash_players_portaled

	StatTemplate& maggie_riot_drill_drill_distance
	StatTemplate& maggie_wrecking_ball_boost_distance
	StatTemplate& maggie_warlords_ire_highlight_time

                  
		StatTemplate& newcastle_revive_distance
		StatTemplate& newcastle_mobile_shield_damage
		StatTemplate& newcastle_allies_rescued
       

                
		StatTemplate& vantage_tactical_distance
		StatTemplate& vantage_ultimate_damage
		StatTemplate& vantage_passive_enemies_pinged
		StatTemplate& vantage_ultimate_marked_hits                     
       


	          
	StatTemplate& season_battlepass_level
	StatTemplate& season_character_damage_done
	StatTemplate& season_character_kills
	StatTemplate& season_character_placements_win
	StatTemplate& season_character_placements_top_5
	StatTemplate& season_kills_with_7_characters
	StatTemplate& season_placements_wins_with_7_characters
	StatTemplate& season_placements_top_5_with_7_characters
	StatTemplate& season_battlepass_bonus_xp_with_7_characters
	StatTemplate& season_games_played
	StatTemplate& season_damage_done
	StatTemplate& season_character_damage_done_max_single_game
	StatTemplate& season_kills
	StatTemplate& season_deaths
	StatTemplate& season_dooms
	StatTemplate& season_assists
	StatTemplate& season_team_work_kill_count
	StatTemplate& season_revived_ally
	StatTemplate& season_times_respawned_ally
	StatTemplate& season_win_streak_current
	StatTemplate& season_win_streak_longest
	StatTemplate& season_kills_max_single_game
	StatTemplate& season_placements_win

	        
	StatTemplate& elite_badge_unlock
	StatTemplate& elite_888_badge_unlock
	StatTemplate& character_elite_game_wins
	StatTemplate& character_elite_game_8kill_wins
	StatTemplate& season_elite_current_streak
	StatTemplate& season_elite_max_streak
	StatTemplate& season_character_elite_game_wins
	StatTemplate& season_character_elite_games_played
	StatTemplate& season_character_elite_kills
	  

	       
	StatTemplate& zone_kills
	StatTemplate& zone_damage_done
	StatTemplate& zone_dooms
	StatTemplate& zone_executions
	StatTemplate& zone_landings
	StatTemplate& zone_loot_bins
	StatTemplate& loot_bins
	StatTemplate& opponents_outlived
	StatTemplate& survival_time_seconds

	         
	StatTemplate& rankedperiod_games_played
	StatTemplate& rankedperiod_placements_win
	StatTemplate& rankedperiod_placements_top_5
	StatTemplate& rankedperiod_placements_top_10
	StatTemplate& rankedperiod_damage_done
	StatTemplate& rankedperiod_kills
	StatTemplate& rankedperiod_deaths
	StatTemplate& rankedperiod_kills_max_single_game
	StatTemplate& rankedperiod_dooms
	StatTemplate& rankedperiod_assists
	StatTemplate& rankedperiod_win_streak_current
	StatTemplate& rankedperiod_win_streak_longest
	StatTemplate& rankedperiod_revived_ally
	StatTemplate& rankedperiod_times_respawned_ally
	StatTemplate& rankedperiod_current_rank_score
	StatTemplate& rankedperiod_gained_rank_score_only
	StatTemplate& rankedperiod_badge_award_level

	StatTemplate& rankedperiod_character_damage_done_max_single_game

                        
		                
		StatTemplate& arenas_rankedperiod_games_played
		StatTemplate& arenas_rankedperiod_current_rank_score
		StatTemplate& arenas_rankedperiod_gained_rank_score_only
		StatTemplate& arenas_rankedperiod_badge_award_level

		                        
		StatTemplate& arenas_rankedperiod_placements_win
		StatTemplate& arenas_rankedperiod_damage_done
		StatTemplate& arenas_rankedperiod_damage_done_max_single_game
		StatTemplate& arenas_rankedperiod_kills_max_single_game
		StatTemplate& arenas_rankedperiod_kills
		StatTemplate& arenas_rankedperiod_deaths
		StatTemplate& arenas_rankedperiod_dooms
		StatTemplate& arenas_rankedperiod_assists
		                                                                                                                                     
		                                                                                   
		StatTemplate& arenas_rankedperiod_win_streak_current_new
		StatTemplate& arenas_rankedperiod_win_streak_longest_new
		StatTemplate& arenas_rankedperiod_revived_ally
       

	       
	StatTemplate& character_solo_dooms
	StatTemplate& character_solo_placements_top_5
	StatTemplate& character_solo_wins
	StatTemplate& solo_placements_top_5
	StatTemplate& solo_dooms

	                 
	StatTemplate& season01_event_placements_top_5

	                   
	StatTemplate& season02_event01_top5s_badge
	StatTemplate& season02_event01_character_solo_wins
	StatTemplate& season02_event01_num_characters_with_solo_win

	                   

	         
	StatTemplate& s03e01_badge

	         
	StatTemplate& s03e02_winter_express_captures

	          
	StatTemplate& s03_duos_badge_play
	StatTemplate& s03_duos_badge_win
	StatTemplate& s03_duos_tiers_earned

	        
	StatTemplate& s03e03_buffet_points
	StatTemplate& s03e03_play_each_game_mode
	StatTemplate& s03e03_placement_top_5

	        
	StatTemplate& s04e01_buffet_points
	StatTemplate& s04e01_loot_lock_placements_top_10

	        
	StatTemplate& s04e02_buffet_points

	        
	StatTemplate& s05e01_buffet_points
	StatTemplate& s05e01_armed_and_dangerous_evolved_kills
	StatTemplate& s05e01_armed_and_dangerous_evolved_wins
	StatTemplate& s05e01_armed_and_dangerous_evolved_times_respawned_ally
	StatTemplate& s05e01_armed_and_dangerous_evolved_combined_badge_earned

	        
	StatTemplate& s06e01_buffet_points
	StatTemplate& s06e01_campfire_damage_dealt_in_zone
	StatTemplate& s06e01_campfire_players_killed_in_zone
	StatTemplate& s06e01_campfire_wins
	StatTemplate& s06e01_campfire_combined_badge_earned

	        
	StatTemplate& s06e02_buffet_points
	StatTemplate& s06e02_shadow_royale_kills
	StatTemplate& s06e02_shadow_royale_revives
	StatTemplate& s06e02_shadow_royale_wins
	StatTemplate& s06e02_shadow_royale_combined_badge_earned

	        
	StatTemplate& s07e01_buffet_points
	StatTemplate& s07e01_winter_express_captures
	StatTemplate& s07e01_winter_express_kills
	StatTemplate& s07e01_winter_express_damage
	StatTemplate& s07e01_winter_express_combined_badge_earned

	        
	StatTemplate& s07e02_buffet_points
	StatTemplate& s07e02_airdropkitted_damage_dealt
	StatTemplate& s07e02_airdropkitted_knockdowns
	StatTemplate& s07e02_airdropkitted_wins
	StatTemplate& s07e02_airdropkitted_combined_badge_earned

	        
	StatTemplate& s08ace_buffet_points

	             
	StatTemplate& s08seasonal_nessie_dailies
	StatTemplate& s08seasonal_weapon_damage
	StatTemplate& s08seasonal_character_wins
	StatTemplate& s08seasonal_combined_badge_earned

	        
	StatTemplate& s08e01_buffet_points
	StatTemplate& s08e01_ringfury_challenge_2     
	StatTemplate& s08e01_ringfury_challenge_3    
	StatTemplate& s08e01_ringfury_challenge_4    
	StatTemplate& s08e01_ringfury_combined_badge_earned

	        
	StatTemplate& s08e02_buffet_points
	StatTemplate& s08e02_wargames_challenge_2    
	StatTemplate& s08e02_wargames_challenge_3    
	StatTemplate& s08e02_wargames_challenge_4    
	StatTemplate& s08e02_wargames_combined_badge_earned

	     
	                                          
	                                        
	                                          

	StatTemplate& arenas_test_buffet_points

	        
	StatTemplate& s08e04_finale_completed
	StatTemplate& s08e04_finale_not_completed

	StatTemplate& first_played_unixtime

	                  
	                                                      
	                  
	                           
	                               
	StatTemplate& s09e01_buffet_points
	StatTemplate& s09e01_br_damage_done
	StatTemplate& s09e01_arenas_placements_win
	StatTemplate& s09e01_br_dooms
	StatTemplate& s09e01_combined_badge_earned

	                         
	                                                                       
	                                                                             
	                                                                              
	StatTemplate& s09e02_01_buffet_points
	StatTemplate& s09e02_02_buffet_points
	StatTemplate& s09e02_03_buffet_points
	StatTemplate& s09e02_01_arenas_matches_played
	StatTemplate& s09e02_02_arenas_dooms
	StatTemplate& s09e02_03_arenas_damage_done

	                  
	                                     
	                               
	                       
	                      
	StatTemplate& s11e01_buffet_points
	StatTemplate& s11e01_winter_express_damage_done
	StatTemplate& s11e01_arenas_damage_done
	StatTemplate& s11e01_br_dooms
	StatTemplate& s11e01_combined_badge_earned                   

	                      
	                      
	                              
	                              
	StatTemplate& s11e02_01_buffet_points
	StatTemplate& s11e02_02_buffet_points
	StatTemplate& s11e02_03_buffet_points
	StatTemplate& s11e02_01_br_dooms
	StatTemplate& s11e02_02_arenas_games_played
	StatTemplate& s11e02_03_br_damage_done

	                      
	                                     
	                                           
	                                   
	                                   
	StatTemplate& s12ace_buffet_points
	StatTemplate& s12ace_br_damage_done
	StatTemplate& s12ace_control_captures
	StatTemplate& s12ace_br_dooms
	StatTemplate& s12ace_combined_badge_earned                   

	                   
	                                   
	                            
	                        
	                                
	StatTemplate& s12e01_buffet_points
	StatTemplate& s12e01_br_damage_done
	StatTemplate& s12e01_control_captures
	StatTemplate& s12e01_br_dooms
	StatTemplate& s12e01_combined_badge_earned

	                                    
	StatTemplate& s12e02_01_buffet_points
	StatTemplate& s12e02_02_buffet_points
	StatTemplate& s12e02_01_br_dooms
	StatTemplate& s12e02_02_br_damage_done

	                                       
	                                     
	                            
	                            
	                        
	                                 
	StatTemplate& s13e01_buffet_points
	StatTemplate& s13e01_br_damage_done
	StatTemplate& s13e01_control_rating
	StatTemplate& s13e01_br_dooms
	StatTemplate& s13e01_combined_badge_earned

	                                       
	                                
	StatTemplate& s13e02_01_buffet_points
	StatTemplate& s13e02_02_buffet_points

	                   
	StatTemplate& s13_flash_01_buffet_points

	           
                     
	StatTemplate& hovervehicle_occupant_meters_traveled
                           

	StatTemplate& s12e04_challenge_1
	StatTemplate& s12e04_challenge_2
	StatTemplate& s12e04_challenge_3

	       
	StatTemplate& clubs_games_played_with_club
	StatTemplate& clubs_placements_win_with_club
	StatTemplate& clubs_placements_win_with_club_squad_alive
	StatTemplate& clubs_placements_win_with_club_streak
	StatTemplate& clubs_placements_win_with_club_no_deaths
	StatTemplate& clubs_placements_win_with_club_no_deaths_or_knockouts
	StatTemplate& clubs_kills_with_club_squad
	                                                         
	                                                           

                        
	StatTemplate& gamemode_control_objectives_captured
	StatTemplate& gamemode_control_personal_exp_points_earned
	StatTemplate& gamemode_control_capture_bonuses_claimed_by_team
	StatTemplate& gamemode_control_killed_enemy_1_tier_higher
	StatTemplate& gamemode_control_killed_enemy_2_tier_higher
	StatTemplate& gamemode_control_killed_objective_attacker
	StatTemplate& gamemode_control_killed_objective_defender
	StatTemplate& gamemode_control_became_expleader
	StatTemplate& gamemode_control_killed_expleader
	StatTemplate& gamemode_control_highest_exp_as_expleader
	StatTemplate& gamemode_control_time_on_objective
                              
}

global struct MatchStats
{
	                     
}
#endif

#if SERVER || CLIENT || UI
global CareerStats CAREER_STATS            
#endif

#if (SERVER || CLIENT || UI)
                                                                     
global enum eArenasPurchaseData
{
	HEAL,
	SKILL,
	UPGRADE,
	WEAPON,
	ORDNANCE,
}
#endif


                       
                       
                       
                       
                       

struct
{
	#if SERVER
		                                                                              
	#endif

}file
#if SERVER || CLIENT || UI
struct FileStruct_LifetimeLevel
{
	table<string, table<string, bool> > weaponStatCategoryWeaponItemRefSet

	#if SERVER
		                                       
		                                                

		                                    
		                                  

		                          
	#endif
}
FileStruct_LifetimeLevel& fileLevel
#endif



                         
                         
                         
                         
                         
#if SERVER || CLIENT || UI
void function ShStats_LevelInit()
{
	#if SERVER || CLIENT
		PIN_Init()
	#endif

	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	RegisterAllStats()

	#if SERVER
		                                                                                         

		                                                                           

		                                                                                         
		                                                                     
		                                                                         
		                                            
		                                            
		                                                  
		                                                        
		                                      
		                                                                   
		                                                              
		                                                         
		                                                                                
	#endif

}
#endif


#if SERVER || CLIENT || UI
void function RegisterAllStats()
{
	array<string> allCharacterRefs = []
	foreach ( ItemFlavor character in GetAllCharactersForStats() )
		allCharacterRefs.append( ItemFlavor_GetGUIDString( character ) )

	array<string> allWeaponsRefs               = []
	array<string> allLootWeaponStatsCategories = []
	foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
	{
		string weaponRef = ItemFlavor_GetGUIDString( weapon )
		allWeaponsRefs.append( weaponRef )
		string category = WeaponItemFlavor_GetStatsCategory( weapon )

		bool isGold = (category == WEAPON_STAT_CATEGORY_GOLD_WEAPON)
		#if SERVER
			                                                  
			              
				                                        
		#endif

		if ( isGold )
		{
			string goldStatsCategory = WeaponCategoryFlavor_GetStatsKey( WeaponItemFlavor_GetCategory( weapon ) )
			if ( !(goldStatsCategory in fileLevel.weaponStatCategoryWeaponItemRefSet) )
			{
				fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory] <- {}
				allLootWeaponStatsCategories.append( goldStatsCategory )
			}
			fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory][weaponRef] <- true
		}

		if ( !(category in fileLevel.weaponStatCategoryWeaponItemRefSet) )
		{
			fileLevel.weaponStatCategoryWeaponItemRefSet[category] <- {}
			allLootWeaponStatsCategories.append( category )
		}
		fileLevel.weaponStatCategoryWeaponItemRefSet[category][weaponRef] <- true
	}

	array<string> allSeasonRefs = []
	foreach ( ItemFlavor season in GetAllSeasonFlavors() )
	{
		allSeasonRefs.append( ItemFlavor_GetGUIDString( season ) )
	}

	array<string> allRankedPeriodRefs = []
	array<ItemFlavor> allRankedPeriods = GetAllRankedPeriodFlavorsByType( eItemType.calevent_rankedperiod )

	foreach ( ItemFlavor rankedPeriod in allRankedPeriods )
	{
		allRankedPeriodRefs.append( ItemFlavor_GetGUIDString( rankedPeriod ) )
	}

                        
		array<string> allArenasRankedPeriodRefs = []
		array<ItemFlavor> allArenasRankedPeriods = GetAllRankedPeriodFlavorsByType( eItemType.calevent_arenas_ranked_period )
		foreach ( ItemFlavor arenasRankedPeriod in allArenasRankedPeriods )
		{
			allArenasRankedPeriodRefs.append( ItemFlavor_GetGUIDString( arenasRankedPeriod ) )
		}
       

	const int CHALLENGES_NEED = eStatFlags.STORE_START_OF_PREVIOUS_MATCH | eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY                                       
	const int CHALLENGES_CALC_DEPENDS = eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY
	const int BADGES_UNLOCK_NEED = eStatFlags.STORE_START_OF_PREVIOUS_MATCH                                                                                           
	const int TRACKERS_NEED = 0

	CAREER_STATS.account_level = RegisterExpensiveCalculatedStat_Int( null, "account_level", BADGES_UNLOCK_NEED, SetupGetAccountLevelForStat, [] )
	CAREER_STATS.total_legendary_items = RegisterCachedCalculatedStat_Int( null, "total_legendary_items", 0, SetupGetTotalLegendaryItemsForStat, [] )
	CAREER_STATS.num_characters_with_banners_once_filled = RegisterCachedCalculatedStat_Int( null, "num_characters_with_banners_once_filled", 0, SetupGetNumCharactersWithBannersOnceFilledForStat, [] )
	CAREER_STATS.ea_access_member = RegisterExpensiveCalculatedStat_Int( null, "ea_access_member", 0, SetupGetEAAccessStatusForStat, [] )
	CAREER_STATS.fashionista = RegisterCachedCalculatedStat_Int( null, "fashionista", 0, SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat, [] )
	CAREER_STATS.weapons_with_legendary_skin = RegisterCachedCalculatedStat_Int( null, "weapons_with_legendary_skin", 0, SetupGetCountOfWeaponsWithLegendarySkinsForStat, [] )
	CAREER_STATS.well_rounded = RegisterCachedCalculatedStat_Int( null, "well_rounded", BADGES_UNLOCK_NEED, SetupGetCountOfCharactersWithWellRoundedDamageForStat, [] )
	CAREER_STATS.looted_all_launch_loot_once = RegisterCachedCalculatedStat_Int( null, "looted_all_launch_loot_once", BADGES_UNLOCK_NEED, SetupGetTreasureHunterStatusForStat, [] )
	CAREER_STATS.master_of_all = RegisterCachedCalculatedStat_Int( null, "master_of_all", BADGES_UNLOCK_NEED, SetupGetCountOfCharactersWithTenWinsForStat, [] )
	CAREER_STATS.starter_pack = RegisterExpensiveCalculatedStat_Int( null, "starter_pack_owner", 0, SetupGetStarterPackStatusForStat, [] )
	CAREER_STATS.founder_pack = RegisterExpensiveCalculatedStat_Int( null, "founder_pack_owner", 0, SetupGetFounderPackStatusForStat, [] )
	CAREER_STATS.twitch_pack = RegisterExpensiveCalculatedStat_Int( null, "twitch_pack_owner", 0, SetupGetTwitchPackStatusForStat, [] )

	CAREER_STATS.respawn_dev = RegisterAccumulatedStat_Int( null, "respawn_dev" )
	CAREER_STATS.times_fully_kitted = RegisterAccumulatedStat_Int( null, "times_fully_kitted", BADGES_UNLOCK_NEED )
	CAREER_STATS.distance_kill = RegisterAccumulatedStat_Int( null, "distance_kill", BADGES_UNLOCK_NEED )

	                                                                                                                                  
	                                                                                                                                                                          
	CAREER_STATS.times_jumpmaster = RegisterAccumulatedStat_Int( null, "times_jumpmaster" )
	CAREER_STATS.times_jumpmaster_post_fix = RegisterAccumulatedStat_Int( null, "times_jumpmaster_post_fix" )
	CAREER_STATS.looted_all_nongold_weapons_in_1_match = RegisterAccumulatedStat_Int( null, "looted_all_nongold_weapons_in_1_match" )       
	CAREER_STATS.valentines_revives_and_respawns = RegisterAccumulatedStat_Int( null, "valentines_revives_and_respawns", BADGES_UNLOCK_NEED )

	CAREER_STATS.looted_epic_item = RegisterAccumulatedStat_Int( null, "looted_epic_item", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_item = RegisterAccumulatedStat_Int( null, "looted_legendary_item", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_helmet = RegisterAccumulatedStat_Int( null, "looted_legendary_helmet", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_armor = RegisterAccumulatedStat_Int( null, "looted_legendary_armor", CHALLENGES_NEED )

	CAREER_STATS.daily_challenges_completed = RegisterAccumulatedStat_Int( null, "daily_challenges_completed", CHALLENGES_NEED )
	CAREER_STATS.challenge_xp_earned = RegisterAccumulatedStat_Int( null, "challenge_xp_earned", CHALLENGES_NEED )
	CAREER_STATS.challenge_stars_earned = RegisterAccumulatedStat_Int( null, "challenge_stars_earned", CHALLENGES_NEED )

	CAREER_STATS.thanks = RegisterAccumulatedStat_Int( null, "thanks", CHALLENGES_NEED )       
	CAREER_STATS.dooms = RegisterAccumulatedStat_Int( null, "dooms", CHALLENGES_NEED )       
	CAREER_STATS.kills = RegisterAccumulatedStat_Int( null, "kills", CHALLENGES_NEED )       
	CAREER_STATS.assists = RegisterAccumulatedStat_Int( null, "assists", CHALLENGES_NEED )       
	CAREER_STATS.kills_or_assists = RegisterAccumulatedStat_Int( null, "kills_or_assists", CHALLENGES_NEED )       
	                                                                         
	CAREER_STATS.times_got_doomed = RegisterAccumulatedStat_Int( null, "times_got_doomed" )       
	CAREER_STATS.deaths = RegisterAccumulatedStat_Int( null, "deaths" )       
	                                                                                               
	                                                                                                         
	CAREER_STATS.times_respawned_ally = RegisterAccumulatedStat_Int( null, "times_respawned_ally" )
	CAREER_STATS.winning_kills = RegisterAccumulatedStat_Int( null, "winning_kills" )       
	CAREER_STATS.win_streak_longest = RegisterAccumulatedStat_Int( null, "win_streak_longest" )       
	CAREER_STATS.win_streak_current = RegisterVariableStat_Int( null, "win_streak_current", BADGES_UNLOCK_NEED )       
	CAREER_STATS.win_streak_account_badge_current = RegisterVariableStat_Int( null, "win_streak_account_badge_current", BADGES_UNLOCK_NEED )       
	CAREER_STATS.win_streak_account_badge_longest = RegisterVariableStat_Int( null, "win_streak_account_badge_longest", BADGES_UNLOCK_NEED )       
	CAREER_STATS.kills_while_killleader = RegisterAccumulatedStat_Int( null, "kills_while_killleader" )
	CAREER_STATS.kills_max_single_game = RegisterAccumulatedStat_Int( null, "kills_max_single_game" )
	CAREER_STATS.damage_done = RegisterAccumulatedStat_Int( null, "damage_done", CHALLENGES_NEED )       
	CAREER_STATS.damage_done_midair = RegisterAccumulatedStat_Int( null, "damage_done_midair" )       
	CAREER_STATS.damage_taken = RegisterAccumulatedStat_Int( null, "damage_taken" )       
	CAREER_STATS.shots = RegisterAccumulatedStat_Int( null, "shots" )       
	CAREER_STATS.hits = RegisterAccumulatedStat_Int( null, "hits" )       
	CAREER_STATS.headshots = RegisterAccumulatedStat_Int( null, "headshots", CHALLENGES_NEED )       
	CAREER_STATS.executions = RegisterAccumulatedStat_Int( null, "executions", CHALLENGES_NEED )       
	CAREER_STATS.revived_ally = RegisterAccumulatedStat_Int( null, "revived_ally", CHALLENGES_NEED )       
	CAREER_STATS.respawned_ally = RegisterAccumulatedStat_Int( null, "respawned_ally", CHALLENGES_NEED )       
	CAREER_STATS.games_played = RegisterAccumulatedStat_Int( null, "games_played", CHALLENGES_NEED )       
	CAREER_STATS.placements_win = RegisterAccumulatedStat_Int( null, "placements_win", CHALLENGES_NEED )       
	CAREER_STATS.placements_win_with_squad_alive = RegisterAccumulatedStat_Int( null, "placements_win_with_squad_alive" )       
	CAREER_STATS.placements_top_3 = RegisterAccumulatedStat_Int( null, "placements_top_3", CHALLENGES_NEED )       
	CAREER_STATS.placements_top_5 = RegisterAccumulatedStat_Int( null, "placements_top_5", CHALLENGES_NEED )       
	CAREER_STATS.placements_top_10 = RegisterAccumulatedStat_Int( null, "placements_top_10", CHALLENGES_NEED )       
	CAREER_STATS.placements_win_with_friends = RegisterAccumulatedStat_Int( null, "placements_win_with_friends", BADGES_UNLOCK_NEED )
	CAREER_STATS.placements_win_with_no_witnessess = RegisterAccumulatedStat_Int( null, "placements_win_with_no_witnessess", BADGES_UNLOCK_NEED )
	CAREER_STATS.placements_win_with_min_executions_per_person = RegisterAccumulatedStat_Int( null, "placements_win_with_min_executions_per_person", BADGES_UNLOCK_NEED )
	CAREER_STATS.max_placement_win_streak_with_premade_squad = RegisterAccumulatedStat_Int( null, "max_placement_win_streak_with_premade_squad", BADGES_UNLOCK_NEED )
	CAREER_STATS.team_work_kill_count = RegisterAccumulatedStat_Int( null, "team_work_kill_count", BADGES_UNLOCK_NEED )
	CAREER_STATS.neutral_airdrops_looted = RegisterAccumulatedStat_Int( null, "neutral_airdrops_looted", CHALLENGES_NEED )
	CAREER_STATS.damage_done_to_prowler_on_storm_point = RegisterAccumulatedStat_Int( null, "damage_done_to_prowler_on_storm_point", CHALLENGES_NEED )
	CAREER_STATS.damage_done_to_spider_on_storm_point  = RegisterAccumulatedStat_Int( null, "damage_done_to_spider_on_storm_point", CHALLENGES_NEED )

	CAREER_STATS.games_played_any_mode = RegisterAccumulatedStat_Int( null, "games_played_any_mode", CHALLENGES_NEED )       

	StatEnumStruct weapon_SES = RegisterStatEnumStruct( null, "weapons", "eWeaponFlavor", allWeaponsRefs )       
	CAREER_STATS.weapon_kills = RegisterAccumulatedStat_Int( weapon_SES, "kills", CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.weapon_dooms = RegisterAccumulatedStat_Int( weapon_SES, "dooms", CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.weapon_damage_done = RegisterAccumulatedStat_Int( weapon_SES, "damage_done", CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.weapon_shots = RegisterAccumulatedStat_Int( weapon_SES, "shots" )       
	CAREER_STATS.weapon_hits = RegisterAccumulatedStat_Int( weapon_SES, "hits" )       
	CAREER_STATS.weapon_headshots = RegisterAccumulatedStat_Int( weapon_SES, "headshots", CHALLENGES_CALC_DEPENDS )       

	StatEnumStruct character_SES = RegisterStatEnumStruct( null, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.character_kills = RegisterAccumulatedStat_Int( character_SES, "kills", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.character_dooms = RegisterAccumulatedStat_Int( character_SES, "dooms", CHALLENGES_NEED )       
	CAREER_STATS.character_deaths = RegisterAccumulatedStat_Int( character_SES, "deaths" )       
	CAREER_STATS.character_winning_kills = RegisterAccumulatedStat_Int( character_SES, "winning_kills", BADGES_UNLOCK_NEED | TRACKERS_NEED )       
	CAREER_STATS.character_kills_while_killleader = RegisterAccumulatedStat_Int( character_SES, "kills_while_killleader", TRACKERS_NEED )
	CAREER_STATS.character_damage_done = RegisterAccumulatedStat_Int( character_SES, "damage_done", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.character_damage_done_any_mode = RegisterAccumulatedStat_Int( character_SES, "damage_done_any_mode", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "character_damage_done_max_single_game", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_shots = RegisterAccumulatedStat_Int( character_SES, "shots" )       
	CAREER_STATS.character_hits = RegisterAccumulatedStat_Int( character_SES, "hits" )       
	CAREER_STATS.character_headshots = RegisterAccumulatedStat_Int( character_SES, "headshots", TRACKERS_NEED )       
	CAREER_STATS.character_executions = RegisterAccumulatedStat_Int( character_SES, "executions", TRACKERS_NEED )       
	CAREER_STATS.character_revived_ally = RegisterAccumulatedStat_Int( character_SES, "revived_ally", TRACKERS_NEED )       
	CAREER_STATS.character_games_played = RegisterAccumulatedStat_Int( character_SES, "games_played", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.character_games_played_any_mode = RegisterAccumulatedStat_Int( character_SES, "games_played_any_mode", CHALLENGES_NEED )       
	CAREER_STATS.character_games_with_5_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_5_kills", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_games_with_20_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_20_kills", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_games_with_respawning_both_teammates = RegisterAccumulatedStat_Int( character_SES, "character_games_with_respawning_both_teammates", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_rapid_eliminations = RegisterAccumulatedStat_Int( character_SES, "character_rapid_eliminations", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_most_squad_squad_kills_in_1_game = RegisterAccumulatedStat_Int( character_SES, "most_squad_squad_kills_in_1_game", BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win = RegisterAccumulatedStat_Int( character_SES, "placements_win", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_with_squad_alive = RegisterAccumulatedStat_Int( character_SES, "placements_win_with_squad_alive", BADGES_UNLOCK_NEED | TRACKERS_NEED )       
	CAREER_STATS.character_placements_top_3 = RegisterAccumulatedStat_Int( character_SES, "placements_top_3", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.character_placements_win_as_jumpmaster = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_jumpmaster", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_as_killleader = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_as_killleader_and_champion = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader_and_champion", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_flawless_1 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_1", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_flawless_2 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_2", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_placements_win_with_5_headshots = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_with_5_headshots", BADGES_UNLOCK_NEED )       

	                   
	CAREER_STATS.character_won_last_game = RegisterVariableStat_Int( character_SES, "character_won_last_game" )       
	CAREER_STATS.character_hot_streaks = RegisterAccumulatedStat_Int( character_SES, "character_hot_streaks", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_reinforcement_recalls = RegisterAccumulatedStat_Int( character_SES, "character_reinforcement_recalls", BADGES_UNLOCK_NEED )       
	CAREER_STATS.character_banner_once_filled = RegisterAccumulatedStat_Int( character_SES, "character_banner_once_filled" )       

	CAREER_STATS.character_neutral_airdrops_looted = RegisterAccumulatedStat_Int( character_SES, "neutral_airdrops_looted" )

	StatEnumStruct character_weapon_SES = RegisterStatEnumStruct( character_SES, "weapons", "eWeaponFlavor", allWeaponsRefs )       
	CAREER_STATS.character_weapon_kills = RegisterAccumulatedStat_Int( character_weapon_SES, "kills", TRACKERS_NEED | CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.character_weapon_dooms = RegisterAccumulatedStat_Int( character_weapon_SES, "dooms", TRACKERS_NEED | CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.character_weapon_damage_done = RegisterAccumulatedStat_Int( character_weapon_SES, "damage_done", CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.character_weapon_shots = RegisterAccumulatedStat_Int( character_weapon_SES, "shots" )       
	CAREER_STATS.character_weapon_hits = RegisterAccumulatedStat_Int( character_weapon_SES, "hits" )       
	CAREER_STATS.character_weapon_headshots = RegisterAccumulatedStat_Int( character_weapon_SES, "headshots", CHALLENGES_CALC_DEPENDS )       

	StatEnumStruct character_weaponcategory_SES = RegisterStatEnumStruct( character_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	StatTemplate temp_statTemplateReference                                                                                                               

	StatEnumStruct modes_SES = RegisterStatEnumStruct( null, "modes", "eModesFlavors", STATS_ALTERNATE_MODE_REFS )       
	CAREER_STATS.modes_games_played = RegisterAccumulatedStat_Int( modes_SES, "games_played", CHALLENGES_NEED )       
	CAREER_STATS.modes_kills = RegisterAccumulatedStat_Int( modes_SES, "kills", CHALLENGES_NEED )       
	CAREER_STATS.modes_assists = RegisterAccumulatedStat_Int( modes_SES, "assists" )       
	CAREER_STATS.modes_kills_or_assists = RegisterAccumulatedStat_Int( modes_SES, "kills_or_assists", CHALLENGES_NEED )       
	CAREER_STATS.modes_executions = RegisterAccumulatedStat_Int( modes_SES, "executions", CHALLENGES_NEED )       
	CAREER_STATS.modes_deaths = RegisterAccumulatedStat_Int( modes_SES, "deaths" )       
	CAREER_STATS.modes_dooms = RegisterAccumulatedStat_Int( modes_SES, "dooms", CHALLENGES_NEED )       
	CAREER_STATS.modes_damage_done = RegisterAccumulatedStat_Int( modes_SES, "damage_done", CHALLENGES_NEED )       
	CAREER_STATS.modes_placements_win = RegisterAccumulatedStat_Int( modes_SES, "placements_win", CHALLENGES_NEED )       
	CAREER_STATS.modes_headshots = RegisterAccumulatedStat_Int( modes_SES, "headshots", CHALLENGES_NEED )       
	                    
	CAREER_STATS.modes_kills_max_single_game = RegisterAccumulatedStat_Int( modes_SES, "kills_max_single_game" )
	CAREER_STATS.modes_damage_done_max_single_game = RegisterAccumulatedStat_Int( modes_SES, "damage_done_max_single_game" )
	CAREER_STATS.modes_win_streak_current = RegisterVariableStat_Int( modes_SES, "win_streak_current", CHALLENGES_NEED )
	CAREER_STATS.modes_win_streak_longest = RegisterAccumulatedStat_Int( modes_SES, "win_streak_longest", BADGES_UNLOCK_NEED )
	CAREER_STATS.modes_revived_ally = RegisterAccumulatedStat_Int( modes_SES, "revived_ally", CHALLENGES_NEED )


	StatEnumStruct modes_season_SES = RegisterStatEnumStruct( modes_SES, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.modes_season_games_played = RegisterAccumulatedStat_Int( modes_season_SES, "games_played" )       
	CAREER_STATS.modes_season_kills = RegisterAccumulatedStat_Int( modes_season_SES, "kills" )       
	CAREER_STATS.modes_season_assists = RegisterAccumulatedStat_Int( modes_season_SES, "assists" )       
	CAREER_STATS.modes_season_deaths = RegisterAccumulatedStat_Int( modes_season_SES, "deaths" )       
	CAREER_STATS.modes_season_dooms = RegisterAccumulatedStat_Int( modes_season_SES, "dooms" )       
	CAREER_STATS.modes_season_damage_done = RegisterAccumulatedStat_Int( modes_season_SES, "damage_done" )       
	CAREER_STATS.modes_season_placements_win = RegisterAccumulatedStat_Int( modes_season_SES, "placements_win" )       
	                    
	CAREER_STATS.modes_season_kills_max_single_game = RegisterAccumulatedStat_Int( modes_season_SES, "kills_max_single_game" )
	CAREER_STATS.modes_season_damage_done_max_single_game = RegisterAccumulatedStat_Int( modes_season_SES, "damage_done_max_single_game" )
	CAREER_STATS.modes_season_win_streak_current = RegisterVariableStat_Int( modes_season_SES, "win_streak_current" )
	CAREER_STATS.modes_season_win_streak_longest = RegisterAccumulatedStat_Int( modes_season_SES, "win_streak_longest" )
	CAREER_STATS.modes_season_revived_ally = RegisterAccumulatedStat_Int( modes_season_SES, "revived_ally" )

	StatEnumStruct modes_characters_SES = RegisterStatEnumStruct( modes_SES, "characters", "eCharacterFlavor", allCharacterRefs )       
	CAREER_STATS.modes_character_games_played = RegisterAccumulatedStat_Int( modes_characters_SES, "games_played", CHALLENGES_NEED )       
	CAREER_STATS.modes_character_damage_done = RegisterAccumulatedStat_Int( modes_characters_SES, "damage_done", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.modes_character_kills = RegisterAccumulatedStat_Int( modes_characters_SES, "kills", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.modes_character_dooms = RegisterAccumulatedStat_Int( modes_characters_SES, "dooms", CHALLENGES_NEED )       
	CAREER_STATS.modes_character_deaths = RegisterAccumulatedStat_Int( modes_characters_SES, "deaths" )       
	CAREER_STATS.modes_character_placements_win = RegisterAccumulatedStat_Int( modes_characters_SES, "placements_win", CHALLENGES_NEED )       

	StatEnumStruct modes_weapon_SES = RegisterStatEnumStruct( modes_SES, "weapons", "eWeaponFlavor", allWeaponsRefs )       
	CAREER_STATS.modes_weapon_damage_done = RegisterAccumulatedStat_Int( modes_weapon_SES, "damage_done", CHALLENGES_CALC_DEPENDS )       
	CAREER_STATS.modes_weapon_dooms = RegisterAccumulatedStat_Int( modes_weapon_SES, "dooms", CHALLENGES_CALC_DEPENDS )       

	StatEnumStruct modes_weaponcategory_SES = RegisterStatEnumStruct( modes_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )
	temp_statTemplateReference                    = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.modes_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( modes_weaponcategory_SES, "damage_done", CHALLENGES_NEED,
		SetupModesWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       
	temp_statTemplateReference                    = CAREER_STATS.modes_weapon_dooms
	CAREER_STATS.modes_weaponcategory_dooms       = RegisterExpensiveCalculatedStat_Int( modes_weaponcategory_SES, "dooms", CHALLENGES_NEED,
		SetupModesWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

                        
		CAREER_STATS.arenas_badge_perfect_game = RegisterAccumulatedStat_Int( null, "arenas_badge_perfect_game", BADGES_UNLOCK_NEED | CHALLENGES_NEED )                                                     
		CAREER_STATS.arenas_badge_no_down_win = RegisterAccumulatedStat_Int( null, "arenas_badge_no_down_win", BADGES_UNLOCK_NEED )                                             

		CAREER_STATS.arenas_rounds_won = RegisterAccumulatedStat_Int( null, "arenas_rounds_won", CHALLENGES_NEED )
		CAREER_STATS.arenas_cash_stations_captured = RegisterAccumulatedStat_Int( null, "arenas_cash_stations_captured", CHALLENGES_NEED )

		CAREER_STATS.arenas_character_win_streak_current_new = RegisterVariableStat_Int( character_SES, "arenas_character_win_streak_current_new" )       
		CAREER_STATS.arenas_character_win_streak_longest_new = RegisterAccumulatedStat_Int( character_SES, "arenas_character_win_streak_longest_new", BADGES_UNLOCK_NEED )       
		CAREER_STATS.arenas_character_kills_max_single_game = RegisterAccumulatedStat_Int( character_SES, "arenas_character_kills_max_single_game", BADGES_UNLOCK_NEED )       
		CAREER_STATS.arenas_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "arenas_character_damage_done_max_single_game", BADGES_UNLOCK_NEED )       
		CAREER_STATS.arenas_character_rounds_won = RegisterAccumulatedStat_Int( character_SES, "arenas_character_rounds_won", CHALLENGES_NEED )       

		CAREER_STATS.arenas_skills_purchased = RegisterAccumulatedStat_Int( null, "arenas_skills_purchased", CHALLENGES_NEED )
		CAREER_STATS.arenas_ordnance_purchased = RegisterAccumulatedStat_Int( null, "arenas_ordnance_purchased", CHALLENGES_NEED )
		CAREER_STATS.arenas_heals_purchased = RegisterAccumulatedStat_Int( null, "arenas_heals_purchased", CHALLENGES_NEED )
		CAREER_STATS.arenas_weapons_upgraded = RegisterAccumulatedStat_Int( null, "arenas_weapons_upgraded", CHALLENGES_NEED )
       

	          
	CAREER_STATS.crafting_items_crafted = RegisterAccumulatedStat_Int( null, "items_crafted", CHALLENGES_NEED )
	CAREER_STATS.crafting_materials_collected = RegisterAccumulatedStat_Int( null, "materials_collected", CHALLENGES_NEED )
	CAREER_STATS.crafting_harvester_used_any_mode = RegisterAccumulatedStat_Int( null, "crafting_harvester_used_any_mode", CHALLENGES_NEED )

	temp_statTemplateReference                  = CAREER_STATS.character_weapon_kills
	CAREER_STATS.character_weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "kills", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference                  = CAREER_STATS.character_weapon_dooms
	CAREER_STATS.character_weaponcategory_dooms = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "dooms", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference                        = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.character_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "damage_done", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference                  = CAREER_STATS.character_weapon_shots
	CAREER_STATS.character_weaponcategory_shots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "shots", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference                 = CAREER_STATS.character_weapon_hits
	CAREER_STATS.character_weaponcategory_hits = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "hits", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference                      = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.character_weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "headshots", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       


	StatEnumStruct weaponcategory_SES = RegisterStatEnumStruct( null, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	                                                                                                                                                                                       
	temp_statTemplateReference        = CAREER_STATS.character_weapon_kills
	CAREER_STATS.weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "kills", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference        = CAREER_STATS.character_weapon_dooms
	CAREER_STATS.weaponcategory_dooms = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "dooms", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference              = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference            = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "headshots", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	                                                                                                                                                                                                                                       
	StatTemplate tempOne = CAREER_STATS.character_weapon_damage_done
	StatTemplate tempTwo = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.weaponcategory_damage_done_any_mode = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done_any_mode", CHALLENGES_NEED,
		SetupAnyModeWeaponCategoryStatSumEntryFunc_Int, [tempOne, tempTwo] )

	                                                                               
	temp_statTemplateReference                        = CAREER_STATS.modes_games_played
	CAREER_STATS.all_modes_games_played               = RegisterExpensiveCalculatedStat_Int( null, "games_played_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_damage_done
	CAREER_STATS.all_modes_damage_done                = RegisterExpensiveCalculatedStat_Int( null, "damage_done_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_placements_win
	CAREER_STATS.all_modes_placements_win             = RegisterExpensiveCalculatedStat_Int( null, "placements_win_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_kills
	CAREER_STATS.all_modes_kills                      = RegisterExpensiveCalculatedStat_Int( null, "kills_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_assists
	CAREER_STATS.all_modes_assists                    = RegisterExpensiveCalculatedStat_Int( null, "assists_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_kills_or_assists
	CAREER_STATS.all_modes_kills_or_assists           = RegisterExpensiveCalculatedStat_Int( null, "kills_or_assists_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_deaths
	CAREER_STATS.all_modes_deaths                     = RegisterExpensiveCalculatedStat_Int( null, "deaths_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_dooms
	CAREER_STATS.all_modes_dooms                      = RegisterExpensiveCalculatedStat_Int( null, "dooms_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_executions
	CAREER_STATS.all_modes_executions                 = RegisterExpensiveCalculatedStat_Int( null, "executions_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_headshots
	CAREER_STATS.all_modes_headshots                  = RegisterExpensiveCalculatedStat_Int( null, "headshots_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_revived_ally
	CAREER_STATS.all_modes_revived_ally               = RegisterExpensiveCalculatedStat_Int( null, "revived_ally_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.all_modes_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_weapon_dooms
	CAREER_STATS.all_modes_weaponcategory_dooms       = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "dooms_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference] )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_games_played
	CAREER_STATS.all_modes_character_games_played     = RegisterExpensiveCalculatedStat_Int( character_SES, "games_played_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference])       
	temp_statTemplateReference                        = CAREER_STATS.modes_character_damage_done
	CAREER_STATS.all_modes_character_damage_done      = RegisterExpensiveCalculatedStat_Int( character_SES, "damage_done_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference])       
	temp_statTemplateReference                        = CAREER_STATS.modes_character_kills
	CAREER_STATS.all_modes_character_kills            = RegisterExpensiveCalculatedStat_Int( character_SES, "kills_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference])       
	temp_statTemplateReference                        = CAREER_STATS.modes_character_dooms
	CAREER_STATS.all_modes_character_dooms            = RegisterExpensiveCalculatedStat_Int( character_SES, "dooms_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference])       
	temp_statTemplateReference                        = CAREER_STATS.modes_character_placements_win
	CAREER_STATS.all_modes_character_placements_win   = RegisterExpensiveCalculatedStat_Int( character_SES, "placements_win_all_modes_non_br", CHALLENGES_NEED,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference])       

	CAREER_STATS.evoarmor_evolves = RegisterAccumulatedStat_Int( null, "evoarmor_evolves", CHALLENGES_NEED )
	CAREER_STATS.evoarmor_evolves_to_purple = RegisterAccumulatedStat_Int( null, "evoarmor_evolves_to_purple", CHALLENGES_NEED )

	CAREER_STATS.voidring_damage_prevented = RegisterAccumulatedStat_Int( null, "voidring_damage_prevented", CHALLENGES_NEED )

	CAREER_STATS.bloodhound_tactical_enemies_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_enemies_detected", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.bloodhound_tactical_traps_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_traps_detected", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.bloodhound_ultimate_kills_while_active = RegisterAccumulatedStat_Int( null, "bloodhound_ultimate_kills_while_active", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.caustic_tactical_barrels_traps_detonated = RegisterAccumulatedStat_Int( null, "caustic_tactical_barrels_traps_detonated", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.caustic_gas_damage_dealt = RegisterAccumulatedStat_Int( null, "caustic_gas_damage_dealt", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.caustic_passive_enemies_in_gas_killed = RegisterAccumulatedStat_Int( null, "caustic_passive_enemies_in_gas_killed", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.crypto_passive_enemies_scanned = RegisterAccumulatedStat_Int( null, "crypto_passive_enemies_scanned", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.crypto_ultimate_shield_damage = RegisterAccumulatedStat_Int( null, "crypto_ultimate_shield_damage", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.crypto_ultimate_traps_destroyed = RegisterAccumulatedStat_Int( null, "crypto_ultimate_traps_destroyed", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.gibraltar_tactical_bubble_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_tactical_bubble_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.gibraltar_ultimate_bombardment_kills = RegisterAccumulatedStat_Int( null, "gibraltar_ultimate_bombardment_kills", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.gibraltar_passive_gunshield_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_passive_gunshield_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.lifeline_tactical_drone_healing_given = RegisterAccumulatedStat_Int( null, "lifeline_tactical_drone_healing_given", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.lifeline_ultimate_droppod_items_grabbed_by_allies = RegisterAccumulatedStat_Int( null, "lifeline_ultimate_droppod_items_grabbed_by_allies", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.lifeline_passive_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "lifeline_passive_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.lifeline_passive_allies_revived = RegisterAccumulatedStat_Int( null, "lifeline_passive_allies_revived", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.loba_tactical_meters_teleported = RegisterAccumulatedStat_Int( null, "loba_tactical_meters_teleported", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.loba_ultimate_loot_taken_by_allies = RegisterAccumulatedStat_Int( null, "loba_ultimate_loot_taken_by_allies", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.loba_passive_loot_pinged_through_walls = RegisterAccumulatedStat_Int( null, "loba_passive_loot_pinged_through_walls", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.mirage_decoys_created = RegisterAccumulatedStat_Int( null, "mirage_decoys_created", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.mirage_successful_bamboozles = RegisterAccumulatedStat_Int( null, "mirage_successful_bamboozles", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.mirage_successful_revives = RegisterAccumulatedStat_Int( null, "mirage_successful_revives", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.octane_stim_distance_traveled = RegisterAccumulatedStat_Int( null, "octane_stim_distance_traveled", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.octane_jump_pad_allies_launched = RegisterAccumulatedStat_Int( null, "octane_jump_pad_allies_launched", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.octane_passive_health_regenerated = RegisterAccumulatedStat_Int( null, "octane_passive_health_regenerated", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.pathfinder_tactical_meters_moved_by_grapple = RegisterAccumulatedStat_Int( null, "pathfinder_tactical_meters_moved_by_grapple", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.pathfinder_ultimate_ziplines_used_by_allies = RegisterAccumulatedStat_Int( null, "pathfinder_ultimate_ziplines_used_by_allies", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.pathfinder_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "pathfinder_passive_beacons_scanned", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.recon_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "recon_passive_beacons_scanned", CHALLENGES_NEED )       
	CAREER_STATS.rampart_tactical_bullets_amped = RegisterAccumulatedStat_Int( null, "rampart_tactical_bullets_amped", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.rampart_tactical_damage_blocked = RegisterAccumulatedStat_Int( null, "rampart_tactical_damage_blocked", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.rampart_ultimate_bullets_fired = RegisterAccumulatedStat_Int( null, "rampart_ultimate_bullets_fired", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.wattson_breaches_detected = RegisterAccumulatedStat_Int( null, "wattson_breaches_detected", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.wattson_friendly_shields_charged = RegisterAccumulatedStat_Int( null, "wattson_friendly_shields_charged", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.wattson_enemy_ordnance_intercepted = RegisterAccumulatedStat_Int( null, "wattson_enemy_ordnance_intercepted", TRACKERS_NEED )       
	CAREER_STATS.wraith_ultimate_phase_tunnel_ally_uses = RegisterAccumulatedStat_Int( null, "wraith_ultimate_phase_tunnel_ally_uses", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.wraith_passive_voices_heard = RegisterAccumulatedStat_Int( null, "wraith_passive_voices_heard", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.wraith_tactical_time_spent_in_phase = RegisterAccumulatedStat_Int( null, "wraith_tactical_time_spent_in_phase", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.bangalore_passive_distance = RegisterAccumulatedStat_Int( null, "bangalore_passive_distance", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.bangalore_tactical_smoke_hits = RegisterAccumulatedStat_Int( null, "bangalore_tactical_smoke_hits", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.bangalore_ultimate_damage_done = RegisterAccumulatedStat_Int( null, "bangalore_ultimate_damage_done", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.revenant_silenced_target = RegisterAccumulatedStat_Int( null, "revenant_silenced_target", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.revenant_silenced_target_knockdowns = RegisterAccumulatedStat_Int( null, "revenant_silenced_target_knockdowns", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.revenant_death_totem_activates = RegisterAccumulatedStat_Int( null, "revenant_death_totem_activates", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.horizon_hard_landings_avoided = RegisterAccumulatedStat_Int( null, "horizon_hard_landings_avoided", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.horizon_teammates_gravity_lifted = RegisterAccumulatedStat_Int( null, "horizon_teammates_gravity_lifted", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.horizon_blackhole_damage_done = RegisterAccumulatedStat_Int( null, "horizon_blackhole_damage_done", TRACKERS_NEED | CHALLENGES_NEED )       

	CAREER_STATS.fuse_grenade_distance_thrown = RegisterAccumulatedStat_Int( null, "fuse_grenade_distance_thrown", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.fuse_cluster_bomb_hits = RegisterAccumulatedStat_Int( null, "fuse_cluster_bomb_hits", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.fuse_motherlode_enemies_captured = RegisterAccumulatedStat_Int( null, "fuse_motherlode_enemies_captured", TRACKERS_NEED | CHALLENGES_NEED )       

	CAREER_STATS.valk_distance_travelled_passive = RegisterAccumulatedStat_Int( null, "valk_distance_travelled_passive", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.valk_enemies_hit_tactical = RegisterAccumulatedStat_Int( null, "valk_enemies_hit_tactical", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.valk_teammates_carried_ult = RegisterAccumulatedStat_Int( null, "valk_teammates_carried_ult", TRACKERS_NEED | CHALLENGES_NEED )       

	CAREER_STATS.seer_enemy_heartbeats_heard = RegisterAccumulatedStat_Int( null, "seer_enemy_heartbeats_heard", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.seer_focus_of_attention_hits = RegisterAccumulatedStat_Int( null, "seer_focus_of_attention_hits", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.seer_exhibit_enemies_inside = RegisterAccumulatedStat_Int( null, "seer_exhibit_enemies_inside", TRACKERS_NEED | CHALLENGES_NEED )       

	CAREER_STATS.ash_enemies_marked = RegisterAccumulatedStat_Int( null, "ash_enemies_marked", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.ash_enemies_tethered = RegisterAccumulatedStat_Int( null, "ash_enemies_tethered", TRACKERS_NEED | CHALLENGES_NEED )       
	CAREER_STATS.ash_players_portaled = RegisterAccumulatedStat_Int( null, "ash_players_portaled", TRACKERS_NEED | CHALLENGES_NEED )       

	CAREER_STATS.maggie_riot_drill_drill_distance = RegisterAccumulatedStat_Int( null, "maggie_riot_drill_drill_distance", TRACKERS_NEED | CHALLENGES_NEED )
	CAREER_STATS.maggie_wrecking_ball_boost_distance = RegisterAccumulatedStat_Int( null, "maggie_wrecking_ball_boost_distance", TRACKERS_NEED | CHALLENGES_NEED )
	CAREER_STATS.maggie_warlords_ire_highlight_time = RegisterAccumulatedStat_Int( null, "maggie_warlords_ire_highlight_time", TRACKERS_NEED | CHALLENGES_NEED )

                  
		CAREER_STATS.newcastle_revive_distance = RegisterAccumulatedStat_Int( null, "newcastle_revive_distance", TRACKERS_NEED | CHALLENGES_NEED )
		CAREER_STATS.newcastle_mobile_shield_damage = RegisterAccumulatedStat_Int( null, "newcastle_mobile_shield_damage", TRACKERS_NEED | CHALLENGES_NEED )
		CAREER_STATS.newcastle_allies_rescued = RegisterAccumulatedStat_Int( null, "newcastle_allies_rescued", TRACKERS_NEED | CHALLENGES_NEED )
       

                
		CAREER_STATS.vantage_tactical_distance = RegisterAccumulatedStat_Int( null, "vantage_tactical_distance", TRACKERS_NEED | CHALLENGES_NEED )
		CAREER_STATS.vantage_ultimate_damage = RegisterAccumulatedStat_Int( null, "vantage_ultimate_damage", TRACKERS_NEED | CHALLENGES_NEED )
		CAREER_STATS.vantage_passive_enemies_pinged = RegisterAccumulatedStat_Int( null, "vantage_passive_enemies_pinged", TRACKERS_NEED | CHALLENGES_NEED )
		CAREER_STATS.vantage_ultimate_marked_hits = RegisterAccumulatedStat_Int( null, "vantage_ultimate_marked_hits", CHALLENGES_NEED )                     
       

	StatEnumStruct season_SES = RegisterStatEnumStruct( null, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.season_battlepass_level = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_level", BADGES_UNLOCK_NEED, SetupGetSeasonBattlePassLevelForStat, [] )       

	StatEnumStruct season_character_SES = RegisterStatEnumStruct( season_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.season_character_damage_done = RegisterAccumulatedStat_Int( season_character_SES, "damage_done", TRACKERS_NEED )       
	CAREER_STATS.season_character_kills = RegisterAccumulatedStat_Int( season_character_SES, "kills", TRACKERS_NEED )       
	CAREER_STATS.season_character_placements_win = RegisterAccumulatedStat_Int( season_character_SES, "placements_win", TRACKERS_NEED )       
	CAREER_STATS.season_character_placements_top_5 = RegisterAccumulatedStat_Int( season_character_SES, "placements_top_5" )       

	                             
	                                                                               
	CAREER_STATS.season_kills_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "kills_with_7_characters" )       
	CAREER_STATS.season_placements_wins_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "placements_wins_with_7_characters" )       
	CAREER_STATS.season_placements_top_5_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "placements_top_5_with_7_characters" )       
	CAREER_STATS.season_battlepass_bonus_xp_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "battlepass_bonus_xp_with_7_characters" )       
	                      

	              
	CAREER_STATS.season_games_played = RegisterAccumulatedStat_Int( season_SES, "games_played" )
	CAREER_STATS.season_placements_win = RegisterAccumulatedStat_Int( season_SES, "placements_win" )
	CAREER_STATS.season_damage_done = RegisterAccumulatedStat_Int( season_SES, "damage_done" )
	CAREER_STATS.season_kills = RegisterAccumulatedStat_Int( season_SES, "kills" )
	CAREER_STATS.season_deaths = RegisterAccumulatedStat_Int( season_SES, "deaths" )
	CAREER_STATS.season_dooms = RegisterAccumulatedStat_Int( season_SES, "dooms" )
	CAREER_STATS.season_team_work_kill_count = RegisterAccumulatedStat_Int( season_SES, "team_work_kill_count" )
	CAREER_STATS.season_revived_ally = RegisterAccumulatedStat_Int( season_SES, "revived_ally" )
	CAREER_STATS.season_times_respawned_ally = RegisterAccumulatedStat_Int( season_SES, "times_respawned_ally" )
	CAREER_STATS.season_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( season_character_SES, "character_damage_done_max_single_game" )
	CAREER_STATS.season_assists = RegisterAccumulatedStat_Int( season_SES, "assists" )
	CAREER_STATS.season_kills_max_single_game = RegisterAccumulatedStat_Int( season_SES, "kills_max_single_game" )
	CAREER_STATS.season_win_streak_longest = RegisterAccumulatedStat_Int( season_SES, "win_streak_longest" )
	CAREER_STATS.season_win_streak_current = RegisterVariableStat_Int( season_SES, "win_streak_current" )

	CAREER_STATS.elite_badge_unlock = RegisterAccumulatedStat_Int( null, "elite_badge_unlock" )
	CAREER_STATS.character_elite_game_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_wins" )       
	CAREER_STATS.character_elite_game_8kill_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_8kill_wins" )       
	CAREER_STATS.elite_888_badge_unlock = RegisterExpensiveCalculatedStat_Int( null, "elite_888_badge_unlock", 0, SetupGetElite888StatusForStat, [] )
	                                                                                                                   
	                                                                                                              
	                                                                                                                         
	                                                                                                                               
	                                                                                                                 

	CAREER_STATS.loot_bins = RegisterAccumulatedStat_Int( null, "loot_bins_opened", CHALLENGES_NEED )       
	CAREER_STATS.opponents_outlived = RegisterAccumulatedStat_Int( null, "opponents_outlived", CHALLENGES_NEED )       
	CAREER_STATS.survival_time_seconds = RegisterAccumulatedStat_Int( null, "survival_time_seconds", CHALLENGES_NEED )       

	CAREER_STATS.season01_event_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_placements_top_5" )

	                    

	StatEnumStruct rankedperiod_SES = RegisterStatEnumStruct( null, "rankedperiods", "eRankedPeriodFlavor", allRankedPeriodRefs )
	CAREER_STATS.rankedperiod_games_played = RegisterAccumulatedStat_Int( rankedperiod_SES, "games_played" )
	CAREER_STATS.rankedperiod_placements_win = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_win" )
	CAREER_STATS.rankedperiod_placements_top_5 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_5" )
	CAREER_STATS.rankedperiod_placements_top_10 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_10" )
	CAREER_STATS.rankedperiod_damage_done = RegisterAccumulatedStat_Int( rankedperiod_SES, "damage_done" )
	CAREER_STATS.rankedperiod_kills = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills" )
	CAREER_STATS.rankedperiod_deaths = RegisterAccumulatedStat_Int( rankedperiod_SES, "deaths" )
	CAREER_STATS.rankedperiod_dooms = RegisterAccumulatedStat_Int( rankedperiod_SES, "dooms" )
	CAREER_STATS.rankedperiod_revived_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "revived_ally" )
	CAREER_STATS.rankedperiod_times_respawned_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "times_respawned_ally" )
	CAREER_STATS.rankedperiod_assists = RegisterAccumulatedStat_Int( rankedperiod_SES, "assists" )
	CAREER_STATS.rankedperiod_kills_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills_max_single_game" )
	CAREER_STATS.rankedperiod_win_streak_longest = RegisterAccumulatedStat_Int( rankedperiod_SES, "win_streak_longest" )
	CAREER_STATS.rankedperiod_win_streak_current = RegisterVariableStat_Int( rankedperiod_SES, "win_streak_current" )
	CAREER_STATS.rankedperiod_current_rank_score = RegisterVariableStat_Int( rankedperiod_SES, "current_rank_score", BADGES_UNLOCK_NEED )
	CAREER_STATS.rankedperiod_badge_award_level = RegisterVariableStat_Int( rankedperiod_SES, "badge_award_level", BADGES_UNLOCK_NEED )
	CAREER_STATS.rankedperiod_gained_rank_score_only = RegisterAccumulatedStat_Int( rankedperiod_SES, "gained_rank_score_only", BADGES_UNLOCK_NEED )

	StatEnumStruct rankedperiod_character_SES = RegisterStatEnumStruct( rankedperiod_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.rankedperiod_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_character_SES, "character_damage_done_max_single_game" )

                        
		StatEnumStruct arenasRankedperiod_SES = RegisterStatEnumStruct( null, "arenasrankedperiods", "eArenasRankedPeriodFlavor", allArenasRankedPeriodRefs )
		CAREER_STATS.arenas_rankedperiod_games_played = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "games_played" )
		CAREER_STATS.arenas_rankedperiod_current_rank_score = RegisterVariableStat_Int( arenasRankedperiod_SES, "current_rank_score", BADGES_UNLOCK_NEED )
		CAREER_STATS.arenas_rankedperiod_badge_award_level = RegisterVariableStat_Int( arenasRankedperiod_SES, "badge_award_level", BADGES_UNLOCK_NEED )
		CAREER_STATS.arenas_rankedperiod_gained_rank_score_only = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "gained_rank_score_only", BADGES_UNLOCK_NEED )

		                    
		CAREER_STATS.arenas_rankedperiod_placements_win = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "placements_win" )
		CAREER_STATS.arenas_rankedperiod_damage_done = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "damage_done" )
		CAREER_STATS.arenas_rankedperiod_damage_done_max_single_game = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "damage_done_max_single_game" )
		CAREER_STATS.arenas_rankedperiod_kills = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "kills" )
		CAREER_STATS.arenas_rankedperiod_deaths = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "deaths" )
		CAREER_STATS.arenas_rankedperiod_dooms = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "dooms" )
		CAREER_STATS.arenas_rankedperiod_assists = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "assists" )
		CAREER_STATS.arenas_rankedperiod_kills_max_single_game = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "kills_max_single_game" )
		CAREER_STATS.arenas_rankedperiod_win_streak_current_new = RegisterVariableStat_Int( arenasRankedperiod_SES, "win_streak_current_new" )
		CAREER_STATS.arenas_rankedperiod_win_streak_longest_new = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "win_streak_longest_new" )
		CAREER_STATS.arenas_rankedperiod_revived_ally = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "revived_ally" )
       


	CAREER_STATS.character_solo_dooms = RegisterAccumulatedStat_Int( character_SES, "solo_dooms" )       
	CAREER_STATS.character_solo_placements_top_5 = RegisterAccumulatedStat_Int( character_SES, "character_solo_placements_top_5" )
	CAREER_STATS.character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "character_solo_wins" )

	temp_statTemplateReference = CAREER_STATS.character_solo_dooms
	CAREER_STATS.solo_dooms    = RegisterExpensiveCalculatedStat_Int( null, "solo_dooms", 0,
		SetupCharacterStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	temp_statTemplateReference         = CAREER_STATS.character_solo_placements_top_5
	CAREER_STATS.solo_placements_top_5 = RegisterExpensiveCalculatedStat_Int( null, "solo_placements_top_5", 0,
		SetupCharacterStatSumEntryFunc_Int, [temp_statTemplateReference] )       

	CAREER_STATS.season02_event01_top5s_badge = RegisterAccumulatedStat_Int( null, "season02_event01_top5s_badge" )                            
	CAREER_STATS.season02_event01_character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "season02_event01_character_solo_wins" )
	CAREER_STATS.season02_event01_num_characters_with_solo_win = RegisterExpensiveCalculatedStat_Int( null, "season02_event01_num_characters_with_solo_win", 0,
		SetupGetNumSoloWinsWithAllCharactersIronCrown, [] )

	CAREER_STATS.s03e01_badge = RegisterAccumulatedStat_Int( null, "s03e01_badge" )
	CAREER_STATS.s03e02_winter_express_captures = RegisterAccumulatedStat_Int( null, "s03e02_winter_express_captures" )       

	CAREER_STATS.s03_duos_badge_play = RegisterAccumulatedStat_Int( null, "s03_duos_badge_play" )
	CAREER_STATS.s03_duos_badge_win = RegisterAccumulatedStat_Int( null, "s03_duos_badge_win" )
	CAREER_STATS.s03_duos_tiers_earned = RegisterExpensiveCalculatedStat_Int( null, "s03_duos_tiers_earned", 0, SetupGetDuosTiersEarned, [] )

	CAREER_STATS.s03e03_buffet_points = RegisterAccumulatedStat_Int( null, "s03e03_buffet_points" )       
	CAREER_STATS.s03e03_play_each_game_mode = RegisterAccumulatedStat_Int( null, "s03e03_play_each_game_mode" )       
	CAREER_STATS.s03e03_placement_top_5 = RegisterAccumulatedStat_Int( null, "s03e03_placement_top_5" )       

	CAREER_STATS.s04e01_buffet_points = RegisterAccumulatedStat_Int( null, "s04e01_buffet_points" )       
	CAREER_STATS.s04e02_buffet_points = RegisterAccumulatedStat_Int( null, "s04e02_buffet_points" )       

	CAREER_STATS.s05e01_buffet_points = RegisterAccumulatedStat_Int( null, "s05e01_buffet_points" )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_kills" )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_wins" )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_times_respawned_ally", 0 )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_combined_badge_earned", 0, SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned, [] )

	CAREER_STATS.s06e01_buffet_points = RegisterAccumulatedStat_Int( null, "s06e01_buffet_points" )
	CAREER_STATS.s06e01_campfire_damage_dealt_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_damage_dealt_in_zone" )
	CAREER_STATS.s06e01_campfire_players_killed_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_players_killed_in_zone" )
	CAREER_STATS.s06e01_campfire_wins = RegisterAccumulatedStat_Int( null, "s06e01_campfire_wins" )
	CAREER_STATS.s06e01_campfire_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e01_campfire_combined_badge_earned", 0, SetupGetCampfireCombinedBadgeEarned, [] )

	CAREER_STATS.s06e02_buffet_points = RegisterAccumulatedStat_Int( null, "s06e02_buffet_points" )
	CAREER_STATS.s06e02_shadow_royale_kills = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_kills" )
	CAREER_STATS.s06e02_shadow_royale_revives = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_revives" )
	CAREER_STATS.s06e02_shadow_royale_wins = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_wins" )
	CAREER_STATS.s06e02_shadow_royale_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e02_shadow_royale_combined_badge_earned", 0, SetupGetShadowRoyaleCombinedBadgeEarned, [] )

	CAREER_STATS.s07e01_buffet_points = RegisterAccumulatedStat_Int( null, "s07e01_buffet_points" )
	CAREER_STATS.s07e01_winter_express_captures = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_captures" )
	CAREER_STATS.s07e01_winter_express_kills = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_kills" )
	CAREER_STATS.s07e01_winter_express_damage = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_damage" )
	CAREER_STATS.s07e01_winter_express_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e01_winter_express_combined_badge_earned", 0, SetupGetWinterExpressCombinedBadgeEarned, [] )

	CAREER_STATS.s07e02_buffet_points = RegisterAccumulatedStat_Int( null, "s07e02_buffet_points" )
	CAREER_STATS.s07e02_airdropkitted_damage_dealt = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_damage_dealt" )
	CAREER_STATS.s07e02_airdropkitted_knockdowns = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_knockdowns" )
	CAREER_STATS.s07e02_airdropkitted_wins = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_wins" )
	CAREER_STATS.s07e02_airdropkitted_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e02_airdropkitted_combined_badge_earned", 0, SetupGetAirdropKittedCombinedBadgeEarned, [] )

	CAREER_STATS.s08ace_buffet_points = RegisterAccumulatedStat_Int( null, "s08ace_buffet_points" )

	                              
	CAREER_STATS.s08seasonal_nessie_dailies = RegisterAccumulatedStat_Int( null, "s08seasonal_nessie_dailies" )
	CAREER_STATS.s08seasonal_weapon_damage = RegisterAccumulatedStat_Int( null, "s08seasonal_weapon_damage" )
	CAREER_STATS.s08seasonal_character_wins = RegisterAccumulatedStat_Int( null, "s08seasonal_character_wins" )
	CAREER_STATS.s08seasonal_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08seasonal_combined_badge_earned", 0, SetupGetS08SeasonalCombinedBadgeEarned, [] )

	        
	CAREER_STATS.s08e01_buffet_points = RegisterAccumulatedStat_Int( null, "s08e01_buffet_points" )
	CAREER_STATS.s08e01_ringfury_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_2" )
	CAREER_STATS.s08e01_ringfury_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_3" )
	CAREER_STATS.s08e01_ringfury_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_4" )
	CAREER_STATS.s08e01_ringfury_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e01_ringfury_combined_badge_earned", 0, SetupGetRingFuryCombinedBadgeEarned, [] )

	        
	CAREER_STATS.s08e02_buffet_points = RegisterAccumulatedStat_Int( null, "s08e02_buffet_points" )
	CAREER_STATS.s08e02_wargames_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_2" )
	CAREER_STATS.s08e02_wargames_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_3" )
	CAREER_STATS.s08e02_wargames_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_4" )
	CAREER_STATS.s08e02_wargames_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e02_wargames_combined_badge_earned", 0, SetupGetWarGamesCombinedBadgeEarned, [] )

                          
                                                                                                                                                
       

	        
	CAREER_STATS.s08e04_finale_completed = RegisterAccumulatedStat_Int( null, "s08e04_finale_completed", 0 )
	CAREER_STATS.s08e04_finale_not_completed = RegisterCachedCalculatedStat_Int( null, "s08e04_finale_not_completed", 0, SetupGetS08E04FinaleNotCompletedForStat, [] )

	     
	                                                                                                                                            
	                                                                                                                                          
	                                                                                                                                            

	                  
	CAREER_STATS.s09e01_buffet_points          = RegisterAccumulatedStat_Int( null, "s09e01_buffet_points" )
	CAREER_STATS.s09e01_br_damage_done         = RegisterAccumulatedStat_Int( null, "s09e01_br_damage_done" )
	CAREER_STATS.s09e01_arenas_placements_win  = RegisterAccumulatedStat_Int( null, "s09e01_arenas_placements_win" )
	CAREER_STATS.s09e01_br_dooms               = RegisterAccumulatedStat_Int( null, "s09e01_br_dooms" )
	CAREER_STATS.s09e01_combined_badge_earned  = RegisterExpensiveCalculatedStat_Int( null, "s09e01_combined_badge_earned", 0, SetupGetGenesisCombinedBadgeEarned, [] )

	                         
	CAREER_STATS.s09e02_01_arenas_matches_played = RegisterAccumulatedStat_Int( null, "s09e02_01_arenas_matches_played" )
	CAREER_STATS.s09e02_02_arenas_dooms          = RegisterAccumulatedStat_Int( null, "s09e02_02_arenas_dooms" )
	CAREER_STATS.s09e02_03_arenas_damage_done    = RegisterAccumulatedStat_Int( null, "s09e02_03_arenas_damage_done" )
	CAREER_STATS.s09e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_01_buffet_points" )
	CAREER_STATS.s09e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_02_buffet_points" )
	CAREER_STATS.s09e02_03_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_03_buffet_points" )

	                  
	CAREER_STATS.s11e01_buffet_points              = RegisterAccumulatedStat_Int( null, "s11e01_buffet_points" )
	CAREER_STATS.s11e01_winter_express_damage_done = RegisterAccumulatedStat_Int( null, "s11e01_winter_express_damage_done" )
	CAREER_STATS.s11e01_arenas_damage_done         = RegisterAccumulatedStat_Int( null, "s11e01_arenas_damage_done" )
	CAREER_STATS.s11e01_br_dooms                   = RegisterAccumulatedStat_Int( null, "s11e01_br_dooms" )
	CAREER_STATS.s11e01_combined_badge_earned      = RegisterExpensiveCalculatedStat_Int( null, "s11e01_combined_badge_earned", 0, SetupGetRaidersCombinedBadgeEarned, [] )

	                      
	CAREER_STATS.s11e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_01_buffet_points" )
	CAREER_STATS.s11e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_02_buffet_points" )
	CAREER_STATS.s11e02_03_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_03_buffet_points" )
	CAREER_STATS.s11e02_01_br_dooms				 = RegisterAccumulatedStat_Int( null, "s11e02_01_br_dooms" )
	CAREER_STATS.s11e02_02_arenas_games_played   = RegisterAccumulatedStat_Int( null, "s11e02_02_arenas_games_played" )
	CAREER_STATS.s11e02_03_br_damage_done        = RegisterAccumulatedStat_Int( null, "s11e02_03_br_damage_done" )

	                             
	CAREER_STATS.s12ace_buffet_points            = RegisterAccumulatedStat_Int( null, "s12ace_buffet_points" )
	CAREER_STATS.s12ace_br_damage_done			 = RegisterAccumulatedStat_Int( null, "s12ace_br_damage_done" )
	CAREER_STATS.s12ace_control_captures         = RegisterAccumulatedStat_Int( null, "s12ace_control_captures" )
	CAREER_STATS.s12ace_br_dooms                 = RegisterAccumulatedStat_Int( null, "s12ace_br_dooms" )
	CAREER_STATS.s12ace_combined_badge_earned    = RegisterExpensiveCalculatedStat_Int( null, "s12ace_combined_badge_earned", 0, SetupGetS12ACECombinedBadgeEarned, [] )

	                   
	CAREER_STATS.s12e01_buffet_points            = RegisterAccumulatedStat_Int( null, "s12e01_buffet_points" )
	CAREER_STATS.s12e01_br_damage_done			 = RegisterAccumulatedStat_Int( null, "s12e01_br_damage_done" )
	CAREER_STATS.s12e01_control_captures         = RegisterAccumulatedStat_Int( null, "s12e01_control_captures" )
	CAREER_STATS.s12e01_br_dooms                 = RegisterAccumulatedStat_Int( null, "s12e01_br_dooms" )
	CAREER_STATS.s12e01_combined_badge_earned    = RegisterExpensiveCalculatedStat_Int( null, "s12e01_combined_badge_earned", 0, SetupGetWarriorsCombinedBadgeEarned, [] )

	                                    
	CAREER_STATS.s12e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s12e02_01_buffet_points" )
	CAREER_STATS.s12e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s12e02_02_buffet_points" )
	CAREER_STATS.s12e02_01_br_dooms              = RegisterAccumulatedStat_Int( null, "s12e02_01_br_dooms" )
	CAREER_STATS.s12e02_02_br_damage_done        = RegisterAccumulatedStat_Int( null, "s12e02_02_br_damage_done" )

	                                       
	                                     
	CAREER_STATS.s13e01_buffet_points            = RegisterAccumulatedStat_Int( null, "s13e01_buffet_points", CHALLENGES_NEED )
	CAREER_STATS.s13e01_br_damage_done			 = RegisterAccumulatedStat_Int( null, "s13e01_br_damage_done", CHALLENGES_NEED | BADGES_UNLOCK_NEED )
	CAREER_STATS.s13e01_control_rating           = RegisterAccumulatedStat_Int( null, "s13e01_control_rating", CHALLENGES_NEED | BADGES_UNLOCK_NEED )
	CAREER_STATS.s13e01_br_dooms                 = RegisterAccumulatedStat_Int( null, "s13e01_br_dooms", CHALLENGES_NEED | BADGES_UNLOCK_NEED )
	CAREER_STATS.s13e01_combined_badge_earned    = RegisterExpensiveCalculatedStat_Int( null, "s13e01_combined_badge_earned", CHALLENGES_NEED | BADGES_UNLOCK_NEED, SetupGetAwakeningCombinedBadgeEarned, [] )

	                                       
	                                
	CAREER_STATS.s13e02_01_buffet_points          = RegisterAccumulatedStat_Int( null, "s13e02_01_buffet_points", CHALLENGES_NEED )
	CAREER_STATS.s13e02_02_buffet_points          = RegisterAccumulatedStat_Int( null, "s13e02_02_buffet_points", CHALLENGES_NEED )

	                                                                                                                                                                                                                         
	CAREER_STATS.s12e04_challenge_1            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_1", CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s12e04_challenge_2            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_2", CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s12e04_challenge_3            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_3", CHALLENGES_CALC_DEPENDS )

	                   
	CAREER_STATS.s13_flash_01_buffet_points    = RegisterAccumulatedStat_Int( null, "s13_flash_01_buffet_points", CHALLENGES_NEED )

	                      
	CAREER_STATS.kills_with_red_weapons_any_mode = RegisterAccumulatedStat_Int( null, "kills_with_red_weapons_any_mode", CHALLENGES_NEED )            
	CAREER_STATS.damage_with_red_weapons_any_mode = RegisterAccumulatedStat_Int( null, "damage_with_red_weapons_any_mode", CHALLENGES_NEED )
	CAREER_STATS.br_top_10_or_arena_win          = RegisterAccumulatedStat_Int( null, "br_top_10_or_arena_win", CHALLENGES_NEED )            
	CAREER_STATS.melee_damage_any_mode           = RegisterAccumulatedStat_Int( null, "melee_damage_any_mode", CHALLENGES_NEED )            
	CAREER_STATS.kills_or_assists_any_mode       = RegisterAccumulatedStat_Int( null, "kills_or_assists_any_mode", CHALLENGES_NEED )            
	CAREER_STATS.ring_closings_survived			 = RegisterAccumulatedStat_Int( null, "ring_closings_survived", CHALLENGES_NEED )            
	CAREER_STATS.health_restored_any_mode        = RegisterAccumulatedStat_Int( null, "health_restored_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.self_revives					 = RegisterAccumulatedStat_Int( null, "self_revives", CHALLENGES_NEED )           
	CAREER_STATS.executions_any_mode			 = RegisterAccumulatedStat_Int( null, "executions_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.damage_done_any_mode		 	 = RegisterAccumulatedStat_Int( null, "damage_done_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.top_3_with_3_kill_ko_assist	 = RegisterAccumulatedStat_Int( null, "top_3_with_3_kill_ko_assist", CHALLENGES_NEED )           
	CAREER_STATS.headshots_any_mode	 			 = RegisterAccumulatedStat_Int( null, "headshots_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.damage_done_first_ring_round_br = RegisterAccumulatedStat_Int( null, "damage_done_first_ring_round_br", CHALLENGES_NEED )           
	CAREER_STATS.damage_done_hipfire_any_mode    = RegisterAccumulatedStat_Int( null, "damage_done_hipfire_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.damage_done_ordnance_any_mode   = RegisterAccumulatedStat_Int( null, "damage_done_ordnance_any_mode", CHALLENGES_NEED )           
	CAREER_STATS.evoarmor_evolves_to_red         = RegisterAccumulatedStat_Int( null, "evoarmor_evolves_to_red", CHALLENGES_NEED )           
	CAREER_STATS.arenas_win_with_5_kill_ko_assist = RegisterAccumulatedStat_Int( null, "arenas_win_with_5_kill_ko_assist", CHALLENGES_NEED )           
                         
                                                                                                                                                      
       

	CAREER_STATS.first_played_unixtime = RegisterExpensiveCalculatedStat_Int( null, "first_played_unixtime", TRACKERS_NEED, SetFirstPlayedUnixTime, [] )

                      
		CAREER_STATS.hovervehicle_occupant_meters_traveled = RegisterAccumulatedStat_Int( null, "hovervehicle_occupant_meters_traveled", TRACKERS_NEED | CHALLENGES_NEED )       
                            

	CAREER_STATS.clubs_games_played_with_club = RegisterAccumulatedStat_Int( null, "clubs_games_played_with_club", BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club", BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_squad_alive = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_squad_alive", BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_streak = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_streak", BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths", BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths_or_knockouts = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths_or_knockouts", BADGES_UNLOCK_NEED )
	                                                                                                                            
	                                                                                                                                           
	                                                                                                                                               

                         
		CAREER_STATS.gamemode_control_objectives_captured = RegisterAccumulatedStat_Int( null, "gamemode_control_objectives_captured", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_personal_exp_points_earned = RegisterAccumulatedStat_Int( null, "gamemode_control_personal_exp_points_earned", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_capture_bonuses_claimed_by_team = RegisterAccumulatedStat_Int( null, "gamemode_control_capture_bonuses_claimed_by_team", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_killed_enemy_1_tier_higher = RegisterAccumulatedStat_Int( null, "gamemode_control_killed_enemy_1_tier_higher", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_killed_enemy_2_tier_higher = RegisterAccumulatedStat_Int( null, "gamemode_control_killed_enemy_2_tier_higher", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_killed_objective_attacker = RegisterAccumulatedStat_Int( null, "gamemode_control_killed_objective_attacker", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_killed_objective_defender = RegisterAccumulatedStat_Int( null, "gamemode_control_killed_objective_defender", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_became_expleader = RegisterAccumulatedStat_Int( null, "gamemode_control_became_expleader", CHALLENGES_NEED | BADGES_UNLOCK_NEED )
		CAREER_STATS.gamemode_control_killed_expleader = RegisterAccumulatedStat_Int( null, "gamemode_control_killed_expleader", CHALLENGES_NEED | BADGES_UNLOCK_NEED )
		CAREER_STATS.gamemode_control_highest_exp_as_expleader = RegisterAccumulatedStat_Int( null, "gamemode_control_highest_exp_as_expleader", CHALLENGES_NEED )
		CAREER_STATS.gamemode_control_time_on_objective = RegisterAccumulatedStat_Int( null, "gamemode_control_time_on_objective", TRACKERS_NEED )
                               
}
#endif


#if SERVER
                                                                                                                                                      
                                                                                                                        
                                                                                               
 
	                         
	 
		                                                            
		                                                                                                             
		                         
		                                                                                                    
	 
	                             
	 
		                                            
		                                                                                                             
		                       
		                                                                                                    
	 
 
#endif



                   
                   
                   
                   
                   
                                                                            
bool function IsValidMapForStats()
{
	if ( IsSurvivalTraining() )
		return false

	if ( IsFiringRangeGameMode() )
		return false

	if ( IsLobby() )
		return false

	return true
}

#if SERVER
                                                
 
	                           

	                             
		            

	                                       
		            

	           
 

                                   
 
	       
	                                                         
		            
	      

	                                       
		            

                       
                                     
              
       

                               
	                           
		            
       

                  
	                  
		            
       

                         
		                                   
			            
       

	                           
		            

	                  
		            

	                                    
		            

	           
 

                                                    
 
	                                            
	                            
		            

	                       
		            

	                                                                        
	                                                                                           
		            

	           
 

                                
                                              
 
	               

	                                                                 
	                   
		           

	          
 
#endif

 bool function CurrentModeSupportsCustomStats()
 {
	 string mode = ""

	 #if UI
	 if( IsLobby() )
		 mode = GetPlaylistVarString( Lobby_GetSelectedPlaylist(), "stats_match_type", "survival" )
	else

	 #endif
	 {
	  	mode = GetCurrentPlaylistVarString( "stats_match_type", "survival" )
	 }

	 Assert( STATS_MATCH_TYPES.contains( mode ), "Invalid Playlist var stats_match_type " + mode )

	 return ( STATS_ALTERNATE_MODE_REFS.contains( mode ) )
 }

 bool function CurrentModeIsSurvival()
 {
	  string mode = ""

	 #if UI
	 if( IsLobby() )
		 mode = GetPlaylistVarString( Lobby_GetSelectedPlaylist(), "stats_match_type", "survival" )
	else
	 #endif
	 {
	  	mode = GetCurrentPlaylistVarString( "stats_match_type", "survival" )
	 }

	return mode == "survival"
 }

                                                                                                                         
                                                                                                                        
                                                                                                                        
#if SERVER
                                    
 
	                   
	               
 
                                             
 
	                    
	               
 
                                                                                      
 
	                                           
 
                                   
 
	                      
	                                             
		                                  
 
                                                                                       
 
	                                                               
 
                                                                  
 
	                                                                       
 
                                     
 
	  
 

                                                                         
                                                             
 
	                                                                          
	                                      

	                                       
		      

	                                     
	                                     
                  
		                  
			                               
       

                       
                                      
   
                                  
                                  
   
       

                               
		                           
		 
			                               
			                               
		 
       

                         
		                                   
		 
			                               
			                               
		 
       

	                           
	 
		                               
		                               
	 
	                  
	 
		                               
		                               
	 

                           
		                       
		 
			                               
			                               
		 
       

	                                                                                       

	                                                                

	                                            
	                  
	                                                                                            
	                                                                                                          
	                             
	 
		                                                                                                                 
		                   
	 
	                                                         

	                                                                                        
	                                                            

	                                                                                        
	                                                                                                                

	                                                                      

	                                
	 
		                                                                               
		                                                                                                       
		                                                                                                                   

		                    
			                                                                                               
	 

	                      
	                                                                              
	                                       
	 

		                                                                      
		                                                                                              

		                                                                                                                                        
		                                              
			                                                                                             

		                                                                                                                                               
		                                                     
			                                                                                                         
	 

                           
	                                                             
      
                                 
       
	 
		                                 
			                                                                                                             
		                                  
			                                                                                                              
		                                                                                                                                                    
		                                                 
			                                                                                                                                                               
		                                                                                                                     
		                                          
			                                                                                                                          
	 

	                                                                  
	 
		                                                                                                                               

		                                                                                                                                                                                                            
		                                                         
			                                                                                                                                                                                          

		                                                                                                                                                                           
		                                                
			                                                                                                                                                                                
	 

	                    
	                                                                         
	 
		                                                                                                                    

		                                                                                                                                                                                                   
		                                                         
			                                                                                                                                                         

		                                                                                                                                                                                          
		                                                
			                                                                                                                                             
	 

	                                                                                                                         

	                                                             
	 
		                                                                                                                                           

		                                                                                                                                                                                                                      
		                                                       
			                                                                                                                                                                                                                                 

		                                                                                                                                                                                       
		                                                
			                                                                                                                                                                                            

		                      
		  	                                                                                                                                                           
	 

                        
		                                                                                                 
		                                                                                                                                       

		                                                                         
		 
			                                                                                                                                                        
			                                                                                                                                                                     

			                                                                                                                                                                                                                 
			                                                             
				                                                                                                                                                                                           

			                                                                                                                                                                                                          
			                                                      
				                                                                                                                                                                                
		 
       


	                                                                                                                       

	                                                  

	                                                                          
	 
		                                                                                                                             

		                    
		                    
		                                         
		 
			       
			                                                                          
				     

			                                                                                               

			                
				        

			                                                                                            

		 
	 

	                                                    
	 
		                                                                         
		                                                                                                     
		                             
		 
			                                                                                                            
			                   
		 
		                                                         

		                                                                                                            
		                                                                                                             
		                                
		                     
			                                            
		    
			                                                                   
		                       

		                        
		                                                                                                                                                                       
		 
			                                                    
			 
				                                                                        
                           
					                    
						                                                                                         
          

				                                                                            
				                                                                                                                                          
				                                                                                                                                          
				                                              
					                                                                                         

				                                     
				 
					                                                                                                                        

					                                                                                                                            
					                                                                                                                                                                                                
					                                                                                                                                                                                                
					                                                              
						                                                                                                                                         
				 

				                                                                                                
			 

                          
				                    
				 
					                
					 
						                
						 
							                                                                                                                        
							                                                                                                                                                    
							                                                                                                                                                          
							                                    
								                                                                                                                                                    
						 

						                                                                            
						 
							                                                                                            
						 

						                                                             
						                                                               
						 
							                                                                                           
						 

						                                                     
						                                                                                            
							                                                                                                   

						                                                               

						        
						                                                                         
						 
							                                                                                                                                                        

							                                                                                                                                                                
							                                                                                                                                                                                                             
							                                                                                                                                                                                                             
							                                                                
								                                                                                                                                                                                    
						 

					 

				 
         

			                                             
			 
				                                                                                 
				                                                                                                         
				                                                                                         

				                                                                                     
				                                                                                                                       
				                                                                                                                       
				                                          
					                                                                                                                       

				                                                                                                                                                           
				                                                                                                   
				                                                                                                                                          
				                                                                                                                                          
				                                                    
					                                                                                                                                               

				                   
				 
					                                                                                                    
				 

				                                     
				 
					                                                                                                                                 
					                                                                                                                                                       

					                                                                                                                                     
					                                                                                                                                                                             
					                                                                                                                                                                             
					                                                      
						                                                                                                                                                                                   
				 

				                                                             
				 
					                                                                                                                                             

					                                                                                                                                                 
					                                                                                                                                                                                         
					                                                                                                                                                                                         
					                                                      
						                                                                                                                                                                                               
				 

				                    
				 
					                                                                                                 

					                                                               
					  	                                                                                                                                                             
				 

				             
				                                                           
				 
					                                                                                                                               
						       
				 
				                 
					                                                     

				                           
				                       
				                          
				                          
				                       
				                       
				                                                                                  
				 
					                                                                 
					                                               
						              
					                                                                                  

					                                 
					                                                 
					                                                                
					                                   
					                                       
				 

				                                                    

				                                                              
				 
					                                                                                                                    
					                           
						                                                                                                                    

					                    
					 
						                                                                                                           
						                           
							                                                                                                                        
					 
				 

				                                  
					                                                                                                                          

				                                                                                                             
				 
					                                                                                                  
					                                                                                                                          

					                    
						                                                                                                             
				 

				                       
				 
					                                                                                              
					                   
						                                                                                                    
					                     
						                                                                                                                
				 

				                                                                                                         
					                                                                                                      
				                                                                                                  

				                                                                          
				 
					                                                                                                                       
					                                                               
						                                                                                                                                    
				 

				                                                                 
					                                                                                                                       
			 

			                                                                           
			 
				                                     

				                                                                                
				                                                                                                        
			 
		 
		                     
	 

	                                                                                                                                        
	                                                                                                          
	                                                                                                                                            
	                                                        
	  

	                                                           
	                                            
	 
		                                                                                                  

		                                                                               
		                                                                                             
		                                     
			                                                                                                                               
		                                                             
			                                                                                                                                           
	 

	                                                   
	 
		                                                                      

		                                     
			                                                                                                                      
	 

                       
	                    
	 
		                                                                                  
		                                                         
		               
		 
			                                                                                                                   

			                                                                          
				                                                                                                                                                           
		 

		                                                                                                                                                           
		                                                 
			                                                                                                                                                 

		                                                                                                                                                 
		                                       
			                                                                                                                                     
	 
      

	                                             
	 
		                                                                                   
		                                                                                                           

		                                                     
		                                                                                            
			                                                                                              
	 

	                                             
	 
		                   
			                                                                                                                

		                                                                                   
		                                     
			                                                                                                                                                         

		                                                             
		 
			                                                                                                                                             
		 
	 

	                                              
	 
		                                                                                    
		                                                                                         

		                                                             
		 
			                                                                                                                                              
		 
	 

	                                
	 
		                                                                          
		                                                                                                   

		                                                                                                                                                             
		                                             
			                                                                                                                                                                
	 

	                                                                                            
	                                                                                        

 

                                                                           
 
	                                                                                                                         

	                                                             
	 
		                                                                                                                                                     
		                                                                                                                                                  

		                          
		 
			                                                                                                                                                                       
		 
	 
 

                       
                                                                                 
 
	                                                                                                                                       

	                                                                         
	 
		                                                                                                                                                                  
		                                                                                                                                                               

		                          
		 
			                                                                                                                                                                                    
		 
	 
 
      

                                                         
 
	                
		      

	                                           
	                                

	                     
	 
		                                                                                                                   
		                           
			                                                                                                                                                                                                                                        
	 

                       
	                          
	 
		                                                                                                                           
		                           
			                                                                                                                                                                                                                                                          
	 
      

	                      
	                                                           
	 
		                                                                                                                                                    
	 
	                                                                                            
	                                                                                                         
	                                                                                                                    
	                                                                                                           
	                                                                                              

	                                                                              
	                                                                             
	                                               

	                                                                                      
	                                                                                                     
	                                                         

	                                                                                     
	                                                                                      
	                                                   

	                                                                                      
	                                            
 

                                                                              
 
	                                       
		      

	                                       
	                                                                       
	                                              
		      

	                          
	                                                               
	                                                                       
		      

	                                                                              
		      

	                                                                                            
		                           
 

                                                  
 
	                                     
		                                  
 
                                                
 
	                                    
	                                          

	                                     
	 
		                                

                         
		                    
		 
			                                                                              
			 
				                                                                                    

				                                                                                              
				                                                                        
				                                                                                                                  
			 
		 
        
	 
 
                                                                                              
 
	                                       
		      

	                         
		      

	                       
	 
		                                 
			                                                                                                       
			     
		                               
			                                                                                                       
			     
		                                  
			                                                                                                         
			     
		                              
			                                                                                                      
			     
	 
 
                                                                  
 
	                                       
		      

	                                                                                                
	                                                                                                   

 
                                 
 
	             
 
#endif

#if SERVER
                                                    
                                                                                      
 
	                                        

	                
		      

	                                           
		                                                                                         
 

                                                                                                     
 
	                             
	                           
		      

	                                         
		      

	                                                                                                      
 

                                                            
 
	                           
	                         
		      

	                                       
		      

	                                                                               
 
#endif


                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER
                                                          
 
	                       

	                              
	                                                                            
	                       
		                                                                

	                                                                   
	 
		                      
	 
 

                                                                                                     
 
	                                                                                                                                                                      
	                                                              
 

  
                                  
                                 
                                  
                                      
                                
                                                                                                             
                            
                          
                               
                                      
  
                                                                                       
 
	                
		      

	                         

	  
	                                                
		                   
	                                                     
		                   
	                                                      
		                   
	                                                
		                   
	                                                                     
		                   
	                                                
		                    
	                                              
		                    
	                                                  
		                    
	                                                         
		                   
	  

	                                                 
 

                                                             
 
	                                                                                                         

	                                                
	                               

	                                                           

	                                                                                

	                                    
	 
		        
	 

	                                                         
	                                                      
	                                      
	                                                                                   

	                                                                                                                 
 

                                                            
 
	                                                
	                               

	                                                           

	                                                                              

	                             
	 
		        
	 

	                                                         
	                                                      
	                                      
	                                                                                   
 
#endif



                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER
                                                
 
	                           
 

                                                                                                           
 
	                                                
		      

	                                                                                                               
 

                                                                                         
 
	                                         
		      

	                                                                      

	                                                 
	 
		                         
		 
			                                                                                                  
			                                                                            

			                                                                 

			                                                                                                 

			                                     
				                                                                                                               

			                                            
				                                                                     

			               
                          
				                                                                                                                                       
				                                                                         
				 
					                                                                                                                                                   
				 
         
		 
	 

	                                                                                                                                                                            
	                                                                                                  
	                                            
	 
		                                                                                                                         
		                                         
		 
			                                                 
			 
				                                                                                                    
				                                                                                           
			 
		 
	 

	                                             

	                                   
		      

	                                                                                   

	                                                 
	 
		                         
			      

		                                           
		                                  
		                                       

		                                 
		                           
		                                           
			                                                    
		    
			                                                     

		                                       
			                                                                              
		    
			                            

		                                                                                                  
		                                                                            

		                                                                          
		                                                                                                          

		                                              
                      
		                                                                                                                        
			                                                                                    
        

		                   
			                                                                                                               

		                                            
		 
			                                                                                                                         
			                                         
			 
				                                                                                                    
				                                                                                                    
				                                                                                                                                    
			 
		 

		                                     
		 
			                                                                                                                          
		 

		                                                                                                                         
		                                                             
		 
			                                                                                                                                      
		 

		                                                                 
		                        
		                                      
		                                    
		                                                                                                                  
		                                   
			                                                                                                             

		                                            
		 
			                                                                              
			                                                                                       
			                          
		 
	 
 
                                                                                     
 
	                           

	                                                
 

                                                                 
 
	                                    

	                                       
		      

	                                          
	 
		                                                                   
		                                                                  
		 
			                                                                                             
			                                                                
		 

		                               
	 

	                                        

	                                                                      

	                                                                      
	                                     
		                                                                                                                      

	                                                           
	                                                        
		                                                                                             

	                                                                                                                    
	                                                            
		                                                                                                  

	                  
	 
		                                                                               

		                                                                                              
		                                                                        
		                                                                                                             

		                                     
			                                                                                                                               

		                                                                                                                         
		                                                             
			                                                                                                                                           
	 

	               
                        
		                                                                                                                                       
		                                                                         
			                                                                                                                                                        
       
 


                                                                                      
 
	                           
	                             
	                                                                    
	                           

	                                                            
	                             

	                                                                               
	                           
	 
		                       
		                                       
			                                                         
		                                                                          
	 
	                

	                                       
		      

	                                        

	                                                                                              
	                                                                        
	                                                                      

	                                                                
	                                                                                              
	                                     
	 
		                                                                                                                
	 

	               
                        
		                                                                                                                                       
		                                                                         
		 
			                                                                                                                                                  
		 
       

	                  
	 
		                                                                         
		                                                                                                       

		                                     
		 
			                                                                                                                         
		 

		                                                                                                                         
		                                                             
		 
			                                                                                                                                     
		 
	 

	                         
		                                              

	                            
	                          
	 
		                                                                                       
		                                                                            
		 
			                                                                                                        
			 
				                                                                                     
				                                                                                                 
			 
			                       

			                                                                      

			                        
			                                                                                        

			                  
			 
				                                                                               
				                                                                                                                                        
			 
			                                                  
		 

                          
			                                      
			                              
			 
				                                                       
					                                                                                                      
			 
                                
	 

	                       
	             
	                          
	                      
	                               

	                                       
	 
		                                                               
		                                                                
		                                                                 
		 
			                 
			                         
			                                                                                   
			                                                             
			                                                    
		 
	 

	                                         
	 
		                 
		                 
		                                   
		                                       
		                                                                                      
	 

	                                               

	             
	                 
	 
		                                                                                                                                 
		                                                                                                               
			      

		                                                    
		                                                                                                                  
		                                                                                              
		                                          
		 
			                                                                                                                     
			                                       
			 
				                                                                                                  
				                                   
					                                                                                                  

                            
                                               
                                                                                                                           
                                                                                                          
          
			 
		 
		                                                    
		                                                                                            

		                                                               
		                                                                          

		                                     
			                                                                                                             

		                                                                       
		                                                                                             

		                                                                             
		                                                           
		                                   
		                                                            
		                                                                     
	 

	                   
		      

	                 
	 
		                                   
			      

		                                                                                                                                 
		                                                                                                               
			      

		                                                                       

		                       
		                                                                       
		                                                                        
		                                                                                   
		                                                                                                      

		                                     
		 
			                                                                                                                           

			                                                                                                                        

			                                                                                                                                                    
		 

		                                                                                                                         
		                                                             
		 
			                                                                                                                                       

			                                                                                                                                    
		 

		                                                                                                                            
			                                                                                                                      

		                                     
		                                          
		                                           
		 
			                                                                                                                   
			                             
		 

		                                                                          
		 
			                                                                                         
			                                                                                                                       
		 

		                                                                                              

		                                          
		 
			                                                                                                                     
			                                       
			 
				                                                                                                

				                                                                                                

				                                                                                                                              
			 
			    
			 
				                                                                       
			 
		 
		    
		 
			                                                                                                                                            
		 
	 
 

                                                                
 
	                                    
	                                    

	                                                
		      

	                                                                      

	                                                                          
	                                                                                   
	                                     
		                                                                                                                          

	                                                                                             
	                                                                                                     

	               
                        
		                                                                                                                                       
		                                                                         
		 
			                                                                                                                                                            
		 
       

	                             
		      

	                                                                                   
	                                                                                            

	                                     
		                                                                                                                                   

	                                                                                                                         
	                                                             
		                                                                                                                                               
 

                                                                        
 
	                                                   
		      

	                                     
		      

                  
		                   
			      
       
 

                                                                    
 
	                                       
		      

	                                                                                   
	                                                                                            
	                                                                                                                    
	                           
		                                                    
 

                                                          
 
	                                                                
	 
		                                                     
			                                     
	 
 

                                                  
 
	                                                                
	 
		                                     
	 
 

                                                                           
 
	                            
 


                                                                                                
 
	                                              
		      

	                                                                                              

	                                                                      
	                                     
		                                                                                                                                              

	                                                                                                                         
	                                                             
		                                                                                                                                                          

	                                                            
		                                                                                                         

	                                                                       
	 
		                                                           
		                                                  
		 
			                                                                                               
			                                                            
			                                                                                                                                      
		 
	 

	                                           

	                                                   
	 
		                                                                            
		                                                                                    
		 
			                                                                                                      
			                                                                                  
		 

		                                        
	 
 
#endif         







                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER

                                                                    
 
	                           
	                           

	                            
		      
	                                                                                           
		      

	                                                                          
	                       
 

                                                                                                                                    
 
	                           
	                           
	                                                                         
	
	                       
		                                               

	                                   
		      

	                                                                               
	                                 
	 
		                                                                        

		                                                                                              
		                                                                        
		                                                                                                      

		                                                                                          

		                                                                                                

		                                                                                                                              

		                                                                          
		                       
	 
	    
	 
		           
	 
 

                                                                                                                                      
 
	                           
	                            
		      
	                         
		      
	                                                                           
		      
	                                                                                             
		      

	                                                                                    
	                                    
		      

	                                                  
	                                              
	                                                                            
	                      
	                 
		                           
 

                                                                                                                                                           
 
	                           

	                       
		                                                                                                 

	                                              
	                                                                    
	 
		                                                       
		      
	 

	                                         
	                                         
	                                         
	                                         
	                                         
	                                         
		      
	                                         
	                                         
	                                         

	                          
	 
		                                                       
	 

	                         
		                                           

	                                                                      

	                                                 
	 
		                                                  

		                        
		 
			                                                  
			                                              

			                                          
			                                                                                                    

			                             
			                                                                                  

			                                                                                              
			                                                              
				                                                                                                     

			                                     
			 
				                                                                                                                                  
			 

			               
                          
				                                                                                                                                       
				                                                                         
				 
					                                                                                                                                                                    
				 
         

			                                                                                                  
			                                                                            
			                                                                                                                  
			                                                                                                                                    

			                                                   
			                                                        
					                                                                           
			 
				                                                     
			 
			                                                                       
			                                                                                
			                                                                  
                  
			                                                                         
         

			                                                                                    
			                                    
			 
				                                                                                                  
				                                                                            
				                      
				                 
					                           

				                           
				                                                                       
					                                                                                                                        

				                             
					                                                                                                             

				                                                                                                         
				                                 
				 
					                                                                                          

					                                                                                                          
					                                                                                                                                            

					                 
					 
						                                                                     
						                                                                                       
					 

					                                                                                                         
					                                         
						                                                                                                            

					                                                                                            
					                                   
						                                                                                                                


				 
				    
				 
					           
				 
			 
		 
		                          
		 
			                   
			 
				                            
				 
                                                
                               
						                        
            
                        
                       
            
							                                                                                                                    
							     
           
					                  
						                                                                                                                     
						     
				 
			 

		 

		                                                      
		                                     
			      

		                        
		 
			                                                  
			                                              

			                                   
			                                                                                           

			                                                         
			                                            
				                                                                                                               

			                                              
                       
			                                                                                                                        
				                                                                                                     
         

			                                                 
			                             
				                                                                                                  

			                                                                                                  
			                                                                            
			                                                                                                                           

			                                     
			 
				                                                                                                                                                                         
				                                                                                                                                           
			 

			                                                                                                                         
			                                                             
			 
				                                                                                                                                                       
			 

			                                                                                    
			                                    
			 
				                                                                                                         
				                                 
				 
					                                                                                          
					                                                    
					                                                                         
					                 
						                                                                              

					                                                                                                         
					                 
						                                                                                                              

					                                                                                          

					                                                                                                                   
					                                                                                                 
					                 
						                                                                                                      

					                                                                                                                                                   
					                                                                                                                                 
					                 
						                                                                                                                                      
				 
				    
				 
					           
				 
			 
		 
	 

	                                                           
	 
		                                                                                          
	 
 
#endif



                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER

                                        

                                                                                                                                                     
 
	                                                                     

	                                     
		      

	                                                                            
	                                                                 

	                                                          
	                                                       
	 
		                                       
		                                                                  
		 
			                                          
			 
				                                                                                      
				                                                            

				                                                                                        
				                                                                                                                
			 
			                                      
		 
	 

	                                 
		      

	                                           
	 
		                                    

		                                                                              
		                                       
		 
			                                                                                                    
			                                                                                                                      
			 
				                                    
				                                                                                   
				 
					                                                                                                
				 
			 
		 
	 
	                                 

	                                                     
	                                            
	 
		                                             
		                         
		                             
		 
			                                                         
			                                                 
				                  
		 
		                                                                                                                                                                  
		 
			                                                                                   
			                                  
		 
	 

	                                                           
	 
		                     
		 
			                                                                                 
		 
		                          
		 
			                                                                                      
			                                       
				                                                                                       
			                                             
				                                                                                        
		 
	 
 

                                                    
 
	                         
 

                                                                                           
 
	                                

	                                                           
		                                        
 

                                                            
 
	                                  
		      

	                                                                                         
 

                                                                               
 
	                                  
		      

	                                                                                                    
	                                                                                                   
 

                                                                              
 
	                                                                
		      

	                                                                            
 

                                                              
 
	                          
	   
	  	             
	   
 

                                                                                         
 
	                                                                             
		                                                                                             
 

                                                                         
 
	                                                                                             
 

                                                                                  
 
	                                                                                             
 


                                 
                                                                         
 
	                     
		      

	                              
		      

	                                                    

	                                                                                                                                                 
	                                                                                                 
	                                                                                       
	                                                                                                       
 

                                                                         
 
	                                                                      
	                                     
	 
		                                                               
		                                                                                                                                                                                                            
	 
 

                                                                                                          
                                                                                 
 
	                                
	                                      

	                     
		      

	                                                                   

	        

	                                                                    
	                                                                    
		                                                                                                                      
	    
		                                                                                                                  

	        

	                                                                                                             

	        

	                                                                                                                         
 

                                                                                 
 
	                                
	                                      

	                                                                      
	                                     
		                                                                                                                                          
 
                               

                                                                  
 
	                                   
		      

	                                                                                   
	                
		                                                                                             
	                     
		                                                                                          
 

                                                                                          
 
	                                   
		      

	                                                                                                          

 

#endif

                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER

             
                                                                                
 
	                                       
		      

	                  
		      

	                     
	 
		                                                        
		                                                                                                       
	 
	    
	 
		                                                                                                     
	 
 

                                                        
 
	                                          

	                                                                        
		                                                                                                         
 

          
                                                                                                      
 
	                                      
		      

	                                                              
		      

	                                                                                                          
 
                                                                                                             
 
	                                                      

	                                                                                                                          
		                                                                                                        
 
                                                                                                   
 
	                                          

	                                                                      
	                                                                                           
		                                                                                                                    
 

            
                                                                                     
 
	                                      
		      

	                                                      
	                                                                                                          
		      

	                                                                                      
	                                                                                                                                                       
 
                                                                                        
 
	                                          

	                                                                        
		      

	                                       
		      

	                                                                                                       
 
                                                                                                              
 
	                                      
		      

	                                                                                                          

	                                                                                      
	                                                                                                                              
 

           
                                                                                                                                             
 
	                             
	                                                                                                                      
		      

	                                         
		      

	                                                                                                                   
 
                                                                                             
 
	                                       

	                                                       
		      

	                                       
	                                                                                          
		      

	                                 
	                        
		      
	                          

	                                      
		      

	                                                                          
		      

	                                                                                                                   
 

                                                                                   
 
	                                      
		      

	                                                      
	                                                                                                          
		      

	                                                                                      
	                                                                                                                                              
 

                                                                            
 
	                                                                                                                       
		      

	                                                                                                    
 

       
                                                                                                        
 
	                                       
		      

	                                                    
	                            
	                                                                                                                
 
                                                                                           
 
	                                                         
		      

	                                      
		      

	                                                                                                    
 
                                                                                   
 
	                                       
		      

	                                                                                

	                                           
		      

	                                                        
		      

	                                         
		      

	                                         

	                                                   
	                                                                                                                                          
	                          
	                                                                                              
		                                        

	                                                                                                         
 

                                                   
                                                                 
 
	                                      
		      

	                                                                                       
 
                                                                                                                
 
	                                      
		      

	                                         
		      
	                                        

	                                                 
	                                                                                              
 
                                                 

             
                                                         
 
	                                        
 
                                                      
 
	                                
	                              
	                                        

	                                       
		      

	                                               
	                                        
	                          
	                         
	                                                
	 
		                                                                                                   
			     

		                                           
		                                   
			                                                      
		                          

		           
	 

	                                   
	                                          
	                            
	                                                                                                                            
 
                                                                                         
 
	                                                                          
		                                  

	                                      
		      

	                                       
		                                                                
	                                      

	                                                                                                             
 
                                                                     
 
	                                       
		      

	                                                           
		                                                                                                     

	                                                                                                
 

          
                                                                      
 
	                                       
		      

	                                                                                                 
 

                                                                                            
 
	                                       
		      

	                                                                                                                    
 

                                                                      
 
	                                       
		      

	                                                                                                 
 

          
                                                                                     
 
	                                             
		      

	                                                         
		      

	                                      
		      

	                                        
	                                                            
		                                                                                           
 

                                                                                                    
 
	                                                   
		      

	                                                   
		      

	                                         
		      

	                                               
	                                                               
		                                                                                                          
 

                                                                                        
 
	                                             
		      

	                                      
		      

	                                        
	                                                     
		                                                                                                    
 

         
                                                                                                          
                                                                 
 
	                                       
		      

	                                                                                              
 

                                                                                                             
 
	                             
		      

	                      
		      

	                                   
	                                             
		      

	                                      
		      

	                                                       
		                                                                                                        
 

                                                                                  
 
	                                       
		      

	                                                                                                                    
 

           
                                                                
 
	                                                
	                               

	                                       
		      

	                                                           

	                                                                          
	 
		        
	 

	                                                         
	                                                      
	                                      
	                                 

	                                                                                                       
 

                                                                                                                
                                                                                           
 
	                                                                            
		      

	                                         
		      

	                                                                                                  
 

                                                                              
 
	                                       
		      

	                                                                                                          
 

        
                                                          
 
	                                                
	                               

	                                       
		      

	                                                           

	                                                                                 
	 
		        
	 

	                                                         
	                                                      
	                                      

	                                                                                                              
 

                                                                                   
 
	                                      
		      

	                                                                          
		                                  

	                                       
		                                                               
	                                      

	                                                                                                 
 

                                                                                                                                          
 
	                             
	                                                      
		      

	                                         
		      

	                                                                                                               
 

        
                                                                                            
 
	                                       
		      

	                          
		      

	                                                                                                           
 

                                                                     
 
	                                       
		      

	                                                           
		      

	                                                                                                  
 

                                                                              
 
	                                       
		      

	                        
		      

	                                                    
		      
	    
		                                           

	                                                                                                 
 

          
                                                          
 
	                                         
		      

	                                               
	                                                               
	 
		                                                                                             
	 
 

                                                                 
 
	                                         
		      

	                                               
	                                                               
	 
		                                                                                                        
	 
 

                                                              
 
	                                         
		      

	                                                                                                   
 

         
                                                             
 
	                                        
		      

	                                                                                                 
 

                                                                
 
	                                        
		      

	                                                                                                    
 

                                                                             
 
	                                        
		      

	                                                                                                          
 

                                                                               
 
	                                                                                                                                    
		      

	                                                                                
	                            
	                                                                                                           
 

                                                      
 
	                                                                                                          
		      

	                                                                                       
 

                                                                                        
 
	                                                                                                          
		      

	                                                                  
 

                                                                                              
 
	                              

	                                            
	                         
	                        
	             
	 
		                   
		                  
		                      
		                                   
		 
			                         
				      

			                                  
			 
				                  
				     
			 
			                                

			                                   
			 
				                     
				                    
			 
			    
			 
				                           
					                     

				                          
					                    
			 
		 

		                
			     

		           
	 

	                                                                   

	                   
	                            
	 
		                    

		                                         
		                                                                                                    
			        

		                                   
		 
			                                                          
			                                                                                    


			                                          
			 
				                
				     
			 
		 
		              
			             
	 

	                                                                                                           
 

          
                                                                                            
 
	                                                                                                          
		      

	                                                                                                                       
 

                                                             
 
	                                                         
		      

	                                                                                          
 

                                                                  
 
	                                                         
		      

	                                                                                           
 



      
                                                                          
 
	                                                                                                            
		      

	                                                                                                
 

                                                  
 
	                                                                                                            
		      

	                                                                                             
 

                                                                      
 
	                                                                                                            
		      

	                                                                                                
 

     
                                                                    
 
	                                                                                                               
		      

	                                                                                         
 

                                                           
 
	                                                                                                               
		      

	                                                                                       
 

                                                           
 
	                                                                                                               
		      

	                                                                                       
 

                                                                                    
 
	                                                                                                                        
		      

	                                                                                                          
 
                                                                                       
 
	                                                                                                                        
		      

	                                                                                                             
 
                                                                                 
 
	                                                                                                                        
		      

	                                                                                                        
 

                 
                                                                                      
 
	                                                                                                                 
		      

	                                                                                                   
 
                                                                                       
 
	                                                                                                                 
		      

	                                                                                                      
 
                                                                       
 
	                                                                                                                 
		      

	                                                                                           
 
      

               
                                                                  
 
	                                                                                                                   
		      

	                                                                                                 
 
                                                                              
 
	                                                                                                                   
		      

	                                                                                                   
 
                                                                                              
 
	                                                              
		      

	                                                                                                                   
		      

	                                                                                               
 
                                                                  
 
	                                                                                                                   
		      

	                                                                                               
 
      

#endif         

                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER
                                                                                                              
 
	                                                                        
 
#endif


                                                                                                                        
                                                                                                                        
                                                                                                                        
#if SERVER
                       
                                                                                
 
	                                   
		      
 
#endif

                              
#if SERVER
                                                           
 
	                                                                         
 
#endif

                     
#if SERVER
                                                                                                  
 
	                                   
		      

	                                            
	                                   
	                                                                                                                
 
#endif              
                               

                                                                                                                        
                                                                                                                         
                                                                                                                        
                      
          
                                                                                    
                                                                      
 
                                                                                                                           
                                                                                                     
 
                    
                                

                        
#if SERVER
                                                                
                                                                    
 
	                         
		      

	                                                                                                       
 
#endif              
                                  

                        
#if SERVER
                                                                                               
                                                                                       
 
	                         
		      

	                    
		                                                                                                                      

	                                              
                     
		                                                                                                                        
			                                                                                                
       
 
#endif              
                                  

                        
#if SERVER
                                                       
                                                                            
 
	                         
		      

	                                                                                                                   
 
#endif              
                                  

                        
#if SERVER
                                                                
                                                                                               
 
	                         
		      

	                             
	 
		                                                                                                              
	 
	                                  
	 
		                                                                                                              
	 
 
#endif              
                                  

                        
#if SERVER
                                                                  
                                                                                             
 
	                         
		      

	                      
	 
		                                                                                                             
	 
	    
	 
		                                                                                                             
	 
 
#endif              
                                  

                        
#if SERVER
                                                            
                                                                  
 
	                         
		      

	                                                                                                    
 
#endif              
                                  

                        
#if SERVER
                                                                                                                                                   
                                                                                          
 
	                                                                              
		      

	                     
	 
		                                                                                                                                                
		                                      
			                                                                                                                                          
	 
 
#endif              
                                  

                        
#if SERVER
                                                                
                                                                                                
 
	                         
		      

	                           
		      

	                                                                                                                          
 
#endif              
                                  


#if SERVER
                                                                                                     
 
	                          
		      

	                                                                                        
	                       
		                                                            
 
#endif

                                                                                                   
                                             
                                             
                                             
                                             
                                             
#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetAccountLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int xpProgress   = GetPlayerAccountXPProgress( ToEHI( player ) )
		int accountLevel = GetAccountLevelForXP( xpProgress )
		return minint( accountLevel, GetHighestAccountDisplaylevel() )
	})

	return info
}
#endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupModesWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcMode 		  = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplate, calcMode, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupCharacterWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcCharacter      = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplate, calcCharacter, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			sourceEntries.append( ResolveStatEntry( sourceTemplate, ItemFlavor_GetGUIDString( character ), weaponItemRefInCategory ) )
		}
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupAnyModeWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplateBR    = sourceTemplates[0]
	StatTemplate sourceTemplateModes = sourceTemplates[1]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			sourceEntries.append( ResolveStatEntry( sourceTemplateBR, ItemFlavor_GetGUIDString( character ), weaponItemRefInCategory ) )
		}
	}
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		{
			sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, weaponItemRefInCategory ) )
		}
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


 #if SERVER || CLIENT || UI
 StatCalcFuncInfo function SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info

	 string calcWeaponCategory = calcEntry.enumKeys[0]

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	 foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	 {
		 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 {
			 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, weaponItemRefInCategory ) )
		 }
	 }

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }
 #endif


 #if SERVER || CLIENT || UI
 StatCalcFuncInfo function SetupModesExceptBRCharacterStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info
	 string calcCharacter = calcEntry.enumKeys[0]

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, calcCharacter ) )

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }
 #endif


 #if SERVER || CLIENT || UI
 StatCalcFuncInfo function SetupModesExceptBRStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory ) )

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }
 #endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupCharacterStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( ItemFlavor character in GetAllCharactersForStats() )
		sourceEntries.append( ResolveStatEntry( sourceTemplate, ItemFlavor_GetGUIDString( character ) ) )

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if SERVER || CLIENT || UI
int function CalcStatSum_Int( entity player, array<StatEntry> sourceEntries, int when )
{
	int sum = 0
	foreach ( StatEntry sourceEntry in sourceEntries )
		sum += GetStat_Int( player, sourceEntry, when )
	return sum
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetTotalLegendaryItemsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		                                                                                                          

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			ehiss.legendaryItemsOwnedByPlayer.clear()
			foreach ( ItemFlavor flav in GetAllLegendaryItems() )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
				{
					count++
					ehiss.legendaryItemsOwnedByPlayer.append( flav )
				}
			}
		}
		else
		{
			foreach ( ItemFlavor flav in GetAllItemFlavorsCosmetic() )
			{
				if ( ItemFlavor_GetGRXMode( flav ) != eItemFlavorGRXMode.REGULAR )
					continue

				if ( !ItemFlavor_HasQuality( flav ) || ItemFlavor_GetQuality( flav ) < eRarityTier.LEGENDARY )
					continue

				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
					count++
			}
		}

		return count
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetNumCharactersWithBannersOnceFilledForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_banner_once_filled, ItemFlavor_GetGUIDString( character ) ), when ) == 1 )
				count++
		}
		return count
	})

	return info
}
#endif
#if SERVER
                                                 
 
	                                                              
	 
		                                                                                                                                                                  
			                                               
		   
		                                                                                                                                                                   
			                                               
		   

		                                                                                             
			                                                                                                                                                                                  
				                                               
			   

		                                                                                                     
			                                                                                                                                                                                          
				                                               
			   
	 
 
#endif
#if SERVER
                                                                               
 
	                                                         
		                                                                    

	                             
		                                        
		                                         
	 

	                                                                                             
		                                                                       

	                                                                                                     
		                                                                               

	                          
	                                       
	 
		                                                     
			                                                     

		                                                                                                                          
		 
			                      
			     
		 
	 
	                     
	 
		                                                                                                                                
		                                                                                                                   
	 
 
#endif

                                      
#if SERVER || CLIENT || UI
string ornull function GetCurrentStatSeasonRefOrNull()
{
	ItemFlavor ornull season = GetActiveSeason( GetUnixTimestamp() )                                               
	if ( season == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(season) )
}
#endif

                                      
#if SERVER || CLIENT || UI
string ornull function GetCurrentStatRankedPeriodRefOrNullByType( int itemType )
{
	ItemFlavor ornull rankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), itemType )
	if ( rankedPeriod == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(rankedPeriod) )
}

#endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetStarterPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasStarterPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetFounderPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasFoundersPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetTwitchPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		#if SERVER || CLIENT
			return player.DoesUserHaveTwitchPrimeReward( "twitch_launch_promo" ) ? 1 : 0
		#endif
		#if UI
			return GetConVarInt( "twitch_prime_rewards" ) > 0 ? 1 : 0
		#endif
	})

	return info
}
#endif


#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetEAAccessStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		return PlayerHadEAAccess( player ) ? 1 : 0
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		                                                                                                          

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			foreach ( ItemFlavor character in GetAllCharactersForStats() )
			{
				bool hasLegendarySkin     = false
				bool hasLegendaryFinisher = false

				array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( characterSkins.contains( flav ) )
					{
						hasLegendarySkin = true
						break
					}
				}

				array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( executions.contains( flav ) )
					{
						hasLegendaryFinisher = true
						break
					}
				}

				if ( hasLegendarySkin && hasLegendaryFinisher )
					count++
			}
		}
		else
		{
			foreach ( ItemFlavor character in GetAllCharactersForStats() )
			{
				bool hasLegendarySkin     = false
				bool hasLegendaryFinisher = false

				array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
				foreach ( skin in characterSkins )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eRarityTier.LEGENDARY )
					{
						hasLegendarySkin = true
						break
					}
				}

				array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
				foreach ( execution in executions )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( execution, player ) && ItemFlavor_HasQuality( execution ) && ItemFlavor_GetQuality( execution ) >= eRarityTier.LEGENDARY )
					{
						hasLegendaryFinisher = true
						break
					}
				}

				if ( hasLegendarySkin && hasLegendaryFinisher )
					count++
			}
		}

		return count
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetCountOfWeaponsWithLegendarySkinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		                                                                                                          

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
			{
				array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( weaponSkins.contains( flav ) )
					{
						count++
						break
					}
				}
			}
		}
		else
		{
			foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
			{
				array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
				foreach ( skin in weaponSkins )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eRarityTier.LEGENDARY )
					{
						count++
						break
					}
				}
			}
		}

		return count
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetCountOfCharactersWithWellRoundedDamageForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( char in GetAllCharactersForStats() )
		{
			string characterRef = ItemFlavor_GetGUIDString( char )
			int damageDone      = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_damage_done, characterRef ), when )
			if ( damageDone > 20000 )
				count++
		}
		return count
	})

	return info
}
#endif


                                 
#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetTreasureHunterStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		                          
		return 0
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetElite888StatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_elite_game_8kill_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetNumSoloWinsWithAllCharactersIronCrown( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season02_event01_character_solo_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetDuosTiersEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int tiersEarned = 0

		int gamesPlayed = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_play ), when )
		int gamesWon    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_win ), when )

		if ( gamesPlayed > 0 )
			tiersEarned = 1

		if ( gamesWon >= 2 )
			tiersEarned = gamesWon

		return tiersEarned
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetFirstPlayedUnixTime( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int launchUnixTime           = 1549310400
		int daysInstalledAfterLaunch = (player.GetPersistentVarAsInt( "installUnixTime" ) - launchUnixTime) / SECONDS_PER_DAY

		                     
		if ( daysInstalledAfterLaunch <= 7 )
			return 2

		                      
		if ( daysInstalledAfterLaunch <= 31 )
			return 1

		                
		return 0
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetCountOfCharactersWithTenWinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( ItemFlavor character in GetAllCharactersForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_placements_win, ItemFlavor_GetGUIDString( character ) ), when ) >= 10 )
				count++
		}

		return count
	})

	return info
}
#endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetSeasonBattlePassLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		ItemFlavor season = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) )
		ItemFlavor pass   = Season_GetBattlePass( season )

		                                                 
		                                                                    
		  	        

		return GetPlayerBattlePassLevel( player, pass, false ) + 1
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins ), when )
		int alliesRespawned = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally ), when )

		if ( kills >= 100 && wins >= 5 && alliesRespawned >= 15 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetCampfireCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_players_killed_in_zone ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_wins ), when )
		int damageDealt 	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_damage_dealt_in_zone ), when )

		if ( kills >= 100 && wins >= 10 && damageDealt >= 10000 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetShadowRoyaleCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills   = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_kills ), when )
		int wins    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_wins ), when )
		int revives	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_revives ), when )

		if ( kills >= 100 && wins >= 5 && revives >= 15 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetWinterExpressCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int captures           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_captures ), when )
		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_damage ), when )
		int kills 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_kills ), when )

		if ( kills >= 100 && captures >= 100 && damage >= 10000 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetAirdropKittedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_damage_dealt ), when )
		int knockdowns          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_knockdowns ), when )
		int wins 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_wins ), when )

		if ( damage >= 10000 && knockdowns >= 100 && wins >= 5 )
			count = 1

		return count
	})

	return info
}
#endif


#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetS08SeasonalCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int nessie           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_nessie_dailies ), when )
		int weapon          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_weapon_damage ), when )
		int character 			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_character_wins ), when )

		if ( nessie >= 75 )
			count++
		if ( weapon >= 102816 )
			count++
		if ( character >= 8 )
			count++

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetRingFuryCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int heatshield          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_2 ), when )
		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_4 ), when )

		if ( heatshield >= 1000 && damage >= 10000 && knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetWarGamesCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_2 ), when )
		int wins          		= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_4 ), when )

		if ( damage >= 15000 && wins >= 5 && knockdowns >= 250 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetGenesisCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int br_damage       = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_br_damage_done ), when )
		int arenas_wins     = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_arenas_placements_win ), when )
		int br_knockdowns	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_br_dooms ), when )

		if ( br_damage >= 10000 && arenas_wins >= 50 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetRaidersCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int we_damage       = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_winter_express_damage_done ), when )
		int arenas_damage   = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_arenas_damage_done ), when )
		int br_knockdowns	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_br_dooms ), when )

		if ( we_damage >= 10000 && arenas_damage >= 25000 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}
#endif

#if (SERVER || CLIENT || UI)
StatCalcFuncInfo function SetupGetS12ACECombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	                                    
	                                                       
	                                          
	   

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int control_captures = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_control_captures ), when )
		int br_damage        = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_br_damage_done ), when )
		int br_knockdowns	 = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_br_dooms ), when )

		if ( control_captures >= 100 && br_damage >= 10000 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}
#endif

 #if (SERVER || CLIENT || UI)
 StatCalcFuncInfo function SetupGetWarriorsCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatCalcFuncInfo info

	                                     
	                                                        
	                                           
	    

	 info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		 int count = 0

		 int control_captures = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_control_captures ), when )
		 int br_damage        = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_br_damage_done ), when )
		 int br_knockdowns	 = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_br_dooms ), when )

		 if ( control_captures >= 100 && br_damage >= 10000 && br_knockdowns >= 100 )
			 count = 1

		 return count
	 })

	 return info
 }
 #endif

 #if (SERVER || CLIENT || UI)
 StatCalcFuncInfo function SetupGetAwakeningCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatCalcFuncInfo info

	                              
	                                           
	                                                        
	    

	 info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		 int count = 0

		 int control_rating    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s13e01_control_rating ), when )
		 int br_damage        = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s13e01_br_damage_done ), when )
		 int br_knockdowns	 = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s13e01_br_dooms ), when )

		 if ( control_rating >= 30000 && br_damage >= 10000 && br_knockdowns >= 100 )
			 count = 1

		 return count
	 })

	 return info
 }
 #endif

#if SERVER || CLIENT || UI
StatCalcFuncInfo function SetupGetS08E04FinaleNotCompletedForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int s08e04FinaleCompleted           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e04_finale_completed ), when )
		int count = 0

		if ( s08e04FinaleCompleted == 0 )
		{
			count = 1
		}

		return count
	})

	return info
}
#endif
 
 #if SERVER
                                                                                                                                         
 
	                                              
	                                                                  
	                                                                       

	                     
	                           
	 
		                                             
	 

	                                                    

	                    
 
#endif