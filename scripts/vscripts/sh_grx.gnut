  

#if SERVER || CLIENT || UI
global function ShGRX_LevelInit
global function ShGRX_RegisterItemFlavor
#endif
#if UI
global function ShGRX_LevelShutdown
#endif

#if SERVER || CLIENT || UI
global function IsValidItemFlavorGRXIndex
global function GetGRXIndexByGRXRef
global function GetItemFlavorByGRXIndex
global function ItemFlavor_GetGRXMode
global function ItemFlavor_GetGRXIndex
global function ItemFlavor_GetGRXAlias
global function ItemFlavor_GetGRXOwnershipTarget
global function ItemFlavor_GetGRXOwnershipTargettedBy
global function GRXCurrency_GetCurrencyIndex
global function GRXCurrency_GetPurchaseSound
global function GRXCurrency_GetPreviewModel
global function GRXCurrency_GetRewardIcon
global function GRXCurrencyBundle_GetCurrencyFlav
global function GRXCurrencyBundle_GetValue
global function GRX_IsInventoryReady
global function GRX_HasInventoryEverBeenReady
global function GRX_IsItemOwnedByPlayer
global function GRX_IsItemOwnedByPlayer_AllowOutOfDateData
global function GRX_GetPlayerEdition
global function GRX_IsOfferRestricted
global function GRX_HasUpToDateBundleOffers
global function GRXPack_IsEphemeral
global function GRXPack_IsExpectedToContainSingleItemWithCurrency
global function GRXPack_GetTickModel
global function GRXPack_GetTickModelSkin
global function GRXPack_GetPackContents

#if DEV
global function GetItemFlavorByGRXRef
#endif
#endif

#if UI
global function GRXOffer_IsFullyClaimed
global function GRXOffer_GetOwnedItemsCount
global function GRXOffer_ContainsPack
global function GRXOffer_ContainsEventPack
global function GRXOffer_ContainsThematicPack
global function GRXOffer_ContainsEventThematicPack
global function GRXOffer_GetSpecialPackName
global function GRXOffer_GetBundleOfferRestrictions
global function GRXOffer_IsHeirloomPack
global function GRX_PurchaseOffer
global function GRX_MakeItemFlavorBagFromPriceArray
global function GRX_CheckBundleAndUpdateOfferPrices
global function GRXOffer_GetEventThematicPackCollectionInfo
global function GRXOffer_GetEventThematicPackCollectionInfoFromScriptOffer
global function GRX_IsLocationActive
global function GRX_ScriptOfferFromCraftingOffer
global function GRX_GetPostGameRewards
global function GRX_MarkRewardAcknowledged
#endif

#if SERVER || UI
global function GRXCurrency_GetPlayerBalance
global function QueueGRXOperation
global function IsGRXOperationDone
#endif

#if SERVER
                                                              
                                                   
                                
                                               
                                          
                                          
                                        
                                                 
                                         
                                        
                                            
#endif

#if CLIENT
global function GRXPack_GetTickSoundAlias
#endif

#if UI
global function GRX_GetAllPackFlavors
global function GRX_GetPackCounts
global function GRX_GetTotalPackCount
global function GRX_GetLocationOffers
global function GRX_GetItemDedicatedStoreOffers
global function GRX_GetStoreOfferColumn
global function GRX_GetStoreOfferColumnNumRows
global function GRX_GetStoreOffers
global function GRX_GetStoreOfferItems
global function GRX_GetLocationOfferItems
global function GRX_AreOffersReady
global function GRX_GetItemPurchasabilityInfo
global function GRX_IsItemCraftable
global function GRX_CanAfford
global function GRX_CanAffordDelta
global function GRX_GetMaxCanAfford
global function GRX_GetCurrencyArrayFromBag
global function GRX_GetFormattedPrice
global function GRX_GetPriceDisplayData
global function GRX_IsCraftingPrice
global function GRX_IsPremiumPrice
global function GRX_GetNextCurrencyExpirationAmt
global function GRX_GetNextCurrencyExpirationTime
               
                                          
                                            
      
global function GetFormattedValueForCurrency
global function AddCallbackAndCallNow_OnGRXInventoryStateChanged
global function AddCallback_OnGRXInventoryStateChanged
global function RemoveCallback_OnGRXInventoryStateChanged
global function AddCallbackAndCallNow_OnGRXOffersRefreshed
global function AddCallback_OnGRXOffersRefreshed
global function RemoveCallback_OnGRXOffersRefreshed
global function AddCallback_OnGRXBundlesRefreshed
global function RemoveCallback_OnGRXBundlesRefreshed
global function SortStoreOfferItems
global function ShowGRXErrorDialogue
global function DEV_GRX_DescribeOffer
global function GRX_IsBadLuckProtectionActive
global function GRXPack_GetOpenButtonIcon
#endif

#if CLIENT || UI
global function GRX_GetMostRecentPackOpeningResults
global function GRXPack_GetCustomColor
global function GRXPack_GetCustomCountTextCol
#endif

#if DEV
#if SERVER
                                              
                                    
                                        
#elseif CLIENT
global function DEV_GRX_ForcePackResults
#elseif UI
global function DEV_GRX_PrintStoreOfferLocations
global function DEV_GRX_PrintNextCurrencyExpirationInfo
global function DEV_GRX_TestOpenPack
global function DEV_GRX_TestPurchase
global function DEV_GRX_PreviewStoreItem
#endif
#endif


                   
#if SERVER
                                                 
                                               
                                              
                                                       
                                          
                                                          
                                    
#elseif CLIENT
global function UIToClient_GRXInventoryCleanStateChange
global function ClientCodeCallback_GRXPackOpened
#elseif UI
global function ServerToUI_PROTO_YouAreGreenLightedForGRX
global function ServerToUI_GRX_QueuedRewardsGiven
global function DisplayQueuedRewardsGiven
global function UICodeCallback_GRXOffersRefreshed
global function UICodeCallback_GRXUserInfoUpdated
global function UICodeCallback_GRXQueryCompleted
global function UICodeCallback_GRXBundlesUpdated
global function ShGRX_UIScriptResetComplete
global function ClientToUI_WORKAROUND_GRXPackOpened_Start
global function ClientToUI_WORKAROUND_GRXPackOpened_Entry
global function ClientToUI_WORKAROUND_GRXPackOpened_Finish
#endif

const int QUEUED_REWARDS_MAX_COUNT = 12
const int QUEUED_REWARDS_MAX_ITEMS_COUNT = 1


#if SERVER                                                                                                                              
                                                     
#elseif UI
const int GRX_SCRIPT_QUERY_IDENTIFIER_START_INDEX = INT_MIN
#endif

const bool GRX_DEBUG_PRINTS = true


                      
                      
                      
                      
                      

#if SERVER || CLIENT || UI
global enum eItemFlavorGRXMode
{
	NONE = GRX_ITEMFLAVORMODE_NONE,
	REGULAR = GRX_ITEMFLAVORMODE_REGULAR,
	PACK = GRX_ITEMFLAVORMODE_PACK,
	CONSUMABLE = GRX_ITEMFLAVORMODE_CONSUMABLE,
	CURRENCY = GRX_ITEMFLAVORMODE_CURRENCY,
	OWNERSHIP_TARGET = -1337,
}
                                                                
#endif

#if UI
global enum eStoreLocation
{
	SHOP,
	SPECIALS,
	SEASONAL,
	_COUNT
}
#endif

#if SERVER
                          
 
	    
	          
	          
	      
	              
	          
 
#endif

#if SERVER

                               
 
	     
	     
 
                                
 
	                            
	                     
	                   

	                            
	                                     
	                                      
	                                  
	                                           

	                                          
	                                     
	                                    
	                                                 

	                                                                 
 
#endif


#if UI
global struct GRXScriptOffer
{
	array<ItemFlavorBag>  prices
	ItemFlavorBag&        output
	table<string, string> attributes
	array<GRXStoreOfferItem> items

	ItemFlavor ornull     prereq

	bool isCraftingOffer = false

	string               titleText = "Offer Title"
	string               descText = "Description of offer"
	string               offerAlias = ""
	string               prereqText = ""
	asset                image = $""
	string               imageRef = ""
	string               tagText = ""
	string               seasonTag = ""
	string               tooltipTitle = ""
	string               tooltipDesc = ""
	ItemFlavorBag ornull originalPrice = null
	int                  offerType = GRX_OFFERTYPE_DEFAULT
	int                  purchaseLimit = 1
	int					 displayPriority = 0
	int                  expireTime = 0

	bool   isAvailable = true
	string unavailableReason = "#UNAVAILABLE"
	bool   isSKUOffer = false                                                                                     

	                   
	                 

	ItemFlavor ornull WORKAROUND_claimedSentinel = null
}

global struct GRXScriptCraftingOffer
{
	ItemFlavor& flavor
	int         craftingPrice
	bool        isAvailable = true
}
#endif

#if UI
global struct PurchaseDialogDeepLinkConfig
{
	string ornull 		message = null
	string ornull		priceText = null
	void functionref()	onPurchaseCallback = null
}
#endif

#if UI
global struct PurchaseDialogConfig
{
	                     
	ItemFlavor ornull     flav = null
	GRXScriptOffer ornull offer = null

	        
	int           quantity = 1
	bool          markAsNew = true
	string ornull messageOverride = null
	string ornull purchaseSoundOverride = null
	string ornull purchaseOptionsMessage = null
	PurchaseDialogDeepLinkConfig ornull deepLinkConfig = null

	void functionref()                     onPurchaseStartCallback = null
	void functionref( bool wasSuccessful ) onPurchaseResultCallback = null
}
#endif


#if UI
global struct ItemFlavorPurchasabilityInfo
{
	bool                                  isPurchasableAtAll = false
	GRXScriptCraftingOffer ornull         craftingOfferOrNull = null
	table<string, array<GRXScriptOffer> > locationToDedicatedStoreOffersMap
}
#endif

#if UI
global struct PriceDisplayData
{
	asset  symbol
	string amount
}
#endif


Assert( GRX_CURRENCY_COUNT == 5 )
global ItemFlavor&[GRX_CURRENCY_COUNT] GRX_CURRENCIES = [{...}, {...}, {...}, {...}, {...}]

global int GRX_DEV_ITEM = -1
global int GRX_QA_ITEM = -1

#if SERVER
                                               
 
	                                              
	                                                              
	                                                    
	                                                                  
	                                                                    
	                                                    
	                                            
	                                                                                  
	                                                                                        
	                                                                                                  
	                                                                    
	                                                                                              
	                                                                                            
	                                                                                              
	                                                                                                
	                                                                                                
	                                                    
	                                            
	                                                            
	                                                                    
	                                                  
	                                                  
	                                                                              
	                                                                              
	                                                                                    

 
#endif

#if CLIENT
global enum eGRXPackTickSoundKind
{
	TriadBounce
	PuckLand
	Unpack
	DeployTriadExplo1
	DeployTriadExplo2
	DeployTriadExplo3
}
#endif

#if UI
global struct GRX_PackCollectionInfo
{
	int numCollected = 0
	int numTotalInCollection = 0
}
#endif

                       
                       
                       
                       
                       
#if SERVER || UI
global enum eScriptGRXOperationStatus
{
	INVALID,
	QUEUED,
	RUNNING,
	DONE_INTERRUPTED,
	DONE_SUCCESS,
	DONE_FAILED,
}
#endif
#if SERVER || UI
global struct ScriptGRXOperationInfo
{
	int id = -1
	int expectedQueryGoal = -1
	#if SERVER
		                               
	#elseif UI
		bool shouldRetryOnInterrupt = true
	#endif
	bool _isAutoOperation = false                                                              

	void functionref( int id )             doOperationFunc
	void functionref( int status )         onDoneCallback

	int    status = eScriptGRXOperationStatus.INVALID
	int    _codeQueryState = -1
	string DEV_culprit = ""
	string DEV_goalInfo = ""
	float  DEV_queueTime = 0.0
}
#endif


#if SERVER || CLIENT || UI
struct PlayerGRXScriptState
                                                                                                                             
{
	#if SERVER
		                                                  
		                                                                             
		                                               
	#endif

	#if SERVER || CLIENT || UI
		bool isInventoryReady
		bool isInventoryValidated = false
		bool hasInventoryEverBeenClean = false
		int  marketplaceEdition = -1
		bool isOfferRestricted = false
		bool hasUpToDateBundleOffers = false
	#endif

	#if SERVER || UI
		int          inventoryState = GRX_INVENTORYSTATE_UNINITIALIZED
		array<int>   balances

		int                           nextScriptQueryId = GRX_SCRIPT_QUERY_IDENTIFIER_START_INDEX
		array<ScriptGRXOperationInfo> operationQueue
		ScriptGRXOperationInfo ornull activeOperationOrNull = null

		bool isAutoOperationQueued = false

		GRXUserInfo& WORKAROUND_lastCodeUserInfo

		#if SERVER
			                                   
			                                                                
			                                                         
		#elseif UI
			bool areOffersReady
			int nextCurrencyExpirationAmt = 0
			int nextCurrencyExpirationTime = 0
                 
                               
                                
        
		#endif
	#endif
}
#endif


#if UI
struct FileStruct_LifetimeVM
{
	                                          
	int                       WORKAROUND_delayedOffersState
	array< GRXCraftingOffer > WORKAROUND_delayedCraftingOffers
	array< GRXStoreOffer >    WORKAROUND_delayedStoreOffers

	bool WORKAROUND_wasUserInfoUpdatedBeforeLevelInit = false

	#if DEV
		string grxStorePreviewItem = ""
	#endif
}
FileStruct_LifetimeVM& fileVM
#endif


#if SERVER || CLIENT || UI
struct FileStruct_LifetimeLevel
{
	array<ItemFlavor>      packFlavorList
	table<ItemFlavor, int> currencyIndexMap
	table<int, ItemFlavor> grxIndexItemFlavorMap
	table<string, int>     grxRefToGRXIndexMap
	#if DEV
		table<string, ItemFlavor> grxRefItemFlavorMap
	#endif

	#if SERVER
		                                                     
		                                                                               
		                                                                    
	#elseif CLIENT || UI
		PlayerGRXScriptState localGRXState

		ItemFlavorBag ornull mostRecentPackOpeningResultsOrNull = null

		#if UI
			bool WORKAROUND_isInLifetime = false

			bool PROTO_serverHasGivenGreenLightForUIGRX = false

			array<void functionref()> onGRXInventoryStateChangedCallbacks
			array<void functionref()> onGRXOffersRefreshedCallbacks
			array<void functionref()> onGRXBundlesRefreshedCallbacks

			table<ItemFlavor, ItemFlavorPurchasabilityInfo> itemFlavorPurchasabilityInfoMap

			table<string, array<GRXScriptOffer> > locationOffersMap

			array<array<array<GRXScriptOffer> > > storeOfferColumns

			array<array<array<GRXScriptOffer> > > specialsStoreOfferColumns

			array<array<array<GRXScriptOffer> > > seasonalStoreOfferColumns

			bool HACK_allowOneBadQueryCompleteCallBecauseOfUIScriptReset = false
		#endif
	#endif

	#if GRX_DEBUG_PRINTS
		bool GRX_DEBUG_PRINTS_disableTemporarily = false
	#endif
}
FileStruct_LifetimeLevel& fileLevel
#endif

const float USERINFO_DIRTY_DEBOUNCE_DURATION = 0.3


                         
                         
                         
                         
                         
#if SERVER || CLIENT || UI
void function ShGRX_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	#if UI
		newFileLevel.WORKAROUND_isInLifetime = true
	#endif
	fileLevel = newFileLevel

	AddCallback_RegisterRootItemFlavors( void function() {
		Assert( GRX_CURRENCY_COUNT == 5 )
		GRX_CURRENCIES[GRX_CURRENCY_PREMIUM] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/premium.rpak" ))                        
		GRX_CURRENCIES[GRX_CURRENCY_CREDITS] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/credits.rpak" ))                        
		GRX_CURRENCIES[GRX_CURRENCY_CRAFTING] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/crafting.rpak" ))                         
		GRX_CURRENCIES[GRX_CURRENCY_SEASON02_EVENT01] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/season02_event01.rpak" ))                                 
		                                                                                                               
		GRX_CURRENCIES[GRX_CURRENCY_HEIRLOOM] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/heirloom.rpak" ))                         

		foreach ( int currencyIndex, ItemFlavor flav in GRX_CURRENCIES )
		{
			fileLevel.currencyIndexMap[ItemFlavor_GetGUIDString( flav )] <- currencyIndex
			#if SERVER
				                                                      
				                        
					                           
			#endif
		}

		foreach ( asset packAsset in GetBaseItemFlavorsFromArray( "packs" ) )
		{
			ItemFlavor ornull flavOrNull = RegisterItemFlavorFromSettingsAsset( packAsset )
			if ( flavOrNull != null )
				fileLevel.packFlavorList.append( expect ItemFlavor(flavOrNull) )
		}

		foreach ( asset currencyBundleAsset in GetBaseItemFlavorsFromArray( "currencyBundles" ) )
			RegisterItemFlavorFromSettingsAsset( currencyBundleAsset )
	} )
	AddCallback_OnItemFlavorRegistered( eItemType.account_currency_bundle, AssertCurrencyBundlePlaylistVarsAreValid )
	AddCallbackOrMaybeCallNow_OnAllItemFlavorsRegistered( OnAllItemFlavorsRegistered )

	RegisterSignal( "ScriptGRXOperationDone" )

	#if SERVER || CLIENT
		Remote_RegisterUIFunction( "ServerToUI_PROTO_YouAreGreenLightedForGRX" )
		Remote_RegisterUIFunction( "ServerToUI_GRX_QueuedRewardsGiven" )

		Remote_RegisterServerFunction( "ClientCallback_acknowledge_reward", "int", 0, QUEUED_REWARDS_MAX_COUNT, "int", INT_MIN, INT_MAX )
	#endif

	#if SERVER
		                                                            
		       
			                                           
		      
	#endif

	#if UI
		if ( !CanRunClientScript() )
			return

		PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
		RunClientScript( "UIToClient_GRXInventoryCleanStateChange", scriptState.isInventoryReady, scriptState.WORKAROUND_lastCodeUserInfo.marketplaceEdition, scriptState.WORKAROUND_lastCodeUserInfo.isOfferRestricted )

		if ( fileVM.WORKAROUND_wasUserInfoUpdatedBeforeLevelInit )
		{
			fileVM.WORKAROUND_wasUserInfoUpdatedBeforeLevelInit = false
			void functionref() whatTheFunc = (void function() {
				wait 1.0
				UICodeCallback_GRXUserInfoUpdated( GRX_GetUserInfo() )
			})
			thread whatTheFunc()
		}
	#endif

	GRX_DEV_ITEM = GRX_RegisterItem( "account_flag_dev", eItemFlavorGRXMode.REGULAR )
	GRX_QA_ITEM = GRX_RegisterItem( "account_flag_QA", eItemFlavorGRXMode.REGULAR )
}
#endif


#if UI
void function ShGRX_LevelShutdown()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	fileLevel.WORKAROUND_isInLifetime = false

	fileVM.WORKAROUND_delayedOffersState = GRX_OFFERSSTATE_UNINITIALIZED
	fileVM.WORKAROUND_delayedCraftingOffers = []
	fileVM.WORKAROUND_delayedStoreOffers = []

	UpdatePlayerGRXScriptState( GetLocalClientPlayer(), null )
}
#endif


#if SERVER || CLIENT || UI
void function ShGRX_RegisterItemFlavor( ItemFlavor flavor )
{
	string grxModeStr = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "grxMode" )
	Assert( grxModeStr in eItemFlavorGRXMode, "Unknown item flavor GRX mode: " + grxModeStr )
	flavor._____INTERNAL_grxMode = eItemFlavorGRXMode[grxModeStr]
	if ( flavor._____INTERNAL_grxMode == eItemFlavorGRXMode.REGULAR
	|| flavor._____INTERNAL_grxMode == eItemFlavorGRXMode.CONSUMABLE
	|| flavor._____INTERNAL_grxMode == eItemFlavorGRXMode.PACK
	|| flavor._____INTERNAL_grxMode == eItemFlavorGRXMode.CURRENCY )
	{
		string grxRef = ItemFlavor_GetGRXAlias( flavor )
		Assert( grxRef != "", "Item " + ItemFlavor_GetHumanReadableRef( flavor ) + " has GRX mode enabled but GRX ref is undefined." )

		flavor._____INTERNAL_grxIndex = GRX_RegisterItem( grxRef, flavor._____INTERNAL_grxMode )

		fileLevel.grxIndexItemFlavorMap[flavor._____INTERNAL_grxIndex] <- flavor
		fileLevel.grxRefToGRXIndexMap[grxRef] <- flavor._____INTERNAL_grxIndex
		#if DEV
			bool duplicateGRXRefFound = grxRef in fileLevel.grxRefItemFlavorMap
			Assert( !duplicateGRXRefFound, "Duplicate GRX ref found. Already used by " + ItemFlavor_GetHumanReadableRef( fileLevel.grxRefItemFlavorMap[grxRef] ) )
			fileLevel.grxRefItemFlavorMap[grxRef] <- flavor
		#endif
	}
	else if ( flavor._____INTERNAL_grxMode == eItemFlavorGRXMode.OWNERSHIP_TARGET )
	{
		ItemFlavor ornull ownershipTarget = ItemFlavor_GetGRXOwnershipTarget( flavor )
		if ( ownershipTarget != null )
		{
			expect ItemFlavor(ownershipTarget)
			if ( ownershipTarget._____INTERNAL_grxOwnershipTargettedBy == null )
				ownershipTarget._____INTERNAL_grxOwnershipTargettedBy = []
			array<int> targettedBy = expect array<int>(ownershipTarget._____INTERNAL_grxOwnershipTargettedBy)
			targettedBy.append( flavor._____INTERNAL_guid )
		}
	}

	#if UI
		ItemFlavorPurchasabilityInfo ifpi
		fileLevel.itemFlavorPurchasabilityInfoMap[flavor] <- ifpi
	#endif
}
#endif



#if SERVER || CLIENT || UI
void function OnAllItemFlavorsRegistered()
{
	  
}
#endif



                          
                          
                          
                          
                          
#if SERVER || CLIENT || UI
bool function IsValidItemFlavorGRXIndex( int index, int validationBehavior = eValidation.DONT_ASSERT )
{
	bool good = (index in fileLevel.grxIndexItemFlavorMap)

	if ( !good && validationBehavior == eValidation.ASSERT )                                   
	{
		foreach ( int grxIndex, ItemFlavor flav in fileLevel.grxIndexItemFlavorMap )
		{
			Warning( "##### R5DEV-47389: %d = %s", grxIndex, ItemFlavor_GetHumanReadableRef( flav ) )
		}
	}

	Assert( good || validationBehavior != eValidation.ASSERT, "Unknown item flavor GRX index: " + index + " (valid range is 0-" + (fileLevel.grxIndexItemFlavorMap.len() - 1) + ")" )
	return good
}
#endif


#if SERVER || CLIENT || UI
int function GetGRXIndexByGRXRef( string grxRef )
{
	return fileLevel.grxRefToGRXIndexMap[ grxRef ]
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function GetItemFlavorByGRXIndex( int index )
{
	IsValidItemFlavorGRXIndex( index, eValidation.ASSERT )

	return fileLevel.grxIndexItemFlavorMap[ index ]
}
#endif


#if (SERVER || CLIENT || UI) && DEV
ItemFlavor function GetItemFlavorByGRXRef( string grxRef )
{
	                                                        

	return fileLevel.grxRefItemFlavorMap[ grxRef ]
}
#endif


#if SERVER || CLIENT || UI
int function ItemFlavor_GetGRXMode( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )

	return flavor._____INTERNAL_grxMode
}
#endif


#if SERVER || CLIENT || UI
int function ItemFlavor_GetGRXIndex( ItemFlavor flavor, int validationBehavior = eValidation.ASSERT )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )
	Assert( flavor._____INTERNAL_grxMode != eItemFlavorGRXMode.NONE || validationBehavior == eValidation.DONT_ASSERT, "Attempted to get the GRX index of a non-GRX item flavor: " + DEV_DescItemFlavor( flavor ) )
	Assert( flavor._____INTERNAL_grxIndex >= 0 || validationBehavior == eValidation.DONT_ASSERT, format( "%s( %s ) has an invalid index (%d)", FUNC_NAME(), DEV_DescItemFlavor( flavor ), flavor._____INTERNAL_grxIndex ) )
	return flavor._____INTERNAL_grxIndex
}
#endif


#if SERVER || CLIENT || UI
string function ItemFlavor_GetGRXAlias( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )
	Assert( flavor._____INTERNAL_grxMode != eItemFlavorGRXMode.NONE, "Attempted to get the GRX alias of a non-GRX item flavor: " + DEV_DescItemFlavor( flavor ) )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "grxRef" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor ornull function ItemFlavor_GetGRXOwnershipTarget( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )
	if ( flavor._____INTERNAL_grxMode != eItemFlavorGRXMode.OWNERSHIP_TARGET )
		return null

	asset ownershipTargetFlavAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "ownershipTarget" )
	if ( IsValidItemFlavorSettingsAsset( ownershipTargetFlavAsset ) )
		return GetItemFlavorByAsset( ownershipTargetFlavAsset )

	return null
}
#endif


#if SERVER || CLIENT || UI
array<ItemFlavor> function ItemFlavor_GetGRXOwnershipTargettedBy( ItemFlavor flavor )
{
	array<ItemFlavor> out = []
	if ( flavor._____INTERNAL_grxOwnershipTargettedBy != null )
	{
		foreach ( int targeterGuid in expect array<int>(flavor._____INTERNAL_grxOwnershipTargettedBy) )
		{
			out.append( GetItemFlavorByGUID( targeterGuid ) )
		}
	}
	return out
}
#endif


#if SERVER || CLIENT || UI
int function GRXCurrency_GetCurrencyIndex( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return fileLevel.currencyIndexMap[ItemFlavor_GetGUIDString( flav )]
}
#endif


#if SERVER || CLIENT || UI
string function GRXCurrency_GetPurchaseSound( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "purchaseSound" )
}
#endif


#if SERVER || CLIENT || UI
asset function GRXCurrency_GetPreviewModel( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "previewMdl" )
}
#endif


#if SERVER || CLIENT || UI
asset function GRXCurrency_GetRewardIcon( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "rewardIcon" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function GRXCurrencyBundle_GetCurrencyFlav( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency_bundle )
	return GetItemFlavorByAsset( GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "currencyFlav" ) )
}
#endif


#if SERVER || CLIENT || UI
int function GRXCurrencyBundle_GetValue( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency_bundle )
	return GetCurrentPlaylistVarInt( "grx_" + ItemFlavor_GetHumanReadableRef( flav ) + "_count", -1 )
}
#endif


#if SERVER || CLIENT || UI
bool function GRX_IsInventoryReady( entity player = null )
{
	#if SERVER
		                        
	#elseif UI
		player = GetLocalClientPlayer()
	#endif
	return GetPlayerGRXScriptState( player ).isInventoryReady
}
#endif

#if SERVER
                                                       
 
	                                                             
 
#endif

#if SERVER
                                                        
 
	                                                             
 
#endif

#if SERVER || CLIENT || UI
bool function GRX_HasInventoryEverBeenReady( entity player = null )
{
	#if SERVER
		                                             
	#elseif CLIENT
		if ( player == null )
			player = GetLocalClientPlayer()
	#elseif UI
		if ( player == null )
			player = GetLocalClientPlayer()
	#endif

	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )
	return scriptState.hasInventoryEverBeenClean
}
#endif


#if SERVER || CLIENT || UI
int function GRX_GetPlayerEdition( entity player = null )
{
	#if SERVER
		                                             
	#elseif CLIENT
		if ( player == null )
			player = GetLocalClientPlayer()
	#elseif UI
		if ( player == null )
			player = GetLocalClientPlayer()
	#endif

	return GetPlayerGRXScriptState( player ).marketplaceEdition
}
#endif

#if SERVER || CLIENT || UI
bool function GRX_IsItemOwnedByPlayer( ItemFlavor flav, entity player = null )
{
	Assert( GetPlayerGRXScriptState( player ).isInventoryReady, "Called GRX_IsItemOwnedByPlayer while the player's inventory was not ready" )

	return IsItemOwnedByPlayerInternal( flav, player )
}

bool function GRX_IsItemOwnedByPlayer_AllowOutOfDateData( ItemFlavor flav, entity player = null )
{
	                                                                                      
	                                                  
	                                       
	                                                                                                                                  
	                                                                                                                                 
	                                                                                                                                     

	return IsItemOwnedByPlayerInternal( flav, player )
}
bool function IsItemOwnedByPlayerInternal( ItemFlavor flav, entity player = null )
{
	#if SERVER
		                                             
	#elseif CLIENT
		if ( player == null )
			player = GetLocalClientPlayer()
	#elseif UI
		if ( player == null )
			player = GetLocalClientPlayer()
	#endif

	if ( ItemFlavor_AnyItemsHavePlaylistOverrides() )
	{
		if ( ItemFlavor_GetPlaylistAvailability( flav ) == eItemFlavorPlaylistAvailability.FORCE_UNLOCK_FOR_SPECIAL_EVENT )
			return true
	}

	int grxMode = ItemFlavor_GetGRXMode( flav )

	if ( grxMode == eItemFlavorGRXMode.OWNERSHIP_TARGET )
	{
		ItemFlavor ornull ownershipTargetOverride = ItemFlavor_GetGRXOwnershipTarget( flav )
		if ( ownershipTargetOverride != null )
			return IsItemOwnedByPlayerInternal( expect ItemFlavor(ownershipTargetOverride), player )

		Warning( "Item flavor %s is set to use GRX ownership of another item but it isn't a valid item: %s", ItemFlavor_GetHumanReadableRef( flav ), string(GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "ownershipTarget" )) )
		return false
	}

	                                   
	if ( ItemFlavor_HasUnlockFunc( flav ) && grxMode == GRX_ITEMFLAVORMODE_NONE )
		return ItemFlavor_PassesUnlockFunc( flav, player )

	if ( grxMode == GRX_ITEMFLAVORMODE_NONE )
		return true

	Assert( grxMode == GRX_ITEMFLAVORMODE_REGULAR, format( "Tried to call GRX_IsItemOwnedByPlayer on a non-regular GRX item: %s", ItemFlavor_GetHumanReadableRef( flav ) ) )

	bool has
	if ( !GRX_HasInventoryEverBeenReady( player ) )
	{
		#if SERVER
		                                                                                                                                    
		                         
		 
			                        
			                                                       
			                                                                                                                                  
			                                                               

			                                                                                                                             
				                                                            
		 
		#endif

		has = true
	}
	else
	{
		#if SERVER
			                                                        
		#elseif CLIENT || UI
			#if CLIENT
				Assert( player == GetLocalClientPlayer() )
			#elseif UI
				Assert( player == GetLocalClientPlayer() )
			#endif
			has = GRX_HasItem( flav._____INTERNAL_grxIndex )
		#endif
	}

	if ( IsEverythingUnlocked() )
		return true

	return has
}
#endif

#if UI
GRX_PackCollectionInfo function GRXOffer_GetEventThematicPackCollectionInfoFromScriptOffer( GRXScriptOffer offerData )
{
	GRX_PackCollectionInfo packCollectionInfo
	if ( offerData.output.flavors.len() == 1 && ItemFlavor_GetType( offerData.output.flavors[0] ) == eItemType.account_pack )
	{
		                                                                                                         
		packCollectionInfo = GRXOffer_GetEventThematicPackCollectionInfo( offerData.output.flavors[0] )

		                                                                                                                                  
		if ( packCollectionInfo.numCollected > packCollectionInfo.numTotalInCollection )
			packCollectionInfo.numCollected = packCollectionInfo.numTotalInCollection
	}

	return packCollectionInfo
}
#endif

#if UI
GRX_PackCollectionInfo function GRXOffer_GetEventThematicPackCollectionInfo( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack, "Tried to get Pack Info on an ItemFlavor that was NOT of type 'account_pack'" )

	GRX_PackCollectionInfo data
	if ( ItemFlavor_GetAccountPackType( flav ) != eAccountPackType.EVENT_THEMATIC )
		return data

	array<ItemFlavor> packContents = GRXPack_GetPackContents( flav )
	Assert( packContents.len() > 0 )
	int numOwned = 0
	foreach ( packContent in packContents )
	{
		if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( packContent, GetLocalClientPlayer() ) )
			++numOwned
	}

	int ownedPackCount = GRX_GetPackCount( ItemFlavor_GetGRXIndex( flav ) )
	numOwned += ownedPackCount

	data.numCollected = numOwned
	data.numTotalInCollection = packContents.len()
	return data
}

bool function GRXOffer_IsFullyClaimed( GRXScriptOffer offer )
{
	if ( offer.WORKAROUND_claimedSentinel != null )
	{
		ItemFlavor sentinelFlav = expect ItemFlavor(offer.WORKAROUND_claimedSentinel)
		if ( GRX_IsItemOwnedByPlayer( sentinelFlav ) )
			return true
	}

	if( GRXOffer_GetBundleOfferRestrictions( offer ) != "" )
		return true

	foreach ( int outputIdx, ItemFlavor outputFlav in offer.output.flavors )
	{
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.REGULAR )
		{
			if ( !GRX_IsItemOwnedByPlayer( outputFlav ) )
				return false
		}
		else if ( ItemFlavor_GetType( outputFlav ) == eItemType.account_pack )
		{
			GRX_PackCollectionInfo packCollectionInfo = GRXOffer_GetEventThematicPackCollectionInfo( outputFlav )
			if ( packCollectionInfo.numTotalInCollection > 0 )
			{
				if ( packCollectionInfo.numCollected < packCollectionInfo.numTotalInCollection )
					return false
			}
			else
			{
				return false                                                                                
			}
		}
		else
		{

					                                                                                                   
			return false
		}
	}
	return true
}
#endif


#if UI
int function GRXOffer_GetOwnedItemsCount( GRXScriptOffer offer )
{
	int count = 0
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.REGULAR )
		{
			if ( GRX_IsItemOwnedByPlayer( outputFlav ) )
				count = count + 1
		}
	}
	return count
}
#endif


#if UI
bool function GRXOffer_IsHeirloomPack( GRXScriptOffer offer  )
{
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		if ( !ItemFlavor_HasQuality( outputFlav ) )
			return false

		if ( ItemFlavor_GetQuality( outputFlav ) != eRarityTier.HEIRLOOM )
			return false
	}

	return true
}

bool function GRXOffer_ContainsPack( GRXScriptOffer offer )
{
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.PACK )
		{
			                                                                                          
			if ( !ItemFlavor_HasQuality( outputFlav ) || ItemFlavor_GetQuality( outputFlav ) != eRarityTier.HEIRLOOM )
				return true
		}

	return false
}
#endif

#if UI
bool function GRXOffer_ContainsEventPack( GRXScriptOffer offer )
{
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		string grxRef = ItemFlavor_GetHumanReadableRef( outputFlav )
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.PACK && ItemFlavor_GetAccountPackType( outputFlav ) == eAccountPackType.EVENT )
			return true
	}

	return false
}
#endif

#if UI
bool function GRXOffer_ContainsThematicPack( GRXScriptOffer offer )
{
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		string grxRef = ItemFlavor_GetHumanReadableRef( outputFlav )
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.PACK && ItemFlavor_GetAccountPackType( outputFlav ) == eAccountPackType.THEMATIC )
			return true
	}

	return false
}
#endif

#if UI
bool function GRXOffer_ContainsEventThematicPack( GRXScriptOffer offer )
{
	                                                                                                           
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		string grxRef = ItemFlavor_GetHumanReadableRef( outputFlav )
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.PACK && ItemFlavor_GetAccountPackType( outputFlav ) == eAccountPackType.EVENT_THEMATIC )
			return true
	}

	return false
}
#endif

#if UI
string function GRXOffer_GetSpecialPackName( GRXScriptOffer offer )
{
	string specialPackName = ""
	foreach ( ItemFlavor outputFlav in offer.output.flavors )
	{
		string grxRef = ItemFlavor_GetHumanReadableRef( outputFlav )
		if ( ItemFlavor_GetGRXMode( outputFlav ) == eItemFlavorGRXMode.PACK && ItemFlavor_GetAccountPackType( outputFlav ) != eAccountPackType.APEX )
			specialPackName = ItemFlavor_GetShortName( outputFlav )
	}

	return specialPackName
}
#endif


#if UI
string function GRXOffer_GetBundleOfferRestrictions( GRXScriptOffer offer )
{
	if( offer.output.flavors.len() <= 1 )
		return ""

	if ( GRXOffer_IsHeirloomPack( offer ) )                                                                            
		return ""

	if ( offer.isSKUOffer )
		return ""

	                                                                                             
	                                                                                       
	int itemsOwned = 0
	int coreItemCount = 0
	for ( int offerIndex = 0; offerIndex < offer.items.len(); ++offerIndex )
	{
		                                                                 
		                                                                                                               
		if ( offer.offerType != GRX_OFFERTYPE_BUNDLE || offer.items[offerIndex].itemType == GRX_OFFERITEMTYPE_CORE )
		{
			ItemFlavor coreItemFlav = GetItemFlavorByGRXIndex( offer.items[offerIndex].itemIdx )

			                                                                                           
			if( ItemFlavor_GetGRXMode( coreItemFlav ) != eItemFlavorGRXMode.REGULAR )
			{
				Assert( offer.items[offerIndex].itemType != GRX_OFFERITEMTYPE_CORE )                                                 
				continue
			}

			                                                                                                                 
			if( GRX_IsItemOwnedByPlayer( coreItemFlav ) )
				itemsOwned++
			coreItemCount++
		}
	}

	bool lockout = false
	if ( offer.offerType == GRX_OFFERTYPE_BUNDLE )
		lockout = coreItemCount == itemsOwned
	else
		lockout = itemsOwned >= 1                                                                           

	                                                                                                           
	if ( lockout )
	{
		if ( itemsOwned == 1 )
			return "#BUNDLE_BONUS_LOCKED"
		else if ( itemsOwned > 1 )
			return "#BUNDLE_BONUS_LOCKED_PLURAL"
	}

	return ""
}
#endif

#if SERVER || UI
void function QueueGRXOperation( entity player, ScriptGRXOperationInfo operationInfo, bool DEV_isDevOperation = false )
{
	Assert( IsLobby() || DEV_isDevOperation, "QueueGRXOperation should only be called when in the lobby." )
	if ( !IsLobby() && !DEV_isDevOperation )
		return

	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )

	QueueGRXOperationInternal( player, operationInfo, scriptState )

	UpdatePlayerGRXScriptState( player, scriptState.WORKAROUND_lastCodeUserInfo )
}
#endif


#if SERVER
                                                   
 
	                                                                    
	                                    
	                                                                             
 
#endif

#if SERVER || UI
bool function IsGRXOperationDone( ScriptGRXOperationInfo operationInfo )
{
	if ( operationInfo.status == eScriptGRXOperationStatus.DONE_SUCCESS )
		return true

	if ( operationInfo.status == eScriptGRXOperationStatus.DONE_FAILED )
		return true

	if ( operationInfo.status == eScriptGRXOperationStatus.DONE_INTERRUPTED )
		return true

	return false
}
#endif


#if SERVER || UI
void function QueueGRXOperationInternal( entity player, ScriptGRXOperationInfo operationInfo, PlayerGRXScriptState scriptState )
{
	#if UI
		Assert( scriptState.operationQueue.len() == 0, "Attempted to queue a UI GRX operation while one was already queued." )
	#endif

	operationInfo.DEV_culprit = FUNC_NAME( 2 )
#if UI
	operationInfo.DEV_queueTime = UITime()
#else
	operationInfo.DEV_queueTime = Time()
#endif      

	operationInfo.status = eScriptGRXOperationStatus.QUEUED
	operationInfo.id = scriptState.nextScriptQueryId
	scriptState.nextScriptQueryId += 1
	if ( operationInfo._isAutoOperation )
	{
		Assert( !scriptState.isAutoOperationQueued )
		scriptState.isAutoOperationQueued = true
		scriptState.operationQueue.insert( 0, operationInfo )
	}
	else
	{
		scriptState.operationQueue.append( operationInfo )
	}
}
#endif


#if SERVER || UI
int function GRXCurrency_GetPlayerBalance( entity player, ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )

	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )
	Assert( scriptState.isInventoryReady, "Tried to get player currency balance while their GRX inventory state was not ready" )

	if( !scriptState.isInventoryReady || scriptState.balances.len() == 0 )
		return 0

	int currencyIndex = GRXCurrency_GetCurrencyIndex( flav )
	return scriptState.balances[currencyIndex]
}
#endif


#if UI
void function GRX_PurchaseOffer( int opId, int queryGoal, GRXScriptOffer offer, ItemFlavorBag price, int quantity )
{
	if ( offer.isCraftingOffer )
	{
		Assert( queryGoal == GRX_HTTPQUERYGOAL_CRAFT_ITEM )
		Assert( quantity == 1 )
		GRX_CraftItem( opId, ItemFlavor_GetGRXIndex( offer.output.flavors[0] ) )
		return
	}

	Assert( offer.output.flavors.len() == offer.output.quantities.len() )
	int numItems = offer.output.flavors.len()

	array<int> grxIndices = []
	array<int> grxQuantities = []
	for ( int i = 0; i < numItems; i++ )
	{
		grxIndices.append( ItemFlavor_GetGRXIndex( offer.output.flavors[i] ) )
		grxQuantities.append( offer.output.quantities[i] )
	}

	if ( offer.WORKAROUND_claimedSentinel != null )
		grxIndices.append( ItemFlavor_GetGRXIndex( expect ItemFlavor(offer.WORKAROUND_claimedSentinel) ) )

	if ( offer.offerType == GRX_OFFERTYPE_BUNDLE )
		GRX_PurchaseBundleOffer( opId, queryGoal, offer.offerAlias, quantity, grxIndices, grxQuantities, GRX_GetCurrencyArrayFromBag( price ) )
	else
		GRX_PurchaseStoreOffer( opId, queryGoal, quantity, grxIndices, grxQuantities, GRX_GetCurrencyArrayFromBag( price ) )
}
#endif


#if CLIENT || UI
ItemFlavorBag function GRX_GetMostRecentPackOpeningResults()
{
	Assert( fileLevel.mostRecentPackOpeningResultsOrNull != null, "Tried to call GRX_GetMostRecentPackOpeningResults with no pack opening results available for use" )

	ItemFlavorBag bag = expect ItemFlavorBag(fileLevel.mostRecentPackOpeningResultsOrNull)
	fileLevel.mostRecentPackOpeningResultsOrNull = null
	return bag
}
#endif


#if UI
array<ItemFlavor> function GRX_GetAllPackFlavors()
{
	return fileLevel.packFlavorList
}
#endif


#if UI
table<ItemFlavor, int> function GRX_GetPackCounts()
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).isInventoryReady )

	table<ItemFlavor, int> packCountMap = {}

	foreach ( ItemFlavor pack in GRX_GetAllPackFlavors() )
	{
		packCountMap[pack] <- GRX_GetPackCount( ItemFlavor_GetGRXIndex( pack ) )
	}

	return packCountMap
}
#endif


#if UI
int function GRX_GetTotalPackCount()
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).isInventoryReady )

	int count = 0
	foreach ( ItemFlavor pack in GRX_GetAllPackFlavors() )
		count += GRX_GetPackCount( ItemFlavor_GetGRXIndex( pack ) )

	return count
}
#endif


#if SERVER
                                                                                             
 
	                                                                               
	                                                                  
 
#endif

#if SERVER
                                                                                  
 
	                                                                    
	                                                       
 
#endif


#if UI
array<GRXScriptOffer> function GRX_GetLocationOffers( string location )
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).areOffersReady, "Called GRX_GetLocationOffers when offers weren't ready" )

	if ( location in fileLevel.locationOffersMap )
		return fileLevel.locationOffersMap[location]

	return []
}
#endif

#if UI
bool function GRX_IsLocationActive( string location )
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).areOffersReady, "Called GRX_IsLocationActive when offers weren't ready" )

	if ( location in fileLevel.locationOffersMap )
		return fileLevel.locationOffersMap[location].len() > 0

	return false
}
#endif

#if UI
array<GRXScriptOffer> function GRX_GetItemDedicatedStoreOffers( ItemFlavor flav, string location )
{
	ItemFlavorPurchasabilityInfo ifpi = GRX_GetItemPurchasabilityInfo( flav )
	if ( !(location in ifpi.locationToDedicatedStoreOffersMap) )
		return []
	return ifpi.locationToDedicatedStoreOffersMap[location]
}
#endif


#if UI
int function GRX_GetStoreOfferColumnNumRows( int col, int storeLocation )
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).areOffersReady, "Called GRX_GetStoreOfferColumnNumRows when offers weren't ready" )

	int numRows = 0
	array<array<array<GRXScriptOffer> > > storeOfferColumns

	if( storeLocation == eStoreLocation.SHOP )
		storeOfferColumns = fileLevel.storeOfferColumns
	else if( storeLocation == eStoreLocation.SPECIALS )
		storeOfferColumns = fileLevel.specialsStoreOfferColumns
	else if( storeLocation == eStoreLocation.SEASONAL )
		storeOfferColumns = fileLevel.seasonalStoreOfferColumns
	else
		return 0

	if ( storeOfferColumns.isvalidindex( col ) )
	{
		if ( storeOfferColumns[col].len() > 0 && storeOfferColumns[col][0].len() > 0 )
		{
			foreach ( offer in storeOfferColumns[col][0] )
			{
				if ( offer.expireTime <= GetUnixTimestamp() )
					continue

				numRows++
				break
			}
		}

		if ( storeOfferColumns[col].len() > 1 && storeOfferColumns[col][1].len() > 0 )
		{
			foreach ( offer in storeOfferColumns[col][1] )
			{
				if ( offer.expireTime <= GetUnixTimestamp() )
					continue

				numRows++
				break
			}
		}
	}

	return numRows
}
#endif

#if UI
array<GRXScriptOffer> function GRX_GetStoreOfferColumn( int col, int row, int storeLocation )
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).areOffersReady, "Called GRX_GetStoreOfferColumn when offers weren't ready" )

	array<GRXScriptOffer> offers
	array<array<array<GRXScriptOffer> > > storeOfferColumns

	if( storeLocation == eStoreLocation.SHOP )
		storeOfferColumns = fileLevel.storeOfferColumns
	else if( storeLocation == eStoreLocation.SPECIALS )
		storeOfferColumns = fileLevel.specialsStoreOfferColumns
	else if( storeLocation == eStoreLocation.SEASONAL )
		storeOfferColumns = fileLevel.seasonalStoreOfferColumns
	else
		return offers

	if ( storeOfferColumns.isvalidindex( col ) )
	{
		if ( storeOfferColumns[col].isvalidindex( row ) && storeOfferColumns[col][row].len() > 0 )
		{
			foreach ( offer in storeOfferColumns[col][row] )
			{
				if ( offer.expireTime <= GetUnixTimestamp() )
					continue

				offers.append( offer )
			}
		}
	}

	return offers
}
#endif


#if UI
array<GRXScriptOffer> function GRX_GetStoreOffers( int storeLocationn )
{
	Assert( GetPlayerGRXScriptState( GetLocalClientPlayer() ).areOffersReady, "Called GRX_GetStoreOffers when offers weren't ready" )

	array<GRXScriptOffer> offers
	for ( int col = 0; col < 5; col++ )                                 
		for ( int row = 0; row < 2; row++ )
			offers.extend( GRX_GetStoreOfferColumn( col, row, storeLocationn ) )

	return offers
}
#endif


#if UI
array<ItemFlavor> function GRX_GetStoreOfferItems( int storeLocation )
{
	array<GRXScriptOffer> offers = GRX_GetStoreOffers( storeLocation )
	array<ItemFlavor> items

	foreach ( offer in offers )
		items.append( offer.output.flavors[0] )

	return items
}
#endif


#if UI
array<ItemFlavor> function GRX_GetLocationOfferItems( string location )
{
	array<GRXScriptOffer> offers = GRX_GetLocationOffers( location )
	array<ItemFlavor> items

	foreach ( offer in offers )
		items.append( offer.output.flavors[0] )

	return items
}
#endif


#if UI
bool function GRX_AreOffersReady()
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	return scriptState.isInventoryReady && scriptState.areOffersReady
}
#endif


#if UI
bool function GRX_IsBadLuckProtectionActive()
{
	if ( !GRX_IsInventoryReady() )
		return false

	return false
}
#endif


#if CLIENT || UI
asset function GRXPack_GetOpenButtonIcon( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "openButtonIcon" )
}
#endif


#if CLIENT || UI
vector ornull function GRXPack_GetCustomColor( ItemFlavor flav, int idx )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	if ( !GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "useCustomColors" ) )
		return null

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flav ), format( "customCol%d", idx ) )
}
#endif


#if CLIENT || UI
vector ornull function GRXPack_GetCustomCountTextCol( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	if ( !GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "useCustomColors" ) )
		return null

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flav ), "countTextCol" )
}
#endif


#if SERVER || CLIENT || UI
bool function GRXPack_IsEphemeral( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "isEphemeral" )
}
#endif


#if SERVER || CLIENT || UI
bool function GRXPack_IsExpectedToContainSingleItemWithCurrency( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "isExpectedToContainSingleItemWithCurrency" )
}
#endif


#if SERVER || CLIENT || UI
asset function GRXPack_GetTickModel( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "tickMdl" )
}
#endif


#if SERVER || CLIENT || UI
array<ItemFlavor> function GRXPack_GetPackContents( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	array<ItemFlavor> contents = []
	foreach ( var contentsBlock in IterateSettingsAssetArray( ItemFlavor_GetAsset( flav ), "packContents" ) )
	{
		asset contentAsset = GetSettingsBlockAsset( contentsBlock, "flavor" )
		if ( IsValidItemFlavorSettingsAsset( contentAsset ) )
			contents.append( GetItemFlavorByAsset( contentAsset ) )
	}
	return contents
}
#endif


#if CLIENT
string function GRXPack_GetTickSoundAlias( ItemFlavor flav, int soundKind )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	switch ( soundKind )
	{
		case eGRXPackTickSoundKind.TriadBounce: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "triadBounceSound" )

		case eGRXPackTickSoundKind.PuckLand: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "puckLandSound" )

		case eGRXPackTickSoundKind.Unpack: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "unpackSound" )

		case eGRXPackTickSoundKind.DeployTriadExplo1: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo1Sound" )

		case eGRXPackTickSoundKind.DeployTriadExplo2: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo2Sound" )

		case eGRXPackTickSoundKind.DeployTriadExplo3: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo3Sound" )
	}
	Assert( false )
	return ""
}
#endif



#if SERVER || CLIENT || UI
string function GRXPack_GetTickModelSkin( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "tickMdlSkin" )
}
#endif


#if UI
ItemFlavorPurchasabilityInfo function GRX_GetItemPurchasabilityInfo( ItemFlavor flavor )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	Assert( scriptState.isInventoryReady, "Called ItemFlavor_GetPurchasabilityInfo when the GRX inventory state was not ready" )
	Assert( scriptState.areOffersReady, "Called ItemFlavor_GetPurchasabilityInfo when the GRX offers were not ready" )
	Assert( flavor in fileLevel.itemFlavorPurchasabilityInfoMap, "Called ItemFlavor_GetPurchasabilityInfo when item was not in itemFlavorPurchasabilityInfoMap: " + ItemFlavor_GetHumanReadableRef( flavor ) )

	return fileLevel.itemFlavorPurchasabilityInfoMap[flavor]
}
#endif


#if UI
bool function GRX_IsItemCraftable( ItemFlavor itemFlavor )
{
	ItemFlavorPurchasabilityInfo ifpi = GRX_GetItemPurchasabilityInfo( itemFlavor )
	return (ifpi.craftingOfferOrNull != null)
}
#endif      


#if UI
bool function GRX_CanAfford( ItemFlavorBag price, int quantity )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	Assert( scriptState.isInventoryReady, "Tried to check is the player can afford something while their GRX inventory state was not ready" )

	foreach ( int costIndex, ItemFlavor costFlav in price.flavors )
	{
		int costQuantity = quantity * price.quantities[costIndex]
		Assert( ItemFlavor_GetType( costFlav ) == eItemType.account_currency, "NYI!" )

		if ( costQuantity > GRXCurrency_GetPlayerBalance( GetLocalClientPlayer(), costFlav ) )
			return false
	}

	return true
}

int function GRX_CanAffordDelta( ItemFlavorBag price, int quantity )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	Assert( scriptState.isInventoryReady, "Tried to check is the player can afford something while their GRX inventory state was not ready" )

	foreach ( int costIndex, ItemFlavor costFlav in price.flavors )
	{
		int costQuantity = quantity * price.quantities[costIndex]
		Assert( ItemFlavor_GetType( costFlav ) == eItemType.account_currency, "NYI!" )

		if ( costQuantity > GRXCurrency_GetPlayerBalance( GetLocalClientPlayer(), costFlav ) )
			return costQuantity - GRXCurrency_GetPlayerBalance( GetLocalClientPlayer(), costFlav )
	}

	return 0
}
#endif


#if UI
int function GRX_GetMaxCanAfford( ItemFlavorBag price, int quantity )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	Assert( scriptState.isInventoryReady, "Tried to check is the player can afford something while their GRX inventory state was not ready" )

	Assert( GRX_IsPremiumPrice( price ) )
	foreach ( int costIndex, ItemFlavor costFlav in price.flavors )
	{
		Assert( ItemFlavor_GetType( costFlav ) == eItemType.account_currency, "NYI!" )

		int basePrice       = price.quantities[costIndex]
		int currencyBalance = GRXCurrency_GetPlayerBalance( GetLocalClientPlayer(), costFlav )
		int maxAfford       = int( floor( currencyBalance / float( basePrice ) ) )

		return minint( maxAfford, quantity )
	}

	return 0
}
#endif

#if UI
array<int> function GRX_GetCurrencyArrayFromBag( ItemFlavorBag bag )
{
	array<int> priceArray
	priceArray.resize( GRX_CURRENCY_COUNT, 0 )
	foreach ( int costIndex, ItemFlavor costFlav in bag.flavors )
	{
		int costQuantity = bag.quantities[costIndex]
		Assert( ItemFlavor_GetType( costFlav ) == eItemType.account_currency, "NYI!" )

		priceArray[GRXCurrency_GetCurrencyIndex( costFlav )] = costQuantity
	}

	return priceArray
}
#endif


#if UI
string function GRX_GetFormattedPrice( ItemFlavorBag bag, int quantity = 1 )
{
	array<int> priceArray = GRX_GetCurrencyArrayFromBag( bag )            
	string formattedPrice = ""
	foreach ( currencyIndex, price in priceArray )
	{
		if ( price == 0 )
			continue

		if ( formattedPrice.len() > 0 )
			formattedPrice = formattedPrice + " & "

		ItemFlavor currency = GRX_CURRENCIES[currencyIndex]
		formattedPrice = formattedPrice + "%$" + ItemFlavor_GetIcon( currency ) + "% " + FormatAndLocalizeNumber( "1", float(price * quantity), true )
	}

	return formattedPrice
}
#endif


#if UI
                                                                                             
PriceDisplayData function GRX_GetPriceDisplayData( ItemFlavorBag bag, int quantity = 1 )
{
	array<int> priceArray = GRX_GetCurrencyArrayFromBag( bag )            
	PriceDisplayData data

	foreach ( currencyIndex, price in priceArray )
	{
		if ( price == 0 )
			continue

		Assert( data.amount.len() == 0 )

		data.symbol = ItemFlavor_GetIcon( GRX_CURRENCIES[currencyIndex] )
		data.amount = FormatAndLocalizeNumber( "1", float(price * quantity), true )
	}

	return data
}
#endif


#if UI
bool function GRX_IsCraftingPrice( ItemFlavorBag bag )
{
	return (bag.flavors.len() == 1 && bag.flavors[0] == GRX_CURRENCIES[GRX_CURRENCY_CRAFTING])
}
#endif


#if UI
bool function GRX_IsPremiumPrice( ItemFlavorBag bag )
{
	return (bag.flavors.len() == 1 && bag.flavors[0] == GRX_CURRENCIES[GRX_CURRENCY_PREMIUM])
}
#endif


#if UI
string function GetFormattedValueForCurrency( int value, int currencyIndex )
{
	ItemFlavor currency = GRX_CURRENCIES[currencyIndex]

	return "%$" + ItemFlavor_GetIcon( currency ) + "% " + FormatAndLocalizeNumber( "1", float( value ), true )
}
#endif


#if UI
void function AddCallbackAndCallNow_OnGRXInventoryStateChanged( void functionref() cb, bool HACK_dontErrorOnDuplicate = false )
{
	if ( fileLevel.onGRXInventoryStateChangedCallbacks.contains( cb ) )
	{
		Assert( HACK_dontErrorOnDuplicate, "Tried to add a callback that was already added" )
	}
	fileLevel.onGRXInventoryStateChangedCallbacks.append( cb )

	cb()
}
#endif

#if UI
void function AddCallback_OnGRXInventoryStateChanged( void functionref() cb, bool HACK_dontErrorOnDuplicate = false )
{
	if ( fileLevel.onGRXInventoryStateChangedCallbacks.contains( cb ) )
	{
		Assert( HACK_dontErrorOnDuplicate, "Tried to add a callback that was already added" )
	}
	fileLevel.onGRXInventoryStateChangedCallbacks.append( cb )
}
#endif


#if UI
void function RemoveCallback_OnGRXInventoryStateChanged( void functionref() cb )
{
	Assert( fileLevel.onGRXInventoryStateChangedCallbacks.contains( cb ), "Tried to remove a callback that was not added" )
	fileLevel.onGRXInventoryStateChangedCallbacks.fastremovebyvalue( cb )
}
#endif


#if UI
void function AddCallbackAndCallNow_OnGRXOffersRefreshed( void functionref() cb, bool HACK_dontErrorOnDuplicate = false )
{
	if ( fileLevel.onGRXOffersRefreshedCallbacks.contains( cb ) )
	{
		Assert( HACK_dontErrorOnDuplicate, "Tried to add a callback that was already added" )
		return
	}
	fileLevel.onGRXOffersRefreshedCallbacks.append( cb )

	cb()
}
#endif


#if UI
void function AddCallback_OnGRXOffersRefreshed( void functionref() cb )
{
	Assert( !fileLevel.onGRXOffersRefreshedCallbacks.contains( cb ), "Tried to add a callback that was already added" )
	fileLevel.onGRXOffersRefreshedCallbacks.append( cb )
}
#endif


#if UI
void function RemoveCallback_OnGRXOffersRefreshed( void functionref() cb )
{
	Assert( fileLevel.onGRXOffersRefreshedCallbacks.contains( cb ), "Tried to remove a callback that was not added" )
	fileLevel.onGRXOffersRefreshedCallbacks.fastremovebyvalue( cb )
}
#endif


#if UI
void function AddCallback_OnGRXBundlesRefreshed( void functionref() cb )
{
	Assert( !fileLevel.onGRXBundlesRefreshedCallbacks.contains( cb ), "Tried to add a callback that was already added" )
	fileLevel.onGRXBundlesRefreshedCallbacks.append( cb )
}
#endif

#if UI
void function RemoveCallback_OnGRXBundlesRefreshed( void functionref() cb )
{
	Assert( fileLevel.onGRXBundlesRefreshedCallbacks.contains( cb ), "Tried to remove a callback that was not added" )
	fileLevel.onGRXBundlesRefreshedCallbacks.fastremovebyvalue( cb )
}
#endif



                       
                       
                       
                       
                       
#if DEV && UI
void function DEV_GRX_PrintStoreOfferLocations()
{
	foreach ( ItemFlavor itemLocation, ItemFlavorPurchasabilityInfo ifpi in fileLevel.itemFlavorPurchasabilityInfoMap )
	{
		if ( ifpi.locationToDedicatedStoreOffersMap.len() == 0 )
			continue

		printf( "%s", ItemFlavor_GetHumanReadableRef( itemLocation ) )
		foreach ( string storeLocation, array< GRXScriptOffer > locationOffers in ifpi.locationToDedicatedStoreOffersMap )
		{
			foreach ( GRXScriptOffer locationOffer in locationOffers )
				printf( "\t[%s] %s", storeLocation, Localize( locationOffer.titleText ) )
		}
	}
}

void function DEV_GRX_PrintNextCurrencyExpirationInfo()
{
	PlayerGRXScriptState grxState = GetPlayerGRXScriptState( GetLocalClientPlayer() )

	int secondsToExpire = grxState.nextCurrencyExpirationTime - GetUnixTimestamp();                                                              
	float SECPERDAY = 86400.0;                
	float daysToExpire = secondsToExpire / SECPERDAY;
	printt( "Next Currency Expiration Info:", grxState.nextCurrencyExpirationAmt, "AC expire in", daysToExpire, "days | expiretime =", grxState.nextCurrencyExpirationTime )
}

void function DEV_GRX_TestOpenPack( string ref = "pack_cosmetic_rare" )
{
	ItemFlavor pack = GetItemFlavorByHumanReadableRef( ref )
	ScriptGRXOperationInfo operation
	operation.expectedQueryGoal = GRX_HTTPQUERYGOAL_OPEN_PACK
	operation.doOperationFunc = (void function( int opID ) : ( pack )
	{
		GRX_OpenPack( opID, ItemFlavor_GetGRXIndex( pack ) )
	})
	operation.onDoneCallback = null
	QueueGRXOperation( GetLocalClientPlayer(), operation, true )
}
#endif


#if DEV && UI
void function DEV_GRX_TestPurchase( string ref = "pack_cosmetic_rare", array<int> price = [1, 0, 0, 0, 0], int qty = 1 )
{
	ItemFlavor flav = GetItemFlavorByHumanReadableRef( ref )
	ScriptGRXOperationInfo operation
	operation.expectedQueryGoal = GRX_HTTPQUERYGOAL_PURCHASE_PACK
	operation.doOperationFunc = (void function( int opID ) : ( flav, price, qty )
	{
		GRX_PurchaseStoreOffer( opID, GRX_HTTPQUERYGOAL_PURCHASE_PACK, qty, [ItemFlavor_GetGRXIndex( flav )], [1], price )
	})
	operation.onDoneCallback = null
	QueueGRXOperation( GetLocalClientPlayer(), operation, true )
}
#endif


#if DEV && SERVER
                                                                  
 
	                                                           
	                                             

	                                
	                                                         
	                                                                               
		                                          
	  
	                               
	                               
	                                            
 
#endif


#if DEV && SERVER
                                                                                                               
 
	                                                                    
	                                                                      
	                                                                      

	                      
	                                                                         
	                           
	                       
	                             

	                                            
 
#endif


#if DEV && CLIENT
ItemFlavorBag ornull DEV_GRX_ForcePackResults_resultsOrNull
void function DEV_GRX_ForcePackResults( int packError, ... )
{
	if ( packError == -1 )
	{
		DEV_GRX_ForcePackResults_resultsOrNull = null
		return
	}

	ItemFlavorBag bag
	bag.associatedError = packError
	for ( int argIdx = 0; argIdx < vargc; argIdx += 2 )
	{
		bag.flavors.append( GetItemFlavorByHumanReadableRef( expect string(vargv[argIdx + 0]) ) )
		bag.quantities.append( expect int(vargv[argIdx + 1]) )
	}

	DEV_GRX_ForcePackResults_resultsOrNull = bag
}
#endif


                      
string function GRX_DBG_PREFIX()
{
	#if SERVER
		                
	#elseif CLIENT
		string vm = "CL"
	#elseif UI
		string vm = "UI"
	#endif
	return "<><>GRX<><> " + vm + " " + FUNC_NAME( 1 )
}
        

void function GRXDbg( entity player, string label, ... )
{
	table stackInfos = expect table(getstackinfos( 2 ))
	string str       = format( "[GRXDbg %s %s %s %d %s] %s",
		expect string(stackInfos.src),
		SERVER ? "SV" : CLIENT ? "CL" : UI ? "UI" : "??",
		expect string(stackInfos.func),
		expect int(stackInfos.line),
		string(player),
		label
	)
	for ( int argIdx = 0; argIdx < vargc; argIdx += 2 )
	{
		if ( argIdx > 0 )
			str += "; "

		string key = expect string(vargv[argIdx + 0])
		var val    = vargv[argIdx + 1]
		str += key
		str += "= "
		str += string(val)
	}
	str += "\n"
	print( str )
	                
}


#if DEV && SERVER
                                                             
                                                                
                                                       
                                                       
                                                  
                                                        
                                                                 
                                                                
                                                                       
                                                                         
                                                        
                                                       
                                                 
                                              
 
	                                                       
	                                                           
	 
		                                                                    
		      
	 
	                                                                       

	                                                        
	                                                                  

	                              
		                           
			                                                     
		      

		                                                       
		                                                                 
	   

	                                                                                     
	                                                                                                                           

	                                                                                           
	                                                                                                                                    

	                                                                                             
	                                                                                                                          

	                                                                                             
	                                                                                                                          

	                                                                                     
	                                                                                                                      

	                                                                                                   
	                                                                                                                                           

	                                                                                          
	                                                                                                    
	                                   
	                                             
	                                                           
	                                                                  
	                                                      
	                                                    
	  	                                                            
	                                                                                    

	                           
		                                                    
	      

	                                                                                                                   

	                                                   
	                                                             

	                                                                                                                            
	               
	                     

	                                                                                                                     
	 
		                                                                     
			           

		                                                              
			                                                                                                           
		           
	 

	                                                               
		           

	                                                      
	                                                                
 
                                                                                                                               
 
	                                                                       

	                                                  

	                                              
	                         
	                                             
	                                          
		                                    
	                                 
	                            

	                                        
		                                                  

		                                                           
		                                                             

		                                              
	   

	                                                          

	                                                                                                                  
	               
	                       

	                                                                 

	                                       
		           

	                        

	                       
	                                                                          
	 
		                                                                
		                                                                         

		                   
		                  
		                                                         
		                                                                                                  
		 
			                                                           
			 
				            
			 
			                                                                             
			 
				                     
				            
			 
		 
		            
		 
			                                                                         
			                                                                                           
		 
		    
		 
			                                                                                        
		 
		                                                     

		                                       
			           
		                                     
		                                       
			           

		                                                                                     
		 
			                                                 
			                                                   
				                                                                       
				         
				                                                   
				                   
				         
				   
			               
			                     
		 

		                                    
		                                                                 
		                                                                                    
			                                       
		  
		                                             

		                                                                   
			           
		                                                                     
		 
			                                                 
			                                                   
				                                                                       
				         
				                
				                              
				               
				         
				   
			               
			                     
		 
		    
		 
			                 
		 

		                                                                          
	 

	           
 
                                                                                                                                       
 
	                                                                          
	                                                                            

	                                                 

	                                                                                                                                                                                               
	               
	                       

	                                                                                             
	                                                                                                       
	                                                                                                                                          
	                                                                                                  
	                                                                                   
	                                                                                                                                           

	                 

	                                                                                  
	 
		                                                   
		                                                 
		                
		 
			                              
			                             
		 
	 

	                                        
	 
		                                                         
		                          
		                          
	 

	                                                 

	                                                
		                                                                          
		          
		             
		          
		       
		       
		   
	               
	                     

	                                                         
	 
		                       
		                                    
			                                                                                

		                                         
			                                                                          
			          
			             
			          
			         
			                                       
			                           
		               
		                     
	 
 
#endif



                   
                   
                   
                   
                   
#if SERVER
                                                                
 
	                                
	                                    
	                                                  

	                                                                 
 
#endif


#if SERVER
                                             
                                                            
   
  	                                               
  		      
  
  	                                                                    
  
  	                                    
  	                                                                                              
  	                                                                                                  
  	 
  		                                                                                                              
  	 
  
  	                            
   
#endif


#if SERVER
                                                       
 
	                
	 
		                                            
			                                            
	 
 
#endif


#if SERVER || CLIENT || UI
PlayerGRXScriptState function GetPlayerGRXScriptState( entity player )
{
	#if SERVER
		                                          
	#elseif CLIENT || UI
		#if CLIENT
			Assert( player == GetLocalClientPlayer() )
		#elseif UI
			Assert( player == GetLocalClientPlayer()
			|| player == null                                            
			|| GetLocalClientPlayer() == null                                             )
		#endif

		return fileLevel.localGRXState
	#endif
}
#endif


#if SERVER
                                                                                        
                                
 
	                                                                     
		      

	                                                                                                                                           
		                                                                                

	                                                    
 
#elseif UI
void function UICodeCallback_GRXUserInfoUpdated( GRXUserInfo codeUserInfo )
{
	if ( !fileLevel.WORKAROUND_isInLifetime )
	{
		fileVM.WORKAROUND_wasUserInfoUpdatedBeforeLevelInit = true
		return
	}

	HandleGRXCodeUserInfoUpdated( GetLocalClientPlayer(), codeUserInfo )

	if ( fileVM.WORKAROUND_delayedOffersState != GRX_OFFERSSTATE_UNINITIALIZED )
	{
		HandleGRXOffersRefreshed( fileVM.WORKAROUND_delayedOffersState, fileVM.WORKAROUND_delayedCraftingOffers, fileVM.WORKAROUND_delayedStoreOffers )

		fileVM.WORKAROUND_delayedOffersState = GRX_OFFERSSTATE_UNINITIALIZED
		fileVM.WORKAROUND_delayedCraftingOffers = []
		fileVM.WORKAROUND_delayedStoreOffers = []
	}
}
#endif


#if UI
void function ShGRX_UIScriptResetComplete()
{
	fileLevel.HACK_allowOneBadQueryCompleteCallBecauseOfUIScriptReset = true
	fileLevel.PROTO_serverHasGivenGreenLightForUIGRX = true                  

	GRXUserInfo codeUserInfo = GRX_GetUserInfo()
	HandleGRXCodeUserInfoUpdated( GetLocalClientPlayer(), codeUserInfo )
}
#endif


#if SERVER || UI
void function HandleGRXCodeUserInfoUpdated( entity player, GRXUserInfo codeUserInfo )
{
	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( player, "",
				"inventoryState", string(codeUserInfo.inventoryState) + (codeUserInfo.inventoryState == GRX_INVENTORYSTATE_CLEAN ? "CLEAN" : "NON-CLEAN"),
				"balances", codeUserInfo.balances.join( "," ),
				"queryGoal", codeUserInfo.queryGoal,
				"queryOwner", string(codeUserInfo.queryOwner) + (codeUserInfo.queryOwner == GRX_HTTPQUERYOWNER_CLIENT ? "CLIENT" : "SERVER"),
				"queryState", string(codeUserInfo.queryState) + (codeUserInfo.queryState == GRX_HTTPQUERYSTATE_ACTIVE ? "ACTIVE" : "NON-ACTIVE"),
				"querySeqNum", codeUserInfo.querySeqNum )

			#if UI
				if ( codeUserInfo.nextCurrencyExpirationAmt > 0 )
				{
					GRXDbg( player, "",
						"nextCurrencyExpirationAmount", codeUserInfo.nextCurrencyExpirationAmt,
						"nextCurrencyExpirationTime", codeUserInfo.nextCurrencyExpirationTime )
				}
			#endif
		}
	#endif

	UpdatePlayerGRXScriptState( player, codeUserInfo )
}
#endif


#if SERVER || UI
void function UpdatePlayerGRXScriptState( entity player, GRXUserInfo ornull codeUserInfo = null )
{
#if GRX_DEBUG_PRINTS
	if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
	{
		GRXDbg( player, "",
			"calledFrom", FUNC_NAME( 1 ) )
	}
#endif

	#if SERVER
		                         
			      
	#endif              

	if ( codeUserInfo == null )                                                       
	{
		#if SERVER
			                                        
		#elseif UI
			codeUserInfo = GRX_GetUserInfo()
		#endif
	}
	expect GRXUserInfo(codeUserInfo)

	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )
	scriptState.WORKAROUND_lastCodeUserInfo = codeUserInfo
	scriptState.marketplaceEdition = codeUserInfo.marketplaceEdition
	scriptState.isOfferRestricted = codeUserInfo.isOfferRestricted
	scriptState.hasUpToDateBundleOffers = codeUserInfo.hasUpToDateBundleOffers
#if UI
	scriptState.nextCurrencyExpirationAmt = codeUserInfo.nextCurrencyExpirationAmt
	scriptState.nextCurrencyExpirationTime = codeUserInfo.nextCurrencyExpirationTime

               
                                                                   
                                                                       
      
#endif

	bool wasConsideringInventoryReady = scriptState.isInventoryReady

	bool willConsiderInventoryReady = false
	if ( codeUserInfo.inventoryState == GRX_INVENTORYSTATE_CLEAN && codeUserInfo.queryState == GRX_HTTPQUERYSTATE_NONE )
	{
		willConsiderInventoryReady = true

		#if UI
			if ( !fileLevel.PROTO_serverHasGivenGreenLightForUIGRX || !fileLevel.WORKAROUND_isInLifetime )
				willConsiderInventoryReady = false
		#endif
	}

	scriptState.inventoryState = codeUserInfo.inventoryState

	bool isFirstTimeClean = false
	if ( willConsiderInventoryReady )
	{
		if ( !wasConsideringInventoryReady )
		{
			scriptState.isInventoryReady = true
			scriptState.balances = codeUserInfo.balances
		}

		#if SERVER
			                                                                                                                         
			 
				                                                                          
				                                                                          
				                                                
			 
		#endif

		if ( scriptState.isInventoryReady && !scriptState.hasInventoryEverBeenClean )
		{
			scriptState.hasInventoryEverBeenClean = true
			isFirstTimeClean = true
			#if SERVER
				                                                                 
				                
				 
					                                                                                              
						            

					                                                                             
					                                                                            
					                                                                            
					                           	                                
				 
			#endif
		}

		#if SERVER
			                                                                        
			 
				                                                          

				                                                                                                         
					            

				                                                           
			 
		#endif

		RunGRXOperations( player, scriptState )
		if ( scriptState.activeOperationOrNull != null )
			willConsiderInventoryReady = false
	}

	if ( !willConsiderInventoryReady && scriptState.isInventoryReady )
	{
		scriptState.isInventoryReady = false
		scriptState.balances.clear()
	}

#if SERVER && GRX_DEBUG_PRINTS
	if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
	{
		GRXDbg( player, "",
			"isInventoryReady", scriptState.isInventoryReady,
			"nextScriptQueryId", scriptState.nextScriptQueryId,
			"queueSize", scriptState.operationQueue.len(),
			"activeOperation", scriptState.activeOperationOrNull == null ? "null" : ("from " + (expect ScriptGRXOperationInfo(scriptState.activeOperationOrNull)).DEV_culprit),
			"isQueueingServersideScriptGRXOperations", scriptState.isQueueingServersideScriptGRXOperations,
			"PROTO_haveWeGreenlightedUIForGRX", scriptState.PROTO_haveWeGreenlightedUIForGRX )
	}
#endif


#if CLIENT && GRX_DEBUG_PRINTS
	if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
	{
		GRXDbg( player, "",
			"isInventoryReady", scriptState.isInventoryReady,
			"nextScriptQueryId", scriptState.nextScriptQueryId,
			"queueSize", scriptState.operationQueue.len(),
			"activeOperation", scriptState.activeOperationOrNull == null ? "null" : ("from " + (expect ScriptGRXOperationInfo(scriptState.activeOperationOrNull)).DEV_culprit),
			"areOffersReady", scriptState.areOffersReady )
	}
#endif

	                                                                                                                                                          
	                    
	             

	#if SERVER
		                                   
		 
			               
			                                                        
			 
				                                                         
				                                    
					                                                                   
				    
					                                                    

			 
			                       
			 
				                                    
					                                                                   
				    
					                                                    
			 
			               

			                                                     
			 
				                                                      
				                                                                     
			 
		 
		                                                                 
			                                                    
	#elseif UI
		if ( willConsiderInventoryReady != wasConsideringInventoryReady )
		{
			foreach ( void functionref() cb in fileLevel.onGRXInventoryStateChangedCallbacks )
				cb()

			if ( CanRunClientScript() )
				RunClientScript( "UIToClient_GRXInventoryCleanStateChange", scriptState.isInventoryReady, scriptState.WORKAROUND_lastCodeUserInfo.marketplaceEdition, scriptState.WORKAROUND_lastCodeUserInfo.isOfferRestricted )
		}
	#endif
}
#endif


#if CLIENT
void function UIToClient_GRXInventoryCleanStateChange( bool isClean, int marketplaceEdition, bool isOfferResticted )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	scriptState.isInventoryReady = isClean
	scriptState.marketplaceEdition = marketplaceEdition
	scriptState.isOfferRestricted = isOfferResticted
	if ( isClean )
	{
		scriptState.hasInventoryEverBeenClean = true

		                                                                                 
		ItemFlavor ornull activeBattlePass = GetActiveBattlePass()
		if ( activeBattlePass == null )
			return
		
		expect ItemFlavor( activeBattlePass )

		ItemFlavor xpBoostFlav = BattlePass_GetXPBoostFlav( activeBattlePass )
		SetConVarInt( "client_boostcount", GRX_GetConsumableCount( ItemFlavor_GetGRXIndex( xpBoostFlav ) ) )
	}	
}
#endif


#if UI
void function ServerToUI_PROTO_YouAreGreenLightedForGRX()
{
	fileLevel.PROTO_serverHasGivenGreenLightForUIGRX = true
	UpdatePlayerGRXScriptState( GetLocalClientPlayer() )
}
#endif


#if UI
void function ServerToUI_GRX_QueuedRewardsGiven()
{
	thread TryRunDialogFlowThread()
}
#endif


#if UI
bool function DisplayQueuedRewardsGiven()
{
	                                                   

	entity player = GetLocalClientPlayer()

	if ( !IsLocalClientEHIValid() )
		return false

	for ( int persistentArrayIdx = 0; persistentArrayIdx < QUEUED_REWARDS_MAX_COUNT; persistentArrayIdx++ )
	{
		Assert( QUEUED_REWARDS_MAX_ITEMS_COUNT == 1 )
		SettingsAssetGUID ornull rewardItemFlavGUID = GetQueuedRewardOrNull( persistentArrayIdx )
		if ( rewardItemFlavGUID == null)
			continue

		expect SettingsAssetGUID( rewardItemFlavGUID )
		ItemFlavor rewardItemFlav = GetItemFlavorByGUID( rewardItemFlavGUID )

		Assert( QUEUED_REWARDS_MAX_ITEMS_COUNT == 1 )
		int quantity = expect int(  GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].rewardQuantities[0]", persistentArrayIdx )  ) )                                                                                      

		SettingsAssetGUID sourceItemFlavGUID   = expect int(  GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].sourceGUID", persistentArrayIdx ) )  )                                                                                      
		int sourceItemExtraData                = expect int( GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].sourceGUID_extraData", persistentArrayIdx ) ) )                                                                                      
		ItemFlavor ornull sourceItemFlav       = null
		if ( sourceItemFlavGUID != 0 )
		{
			if ( IsValidItemFlavorGUID( sourceItemFlavGUID ) )
				sourceItemFlav = GetItemFlavorByGUID( sourceItemFlavGUID )
			else
				Warning( "Found unregistered ItemFlavorGUID " + string(sourceItemFlavGUID) + ". This is probably because the source asset has been deleted from Bakery." )
		}

		string titleText = "#GENERIC_REWARD_RECEIVED"
		string descText  = ""
		string headerText = ""
		bool noShowLow   = false
		if ( sourceItemFlav != null )
		{
			expect ItemFlavor( sourceItemFlav )
			switch( ItemFlavor_GetType( sourceItemFlav ) )
			{
				case eItemType.challenge:
				{
					int tierIdx = sourceItemExtraData

					int tierCount = Challenge_GetTierCount( sourceItemFlav )

					if ( tierCount <= 0 )                                                                                         
					{
						descText = ""
					}
					else
					{
						descText = Challenge_GetDescription( sourceItemFlav, tierIdx )
					}

					if ( Challenge_GetTimeSpanKind( sourceItemFlav ) == eChallengeTimeSpanKind.EVENT_SPECIAL_2 )
					{
						titleText = ItemFlavor_GetShortDescription( sourceItemFlav )
						descText = ItemFlavor_GetLongDescription( sourceItemFlav )
					}
					else
					{
						titleText = "#CHALLENGE_COMPLETED_HEADER"
					}
					break
				}

				case eItemType.calevent_collection:
				{
					titleText = ItemFlavor_GetLongName( sourceItemFlav )
					descText = "#LOGIN_REWARD"

					                                                                  
					if ( ItemFlavor_GetType( rewardItemFlav ) == eItemType.music_pack )
					{
						thread (void function() : (rewardItemFlav) {
							RequestSetItemFlavorLoadoutSlot( WaitForLocalClientEHI(), Loadout_MusicPack(), rewardItemFlav )
						})()
					}

					break
				}

				case eItemType.calevent_login:
				{
					titleText = ItemFlavor_GetLongName( sourceItemFlav )
					descText = ItemFlavor_GetLongDescription( sourceItemFlav )
					break
				}

				default: Assert( false )
			}
		}

		BattlePassReward rewardInfo
		rewardInfo.level = -1
		rewardInfo.flav = rewardItemFlav
		rewardInfo.quantity = quantity
		ShowRewardCeremonyDialog(
			headerText,
			titleText,
			descText,
			[rewardInfo],
			false,
			false,
			noShowLow,
			true )

		GRX_MarkRewardAcknowledged( rewardItemFlavGUID, persistentArrayIdx )

		return true                                           
	}

	return false
}
#endif


#if SERVER
                                                                                                                
 
	                           
	                                                                               
	 
		               
		      
	 

	                                             
	                                                                                                                                
	 
		               
		      
	 

	                                                                                                            
	 
		               
		      
	 

	                                                                                                                   
	 
		               
		      
	 

	                                                                                                                                                   

	                 
	                                             
	                                                                                             
	                                                                                                       
	                                                                                                 
	                                                                                                      
	                                                                                                  
	                                                                                                         
 
#endif


#if SERVER || UI
void function RunGRXOperations( entity player, PlayerGRXScriptState scriptState )
{
	if ( !scriptState.isInventoryReady )
		return

	if ( scriptState.activeOperationOrNull != null )
		return

	#if SERVER
		                                           
	#endif

	if ( scriptState.operationQueue.len() == 0 )
	{
		#if SERVER
			                                                    
			 
				                                                   
				                                                                             
			 
		#endif
		return
	}

	ScriptGRXOperationInfo operationInfo = scriptState.operationQueue[0]                                     
	scriptState.activeOperationOrNull = operationInfo

	operationInfo.status = eScriptGRXOperationStatus.RUNNING

#if GRX_DEBUG_PRINTS
	if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
	{
#if UI
		float time = UITime()
#else
		float time = Time()
#endif      
		GRXDbg( player, "script operation running",
			"culprit", operationInfo.DEV_culprit,
			"id", operationInfo.id,
			"age", time - operationInfo.DEV_queueTime )
	}
#endif

	                                                   
	                                                             
	#if SERVER
		                                        
	#endif
	thread WORKAROUND_CallOperationDoFuncOnFrameEnd( operationInfo )
}
void function WORKAROUND_CallOperationDoFuncOnFrameEnd( ScriptGRXOperationInfo operationInfo )
{
	WaitEndFrame()

	if ( operationInfo.status != eScriptGRXOperationStatus.RUNNING )
	{
		#if GRX_DEBUG_PRINTS
			if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
				printt( GRX_DBG_PREFIX(), "operationInfo.status != eScriptGRXOperationStatus.RUNNING", operationInfo.status )
		#endif
		return
	}

		#if SERVER
		#endif

	                                                                                         
#if SERVER
	                                                                                                                                               
		           

	                                                  
	 
		                                                                                                                                       
		      
	 
#elseif UI
	float startTime = UITime()
	while( GRX_GetUserInfo().queryState != GRX_HTTPQUERYSTATE_NONE )
	{
		#if GRX_DEBUG_PRINTS
			if ( UITime() - startTime > 5.0 )
			{
				printt( GRX_DBG_PREFIX(), "while( GRX_GetUserInfo().queryState != GRX_HTTPQUERYSTATE_NONE ) running for more than 5.0s", GRX_GetUserInfo().queryState )
				startTime = UITime()
			}
		#endif
		WaitFrame()
	}

	if ( !fileLevel.WORKAROUND_isInLifetime )
	{
		                                                                           
		return
	}
#endif

	#if SERVER
		                                                                                             
		                                                                        
		 
			                                                                                                                                                                                                                                                           
			                                                                                                                                       
			      
		 
	#endif

	operationInfo.doOperationFunc( operationInfo.id )
}
#endif


#if SERVER
                                                                                     
 
	                 
		      

	                                                 
		      

	                                        
		      


	                                                                        
	 
		                                              
		                                                                                              
		                                                                                    
		 
			                                      
				                                          
		 

		                                                          
		 
			                                                                         
			 
				                                
				                                                             
				                                                                               
					                                                                
				  
				                                                                           
					                                                                                                                             
					                                                                                                              
					                                                                             
					                           
					 
						                                                 
					 
				  
				                                 
				                                                           

				                                                              
			 
		 
	 

	                                                                                 
	 
		                                                                                                       
		 
			                                             
			                                                                                                                                          
			                              
				        
			                                                                       
				                                                                                                                                                   
			                                                                     

			                                                                                                                                
			                                                                                                                                       
			                  
			 
				                             
				        
			 

			                                             
			                                                                                                                       
			                       

			                                                                                
			                                                                                                                                   
			 
				                                                                                             
				                                                                                                       
				                                                                                                 
				                                                                                                      
				                                                                                                         
				                                                                                                  

				        
			 

			                                                                      
			 
				                                                                                                                                                
				                                                     
				                                                                                                 
				                         
				 
					                                                                                             
					                                                                                                       
					                                                                                                 
					                                                                                                      
					                                                                                                  
					                                                                                                         
				 
				        
			 

			                                                        
			 
				                                                                                             
				                                                                                                       
				                                                                                                 
				                                                                                                      
				                                                                                                         
				                                                                                                  

				        
			 

			                                
			                                                         
			                                                                                     
				                                                       
				                                          
			  
			                                                                                                                                           
				                                                                   
				                                                                             
				                          
				 
					                                                  

					                  
					 
						                                                     
						                                                                                                 
						                         
						 
							                                                                                             
							                                                                                                       
							                                                                                                 
							                                                                                                      
							                                                                                                  
							                                                                                                         
						 
					 
					    
					 
						                                                                                                                           
							                                                                    
						                           
					 
				 

				                           
				 
					                                                                                                                                                                                         
						                                                    
					                                                 
				 
			  
			                                 
			                                                                         
			                                                           

			                                                              
		 
	 
 
#endif



#if SERVER
                                                                                                               
 
	                                                                       
 
#elseif UI
void function UICodeCallback_GRXQueryCompleted( int queryScriptId, int queryGoal, int queryState )
{
	HandleGRXQueryCompleted( GetLocalClientPlayer(), queryScriptId, queryGoal, queryState )
}
#endif

#if SERVER
                                                                                                                     
 
 
#endif

#if UI
void function UICodeCallback_GRXBundlesUpdated()
{
	foreach ( void functionref() cb in fileLevel.onGRXBundlesRefreshedCallbacks )
		cb()
}
#endif


#if SERVER || UI
void function HandleGRXQueryCompleted( entity player, int queryScriptId, int queryGoal, int queryState )
                                                                      
{
	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( player, "",
				"queryScriptId", queryScriptId,
				"queryGoal", queryGoal,
				"queryState", queryState )
		}
	#endif

	  
		                               

		   
			                                         
			                                                                   
			                                                               
			                                                                                                           
			                                                                      

		       
			                                                                      
			                                                                   
			                                                        
			                                                                

		       
			                                 
			                             
			                                     
	  

	#if SERVER
		                                                                     
			      

		                                                                    

		                                 

		               
		                                                                           
		 
			                                                                                                                                               
			                                  
			                               
			                                                 
			                                                    
			                                                         
			                                          
			                                                       
			                                                      
			                                                       
			                                                        
			                                                        
			                                  
			                              
			                              
			                                       
			                                         
			                                  
			                                          
			                                 
			                                               
			                                               
			                                                  
			                                                                                   
			                                                        
			                           
		 
		               

		                                                                                                       
			                                       
	#else
		PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )
	#endif

	if ( queryScriptId == -1 || queryScriptId == 0 )
		return                                           

#if SERVER
	                        
	 
		                           
			                                    
		                                                         
	 
#elseif UI
	if ( queryScriptId > 0 )
		return                                                        
#endif

	#if UI
		if ( fileLevel.HACK_allowOneBadQueryCompleteCallBecauseOfUIScriptReset && scriptState.activeOperationOrNull == null )
		{
			fileLevel.HACK_allowOneBadQueryCompleteCallBecauseOfUIScriptReset = false
			return
		}
	#endif

	Assert( scriptState.activeOperationOrNull != null, "Looks like a GRX query was initiated without using QueueGRXOperation. This is dangerous!" )

	ScriptGRXOperationInfo operationInfo = expect ScriptGRXOperationInfo( scriptState.activeOperationOrNull )

	Assert( operationInfo.id == queryScriptId )

	Assert( queryGoal == operationInfo.expectedQueryGoal )                   

	operationInfo._codeQueryState = queryState

	if ( queryState == GRX_HTTPQUERYSTATE_INTERRUPTED )
	{
		operationInfo.status = eScriptGRXOperationStatus.DONE_INTERRUPTED
	}
	else if ( queryState == GRX_HTTPQUERYSTATE_ERROR )
	{
		#if SERVER
			                                                                          
			 
				                                                                       
				                                                                                                                                                                                                  
			 
		#endif
		operationInfo.status = eScriptGRXOperationStatus.DONE_FAILED
	}
	else
	{
		operationInfo.status = eScriptGRXOperationStatus.DONE_SUCCESS
	}

	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( player, "script operation done",
				"culprit", operationInfo.DEV_culprit,
				"id", operationInfo.id,
				"status", GetEnumString( "eScriptGRXOperationStatus", operationInfo.status ) )
		}
	#endif
	if ( operationInfo.onDoneCallback != null )
		operationInfo.onDoneCallback( operationInfo.status )
	Signal( operationInfo, "ScriptGRXOperationDone" )

	#if UI
		if ( operationInfo.status != eScriptGRXOperationStatus.DONE_SUCCESS )
			ShowGRXErrorDialogue( "" )
	#endif

	if ( operationInfo._isAutoOperation )
	{
		Assert( scriptState.isAutoOperationQueued )
		scriptState.isAutoOperationQueued = false
	}
	scriptState.activeOperationOrNull = null
	scriptState.operationQueue.remove( 0 )

	UpdatePlayerGRXScriptState( player )
}
#endif


#if SERVER
                                                                                                                     
 
	                                                     
	 
		                                                          
		                                                                                         
		                    
			                                                     
			 
				                   
					                                   
					                                     
					                            
			 
		      
		                   
			            
	 

	           
 
                                                                                                                        
 
	                   
	                 
	 
		                                                                          
		            
	 

	                                             
	 
		                                                                                                  
		            
	 

	                                  
	 
		                                              

		                     
		                                                              
		 
			                                                                                                                        
			 
				                     
				     
			 
		 

		                                               
		                                             
		 
			                                                                                                                                              
			            
		 

		                                                            
		                                                                                  

		                              
			                                                                                   

		                                     
			                                                                                                                            

		                                                                                      
	 

	                                        

	                                                                                      
	 
		                                                                                                                                                                     
		            
	 

	                                                                              
	 
		                   
		 
			                                                                                                                                                
			               
			            
		 

		                                
		                                                      
		 
			                          
			                                                   
			 
				                                                                                                                                                                               
				            
			 
		 

		                                                       
		 
			                          
			                                                   
			 
				                                                                                                                                                                                 
				            
			 
			                                                                         
			 
				                                                                                                                                                                                         
				            
			 
		 
		                                                   
		 
			                          
			                                                                                       
			 
				                                                                                                                                                                                                                 
				            
			 
		 

		                                                                         
		 
			                                                                                                                                                                   
			            
		 
	 

	                                                                                        
	 
		                                                                                                       
		                                                                                                                      
		 
			                                                                                                                                                                                                
                                       
			            
		 

		                                                                                                                              
		                                               
		                                
		 
			                                                                   
			                                   
			 
				                                                                  
				                                     
					                                         
			 
		 

		                                         
			        

		                                                     
		                                                                             
		 
			                                                                                                                                                                                                                                            
			                                                          
		 
	 

	           
 
#endif


#if UI
void function UICodeCallback_GRXOffersRefreshed( int offersState, array< GRXCraftingOffer > craftingOffers, array< GRXStoreOffer > storeOffers )
{
	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( null, "",
				"offersState", offersState,
				"craftingOffers", craftingOffers.len(),
				"storeOffers", storeOffers.len() )
		}
	#endif

	if ( fileLevel.WORKAROUND_isInLifetime )
	{
		HandleGRXOffersRefreshed( offersState, craftingOffers, storeOffers )
	}
	else
	{
		fileVM.WORKAROUND_delayedOffersState = offersState
		fileVM.WORKAROUND_delayedCraftingOffers = craftingOffers
		fileVM.WORKAROUND_delayedStoreOffers = storeOffers
	}
}
#endif

#if DEV
#if UI
void function DEV_GRX_PreviewStoreItem( string grxRef )
{
	fileVM.grxStorePreviewItem = grxRef
	thread _Force_Refresh_Offers()
}

void function _Force_Refresh_Offers()
{
	ClientCommand( "mtx_getOffersInterval 5" )
	wait 6.0
	ClientCommand( "mtx_getOffersInterval 300" )
}

#endif
#endif


#if UI
void function HandleGRXOffersRefreshed( int offersState, array< GRXCraftingOffer > craftingOffers, array< GRXStoreOffer > storeOffers )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	scriptState.areOffersReady = (offersState == GRX_OFFERSSTATE_READY)
	bool isOfferRestricted = GRX_IsOfferRestricted()

	fileLevel.storeOfferColumns.clear()
	fileLevel.specialsStoreOfferColumns.clear()
	fileLevel.seasonalStoreOfferColumns.clear()
	fileLevel.locationOffersMap.clear()
	foreach ( ItemFlavor itemFlavor, ItemFlavorPurchasabilityInfo ifpi in fileLevel.itemFlavorPurchasabilityInfoMap )
		ifpi.locationToDedicatedStoreOffersMap.clear()

	foreach ( GRXCraftingOffer codeOffer in craftingOffers )
	{
		if ( !IsValidItemFlavorGRXIndex( codeOffer.itemIdx ) )
			continue

		ItemFlavor flav = GetItemFlavorByGRXIndex( codeOffer.itemIdx )

		ItemFlavorPurchasabilityInfo ifpi = fileLevel.itemFlavorPurchasabilityInfoMap[flav]

		Assert( codeOffer.craftingPrice > 0 )
		if ( codeOffer.craftingPrice > 0 )
		{
			GRXScriptCraftingOffer scriptOffer

			if ( isOfferRestricted && GRX_IsItemCoveredByOfferRestrictions( flav ) )
				scriptOffer.isAvailable = false

			scriptOffer.craftingPrice = codeOffer.craftingPrice
			scriptOffer.flavor = flav

			ifpi.craftingOfferOrNull = scriptOffer
		}
		else
		{
			ifpi.craftingOfferOrNull = null
		}
	}

	const bool TEMP_collapsePrereqOffers = false

	array<GRXScriptOffer> tempPrereqOffers = []
	foreach ( GRXStoreOffer codeOffer in storeOffers )
	{
		GRXScriptOffer scriptOffer

		array<string> offerProblems = []
		foreach ( GRXStoreOfferItem item in codeOffer.items )
		{
			if ( !IsValidItemFlavorGRXIndex( item.itemIdx ) )
			{
				offerProblems.append( format( "Invalid GRX index: %d", item.itemIdx ) )
				continue
			}

			ItemFlavor outputFlav = GetItemFlavorByGRXIndex( item.itemIdx )

			if ( isOfferRestricted && GRX_IsItemCoveredByOfferRestrictions( outputFlav ) )
				scriptOffer.isAvailable = false

			if ( ItemFlavor_GetType( outputFlav ) == eItemType.grx_sentinel )
			{
				scriptOffer.WORKAROUND_claimedSentinel = outputFlav
				continue
			}

			scriptOffer.items.append( item )

			bool foundMatchingOutputBagEntry = false
			foreach ( int existingOutputIdx, ItemFlavor existingOutputFlav in scriptOffer.output.flavors )
			{
				if ( outputFlav == existingOutputFlav )
				{
					foundMatchingOutputBagEntry = true
					scriptOffer.output.quantities[existingOutputIdx] += item.itemQuantity
				}
			}
			if ( !foundMatchingOutputBagEntry )
			{
				scriptOffer.output.flavors.append( outputFlav )
				scriptOffer.output.quantities.append( item.itemQuantity )
			}
		}

		scriptOffer.attributes = clone codeOffer.attrs

		if ( isOfferRestricted && GRX_IsOfferRestrictedByOfferAttributes( scriptOffer ) )
			scriptOffer.isAvailable = false

		if( scriptOffer.items.len() > 1 )
			scriptOffer.items.sort( SortStoreOfferItems )

		foreach ( int priceIdx, array<int> currencyArray in codeOffer.prices )
		{
			ItemFlavorBag price
			foreach ( int currencyIndex, int currencyQuantity in currencyArray )
			{
				ItemFlavor currencyFlav = GRX_CURRENCIES[currencyIndex]

				if ( currencyQuantity <= 0 )
				{
					if ( currencyQuantity < 0 )
						offerProblems.append( format( "Price #%d currency '%s' has bad quantity: %d", priceIdx, ItemFlavor_GetHumanReadableRef( currencyFlav ), currencyQuantity ) )
					continue
				}

				price.flavors.append( currencyFlav )
				price.quantities.append( currencyQuantity )
			}
			if ( price.flavors.len() == 0 )
				continue

			scriptOffer.prices.append( price )
		}

		if ( scriptOffer.prices.len() == 0 )
			offerProblems.append( "No prices" )

		if ( !("location" in codeOffer.attrs) )
			offerProblems.append( "Missing 'location' attribute" )

		if ( offerProblems.len() > 0 )
		{
			Warning( "Offer %s has problems:\n - %s", DEV_GRX_DescribeOffer( scriptOffer ), offerProblems.join( "\n - " ) )
			continue                                  
		}

		ItemFlavor flav = GetItemFlavorByGRXIndex( codeOffer.items[0].itemIdx )
		#if DEV
			if ( fileVM.grxStorePreviewItem != "" )
				flav = GetItemFlavorByGRXRef( fileVM.grxStorePreviewItem )
		#endif

		string storeLocation              = codeOffer.attrs.location
		ItemFlavorPurchasabilityInfo ifpi = fileLevel.itemFlavorPurchasabilityInfoMap[flav]
		if ( !(storeLocation in ifpi.locationToDedicatedStoreOffersMap) )
			ifpi.locationToDedicatedStoreOffersMap[storeLocation] <- []

		scriptOffer.offerAlias = codeOffer.offerAlias
		scriptOffer.offerType = codeOffer.offerType

		                        
		scriptOffer.titleText = ( "offertitle" in scriptOffer.attributes ? scriptOffer.attributes["offertitle"] : ItemFlavor_GetLongName( flav ) )

		if ( "offerdescription" in scriptOffer.attributes )
		{
			scriptOffer.descText = scriptOffer.attributes["offerdescription"]
		}
		else if ( scriptOffer.output.flavors.len() > 1 )
		{
			scriptOffer.descText= ItemFlavor_GetRewardShortDescription( flav )
		}
		else
		{
			scriptOffer.descText = ItemFlavor_GetTypeName( flav )
		}

		if( GRX_HasUpToDateBundleOffers() )
			GRX_CheckBundleAndUpdateOfferPrices( scriptOffer )


		scriptOffer.imageRef = ("imageref" in codeOffer.attrs ? codeOffer.attrs.imageref : "")
		scriptOffer.tagText = ("tag" in codeOffer.attrs ? codeOffer.attrs.tag : "")
		scriptOffer.seasonTag = ("seasontag" in codeOffer.attrs ? codeOffer.attrs.seasontag : "")

		if ( scriptOffer.offerType != GRX_OFFERTYPE_BUNDLE )
		{
			scriptOffer.originalPrice = null

			if ( "originalprice" in codeOffer.attrs )
			{
				Assert( scriptOffer.prices.len() == 1, "NYI!" )
				Assert( scriptOffer.prices[0].flavors.len() == 1, "NYI!" )
				ItemFlavor singleCurrencyFlav = scriptOffer.prices[0].flavors[0]

				scriptOffer.originalPrice = MakeItemFlavorBag( {
					[singleCurrencyFlav] = int(codeOffer.attrs.originalprice),
				} )
			}
		}

		scriptOffer.tooltipTitle = ("tooltiptitle" in codeOffer.attrs ? codeOffer.attrs.tooltiptitle : "")
		scriptOffer.tooltipDesc = ("tooltipdesc" in codeOffer.attrs ? codeOffer.attrs.tooltipdesc : "")
		scriptOffer.prereqText = ("prereqtext" in codeOffer.attrs ? codeOffer.attrs.prereqtext : "")
		scriptOffer.purchaseLimit = ( "purchaselimit" in scriptOffer.attributes ? scriptOffer.attributes["purchaselimit"].tointeger() : 1 )
		scriptOffer.displayPriority = ( "displaypriority" in codeOffer.attrs ? int(codeOffer.attrs.displaypriority) : 0 )
		scriptOffer.expireTime = ("expireSeconds" in codeOffer.attrs ? int(codeOffer.attrs.expireSeconds) + GetUnixTimestamp() : 0)

		if ( GetConVarBool( "assetdownloads_enabled" ) && IsLobby() && scriptOffer.imageRef != "" )
			RunClientScript( "RequestDownloadedImagePakLoad", scriptOffer.imageRef, ePakType.DL_STORE_TALL )

		ifpi.locationToDedicatedStoreOffersMap[storeLocation].append( scriptOffer )

		if ( !(storeLocation in fileLevel.locationOffersMap) )
			fileLevel.locationOffersMap[storeLocation] <- []

		                                                                                  
			fileLevel.locationOffersMap[storeLocation].append( scriptOffer )

		bool hasPrereq = ("prereq" in codeOffer.attrs)
		if ( hasPrereq )
		{
			string ref = codeOffer.attrs["prereq"]
			Assert( IsValidItemFlavorHumanReadableRef( ref ), "Store offer has invalid prereq: " + ref )
			if ( !IsValidItemFlavorHumanReadableRef( ref ) )
				continue

			ItemFlavor prereqFlavor = GetItemFlavorByHumanReadableRef( ref )
			scriptOffer.prereq = prereqFlavor

			if ( TEMP_collapsePrereqOffers )
				tempPrereqOffers.append( scriptOffer )
		}


		if( !hasPrereq || !TEMP_collapsePrereqOffers )
			ProcessColumnData( storeLocation, scriptOffer, codeOffer )

	}

	foreach ( scriptOffer in tempPrereqOffers )
	{
		if( !ProcessPrereqOffer( scriptOffer, fileLevel.storeOfferColumns ) )
			if( !ProcessPrereqOffer( scriptOffer, fileLevel.specialsStoreOfferColumns ) )
				ProcessPrereqOffer( scriptOffer, fileLevel.seasonalStoreOfferColumns )
	}

	SortScriptOffers( fileLevel.storeOfferColumns )
	SortScriptOffers( fileLevel.specialsStoreOfferColumns )
	SortScriptOffers( fileLevel.seasonalStoreOfferColumns )

	foreach ( int grxIndex, ItemFlavor flav in fileLevel.grxIndexItemFlavorMap )
	{
		ItemFlavorPurchasabilityInfo ifpi = fileLevel.itemFlavorPurchasabilityInfoMap[flav]

		ifpi.isPurchasableAtAll = (ifpi.craftingOfferOrNull != null || ifpi.locationToDedicatedStoreOffersMap.len() > 0)

		                                             
		                                              
		   
		  	                                                                               
		  	                                                     
		  	                                                                                       
		   
		                                                
		   
		  	                                                                 
		  	                                                 
		  	                                                         
		   
		                                                      
		   
		  	                                                                       
		  	                                                 
		  	                                                         
		   
		                                                    
		   
		  	                                                                     
		  	                                                 
		  	                                                         
		   
	}

	foreach ( void functionref() cb in fileLevel.onGRXOffersRefreshedCallbacks )
		cb()
}

GRXScriptOffer function GRX_ScriptOfferFromCraftingOffer( GRXScriptCraftingOffer craftOffer )
{
	ItemFlavor flav = craftOffer.flavor

	GRXScriptOffer scriptOffer
	scriptOffer.isCraftingOffer = true
	scriptOffer.isAvailable = craftOffer.isAvailable

	ItemFlavorBag price
	price.flavors.append( GRX_CURRENCIES[GRX_CURRENCY_CRAFTING] )
	price.quantities.append( craftOffer.craftingPrice )
	scriptOffer.prices.append( price )

	         
	scriptOffer.output.flavors.append( flav )
	scriptOffer.output.quantities.append( 1 )

	                        
	scriptOffer.titleText = ItemFlavor_GetLongName( flav )
	scriptOffer.descText = ItemFlavor_GetTypeName( flav )
	scriptOffer.image = ItemFlavor_GetIcon( flav )

	return scriptOffer
}

bool function ProcessPrereqOffer( GRXScriptOffer scriptOffer, array<array<array<GRXScriptOffer> > > storeOfferColumns )
{
	foreach ( colIdx, rowArray in storeOfferColumns )
	{
		for ( int rowIdx = 0; rowIdx < rowArray.len(); rowIdx++ )
		{
			array<GRXScriptOffer> offerArray = rowArray[rowIdx]

			foreach ( flav in offerArray[0].output.flavors )
			{
				if ( flav != expect ItemFlavor( scriptOffer.prereq ) )
					continue

				fileLevel.storeOfferColumns[colIdx][rowIdx].append( scriptOffer )
				return true
			}
		}
	}
	return false
}

void function SortScriptOffers( array<array<array<GRXScriptOffer> > > storeOfferColumns )
{
	foreach ( colIdx, rowArray in storeOfferColumns )
	{
		foreach ( rowIdx, offerArray in rowArray )
		{
			offerArray.sort( SortScriptOffer )
		}
	}
}

int function SortScriptOffer( GRXScriptOffer a, GRXScriptOffer b )
{
	if ( a.displayPriority > b.displayPriority )
		return 1
	else if ( b.displayPriority > a.displayPriority )
		return -1

	if ( a.expireTime > b.expireTime )
		return 1
	else if ( b.expireTime > a.expireTime )
		return -1

	return 0
}

void function ProcessColumnData( string storeLocation, GRXScriptOffer scriptOffer, GRXStoreOffer codeOffer )
{
	if( storeLocation != "shop" && storeLocation != "specials" && storeLocation != "seasonal")
		return

	if( !( "storerow" in codeOffer.attrs ) || !( "storecolumn" in codeOffer.attrs ) )
		return

	int row = int( codeOffer.attrs["storerow"] )
	int col = int( codeOffer.attrs["storecolumn"] )

	if ( row > 0 && col > 0 && scriptOffer.expireTime > GetUnixTimestamp() )
	{
		int colIdx = col - 1, rowIdx = row - 1

		if( storeLocation == "specials" )
		{
			while ( fileLevel.specialsStoreOfferColumns.len() < colIdx + 1 )
				fileLevel.specialsStoreOfferColumns.append( [] )

			while ( fileLevel.specialsStoreOfferColumns[colIdx].len() < rowIdx + 1 )
				fileLevel.specialsStoreOfferColumns[colIdx].append( [] )

			fileLevel.specialsStoreOfferColumns[colIdx][rowIdx].append( scriptOffer )
		}
		else if ( storeLocation == "seasonal" )
		{
			while ( fileLevel.seasonalStoreOfferColumns.len() < colIdx + 1 )
				fileLevel.seasonalStoreOfferColumns.append( [] )

			while ( fileLevel.seasonalStoreOfferColumns[colIdx].len() < rowIdx + 1 )
				fileLevel.seasonalStoreOfferColumns[colIdx].append( [] )

			fileLevel.seasonalStoreOfferColumns[colIdx][rowIdx].append( scriptOffer )
		}
		else
		{
			while ( fileLevel.storeOfferColumns.len() < colIdx + 1 )
				fileLevel.storeOfferColumns.append( [] )

			while ( fileLevel.storeOfferColumns[colIdx].len() < rowIdx + 1 )
				fileLevel.storeOfferColumns[colIdx].append( [] )

			fileLevel.storeOfferColumns[colIdx][rowIdx].append( scriptOffer )
		}
	}

	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( null, "store_offer",
				"col", col,
				"row", row,
				"flav", DEV_DescItemFlavor( scriptOffer.output.flavors[0] ),
				"expireTime", scriptOffer.expireTime,
				"descText", scriptOffer.descText,
				"titleText", scriptOffer.titleText )
		}
	#endif

}
#endif


#if UI
const array<int> HIGH_PRIORITY_ITEM_TYPES = [
	eItemType.battlepass,
	eItemType.character,
]

                                                                                                          
const table<int, int> ITEM_TYPE_PRIORITY_MAP = {
	[eItemType.battlepass] = 110,
	[eItemType.character] =  100,
	[eItemType.character_skin] = 81,
	[eItemType.character_execution] = 80,
	[eItemType.melee_skin] = 72,
	[eItemType.weapon_skin] = 71,
	[eItemType.weapon_charm] = 70,
	[eItemType.gladiator_card_stance] = 65,
	[eItemType.gladiator_card_frame] = 64,
	[eItemType.gladiator_card_intro_quip] = 63,
	[eItemType.gladiator_card_kill_quip] = 62,
	[eItemType.gladiator_card_stat_tracker] = 61,
	[eItemType.gladiator_card_badge] = 60,
	[eItemType.music_pack] = 52,
	[eItemType.loadscreen] = 51,
	[eItemType.skydive_emote] = 50,
	[eItemType.emote_icon] = 40,
	[eItemType.account_pack] = 1,
	[eItemType.character_emote] = 45,
}

int function SortStoreOfferItems( GRXStoreOfferItem itemA, GRXStoreOfferItem itemB )
{
	ItemFlavor a = GetItemFlavorByGRXIndex( itemA.itemIdx )
	ItemFlavor b = GetItemFlavorByGRXIndex( itemB.itemIdx )

	int itemTypeA = ItemFlavor_GetType( a )
	int itemTypeB = ItemFlavor_GetType( b )

	                                                        
	                                                        

	Assert( itemTypeA in ITEM_TYPE_PRIORITY_MAP && itemTypeB in ITEM_TYPE_PRIORITY_MAP, "Found unsupported item type in store offer. Add it to itemTypePriorityMap if it should be supported." )

	int itemTypePriorityA = ITEM_TYPE_PRIORITY_MAP[itemTypeA]
	int itemTypePriorityB = ITEM_TYPE_PRIORITY_MAP[itemTypeB]

	                                                                                  
	bool hasHighestPriorityItemType = false
	foreach ( int highPriorityType in HIGH_PRIORITY_ITEM_TYPES )
		if ( itemTypeA == highPriorityType || itemTypeB == highPriorityType )
			hasHighestPriorityItemType = true

	int result = hasHighestPriorityItemType ? SortLowestFirst( itemTypePriorityA, itemTypePriorityB ) : 0
	if ( result != 0 )
		return result

	result = SortLowestFirst( ItemFlavor_GetGRXMode( b ), ItemFlavor_GetGRXMode( a ) )
	if ( result != 0 )
		return result

	result = SortLowestFirst( ItemFlavor_GetQuality( a ), ItemFlavor_GetQuality( b ) )
	if ( result != 0 )
		return result

	return SortLowestFirst( itemTypePriorityA, itemTypePriorityB )
}

int function SortLowestFirst( int a, int b )
{
	if ( a < b )
		return 1
	else if ( b < a )
		return -1

	return 0
}
#endif


#if UI
string function DEV_GRX_DescribeOffer( GRXScriptOffer offer )
{
	array<string> priceDescs = []
	foreach ( int priceIdx, ItemFlavorBag price in offer.prices )
		priceDescs.append( format( "price%d= %s", priceIdx, DEV_DescribeItemFlavorBag( price ) ) )
	return format( "[contents= %s; %s]", DEV_DescribeItemFlavorBag( offer.output ), priceDescs.join( "; " ) )
}
#endif


#if UI
void function ShowGRXErrorDialogue( string optionalMessage = "" )
{
	EmitUISound( "menu_deny" )

	CloseAllDialogs()

	ConfirmDialogData data
	data.headerText = "#GRX_ERROR_HEADER"
	data.messageText = Localize( "#GRX_ERROR_GENERIC" )
	if ( optionalMessage != "" )
		data.messageText += "\n\n" + Localize( optionalMessage )
	data.contextImage = $"ui/menu/common/dialog_error"

	OpenOKDialogFromData( data )
}
#endif


#if UI
ItemFlavorBag ornull WORKAROUND_GRXPackOpened_Contents = null
void function ClientToUI_WORKAROUND_GRXPackOpened_Start( int associatedError )
{
	ItemFlavorBag bag
	bag.associatedError = associatedError
	WORKAROUND_GRXPackOpened_Contents = bag
}
void function ClientToUI_WORKAROUND_GRXPackOpened_Entry( int guid, int qty )
{
	ItemFlavorBag bag = expect ItemFlavorBag(WORKAROUND_GRXPackOpened_Contents)
	bag.flavors.append( GetItemFlavorByGUID( guid ) )
	bag.quantities.append( qty )
}
void function ClientToUI_WORKAROUND_GRXPackOpened_Finish()
{
	fileLevel.mostRecentPackOpeningResultsOrNull = WORKAROUND_GRXPackOpened_Contents
	WORKAROUND_GRXPackOpened_Contents = null
}
#endif


#if CLIENT
void function ClientCodeCallback_GRXPackOpened( array<int> balanceDiffs, array<int> newItems, int packError )
{
	ItemFlavorBag bag

	for ( int currencyIndex = 0; currencyIndex < GRX_CURRENCY_COUNT; currencyIndex++ )
	{
		ItemFlavor currency = GRX_CURRENCIES[currencyIndex]
		int diff            = balanceDiffs[currencyIndex]
		if ( diff != 0 )
		{
			bag.flavors.append( currency )
			bag.quantities.append( diff )
		}
	}

	foreach ( int itemGRXIndex in newItems )
	{
		ItemFlavor flav = GetItemFlavorByGRXIndex( itemGRXIndex )
		bag.flavors.append( flav )
		bag.quantities.append( 1 )

		Newness_TEMP_MarkItemAsNewAndInformServer( flav )
	}

	#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( null, "" )
			foreach ( int flavIndex, ItemFlavor flav in bag.flavors )
			{
				GRXDbg( null, "",
					"flav", DEV_DescItemFlavor( flav ),
					"name", Localize( ItemFlavor_GetLongName( flav ) ),
					"qty", bag.quantities[flavIndex] )
			}
		}
	#endif

	                                                                                                                                    
	if ( packError != GRX_INVENTORYERROR_NONE )
	{
		bag.associatedError = packError
		#if GRX_DEBUG_PRINTS
			if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
				GRXDbg( null, "", "packError", packError )
		#endif
	}

	#if DEV
		if ( DEV_GRX_ForcePackResults_resultsOrNull != null )
		{
			printt( "PACK RESULTS FORCED!!" )
			bag = expect ItemFlavorBag(DEV_GRX_ForcePackResults_resultsOrNull)
		}
	#endif

	RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Start", bag.associatedError )
	foreach ( int flavIdx, ItemFlavor flav in bag.flavors )
		RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Entry", ItemFlavor_GetGUID( flav ), bag.quantities[flavIdx] )
	RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Finish" )

	fileLevel.mostRecentPackOpeningResultsOrNull = bag
}
#endif


#if SERVER
                                                                      
 
	                         

	                                                                    

	                            
	                      

	                                                                  
	 
		                                                   
			                                                                                                                                       

		                                            

		                                                                                   
		                                                                                

		                                                                       
		                
		 
			                                                                            
			                                            
		 

		                
		 
			                                    
			                                      

			                                                                      
			                                                                      
			                                                                  
			 
				                                                                                                                 
			 
		 
		    
		 
			                          
				                                                                              
				                                               
			                                          
			                                            
		 
	 

	                    
		                                                     
		 
			                   
				                             
				                                                              
				                                                  
				                                                   
				                                       
				                                 
				                           
				                                           
				                                             
				                                                           
				                                                          
		 
	      

	                                                                                  
		                                                                                                                                                                  
		                                                                                      

	                                       
	 
		                                                                        
		 
			                                            
			                                                           
			 
				                                                         
			 
		 
	 

	                                                                 
	 
		                                                                                                                                   
			                      
			                                                                                                 

			                                  
			 
				                 
			 

			                                                                  
			 
				                                                                      
				                                                                      
				                                                                  
				 
					                                                                                                                                                                                          
					             
						                

					                
						                 
				 
			 

			                            
			                                                                         
			 
				                       
				                                                       

				                                                                                                              
				 
					                             
						                                                                                                                                               
					                                                                
					              
				 

				                           
				 
					                                                                         

					                                 
					                                                                                                       
					 
						                                             
						                                                                                                                      
						                                               
						 
							                                                                                                                                         
							                             
						 
						                                                               
						 
							                                             
						 
					 

					                                    
					 
						                                             
						                                                                                                                                                                                        
						                                                                                                                               
						                                                                                                                                                
						                                                                                                                               
						                                                                                                                        
						                                                                                                                                   
					 
					                                          
					 
						                       
						             
							                                                                                                                                            
								                                                                                              

							                                                                                                       
							 
								                                             
								                                    
									                                                                                                                                                             
									                                                                                                        
								 
							 
							                       
						      

						                                                       
						 
							                                                                                                                 
							                                                                                                                            
							 
								                                                                                                                                      
								                                                                                                                                                     
								                                                  
								 
									                                                                                                    
									                                                                                                              
									                                                                                                        
									                                                                                                             
									                                                                                                         
									                                                                                                                
								 
							 

							                                                                                                               
							                                                                                                                                          
							                                                                                   
						 

						                
					 
				 
			 
			                 
		 

		                                                                                                                 
			                    
				                                                                 
		 

		                                   
		 
			                        
			                                                                          
			                   
			 
				                      
			 
			    
			 
				                                                                                                                                                                                             
			 
		 
		    
		 
			                 
			 
				                   
				                                                                                                                  
			 

			                                                                            
			                                                  
			                                                 
			                                                   

			                                      
			 
				           
				                                          
				             

				                              
			 
			                                          
			 
				          
				                                 
				             

				                                    
				 
					          
					                                                                                    
					             
					                                                                                                                                                                                                                                       
					
					                                               
				 

				                                                                                          
				 
					                          
					              
					                               
				 
				    
				 
					                               
				 
			 
			                                          
			 
				          
				                               
				             
				                                                                                                                                                                                                                                     
				                                               
			 
			                

			                                
			                                          
			 
				                                                                                        
						                                                                                        
						                                                                                
						                                                                                                                                                                           
				                                                           
			 
			    
			 
				                                                                                    
				                                                                                  
			 
			                                                                                                                
			 
				                                                                                                                                         
			  
			                                                                                                                              
				                                                                       

				                                                                                               
				 
					                      
						                                                                         
						                                                                                                                  
					                     
				 

				                                             
					                                               

				                                        
				 
					                                                                                       
					                                    
				 

				                       
			  
			                                      
			                   
		 
	 

	                                                                            
 
#endif


#if SERVER
                                                                                   
 
	                                

	                                                                    
	                                             
 
#endif


#if SERVER
                                                                                                                                                                 
 
	                      
	                                                                                                                                                           
	        
	                         
	                                              
	                          

	                                                           
	 
		                                           
		                                                               
		 
			                                                                 
		 
		    
		 
			                                   
			 
				                                                                                                                           
					        

				                                                   
			 
		 
	 

	                                                                                                                      
 
#endif


#if SERVER
                                                                          
 
	                                                                  
		      

	                                                 
	                                                  

	                  
	 
		                                                       
	 
 
#endif


#if SERVER || CLIENT || UI
void function AssertCurrencyBundlePlaylistVarsAreValid( ItemFlavor bundle )
{
	                                                                                                                                            
	if ( GRXCurrencyBundle_GetValue( bundle ) <= 0 )
		Warning( "Playlist must contain this var: %s", "grx_" + ItemFlavor_GetHumanReadableRef( bundle ) + "_count" )
}
#endif


#if SERVER
                                                                                                                      
 
	  

	       
		                                                                
			                                                                                        
	      
 
#endif


#if SERVER || CLIENT || UI
bool function GRX_IsOfferRestricted( entity player = null )
{
#if CLIENT
	if ( player == null )
		player = GetLocalClientPlayer()
#elseif UI
	if ( player == null )
		player = GetLocalClientPlayer()
#endif

	#if SERVER
		                        
		                                                                 
	#elseif CLIENT
		Assert( player == GetLocalClientPlayer() )
		PlayerGRXScriptState grxState = GetPlayerGRXScriptState( player )
	#else
		Assert( player == GetLocalClientPlayer() )
		PlayerGRXScriptState grxState = GetPlayerGRXScriptState( player )
	#endif

	return grxState.isOfferRestricted
}
#endif

#if UI
bool function GRX_IsOfferRestrictedByOfferAttributes( GRXScriptOffer scriptOffer )
{
	bool isOfferRestricted = false
	bool hasUnavailableReason =  false

	if ( "unavailableReason" in scriptOffer.attributes )
	{
		hasUnavailableReason = true
		scriptOffer.unavailableReason = scriptOffer.attributes.unavailableReason
	}

	if ( "restrict" in scriptOffer.attributes )
	{
		string restrictVal = scriptOffer.attributes["restrict"]
		if ( restrictVal == "true" )
			isOfferRestricted = true
	}

	return isOfferRestricted || hasUnavailableReason
}
#endif

#if SERVER || CLIENT || UI
bool function GRX_HasUpToDateBundleOffers( entity player = null )
{
#if SERVER
	                                             
#elseif CLIENT
	if ( player == null )
		player = GetLocalClientPlayer()
#elseif UI
	if ( player == null )
		player = GetLocalClientPlayer()
#endif

	PlayerGRXScriptState grxState = GetPlayerGRXScriptState( player )
	return grxState.hasUpToDateBundleOffers
}
#endif


#if UI
int function GRX_GetNextCurrencyExpirationAmt()
{
	PlayerGRXScriptState grxState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	return grxState.nextCurrencyExpirationAmt
}
#endif


#if UI
int function GRX_GetNextCurrencyExpirationTime()
{
	PlayerGRXScriptState grxState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	return grxState.nextCurrencyExpirationTime
}
#endif


#if SERVER || CLIENT || UI
bool function GRX_IsItemCoveredByOfferRestrictions( ItemFlavor flav )
{
	if ( ItemFlavor_GetType( flav ) == eItemType.account_pack )
	{
		                                                                                                   
		if ( ItemFlavor_GetQuality( flav, eRarityTier.NONE ) == eRarityTier.HEIRLOOM )
			return false

		                                                                                                           
		ItemFlavor ornull activeBattlePass = GetActiveBattlePass()
		if ( activeBattlePass != null )
		{
			expect ItemFlavor( activeBattlePass )
			ItemFlavor basicPassPack = BattlePass_GetBasicPurchasePack( activeBattlePass )
			ItemFlavor bundlePassPack = BattlePass_GetBundlePurchasePack( activeBattlePass )

			if ( flav == basicPassPack || flav == bundlePassPack )
				return false
		}
		return true
	}

	return false
}
#endif

#if UI
ItemFlavorBag function GRX_MakeItemFlavorBagFromPriceArray( array<int> prices )
{
	ItemFlavorBag priceBag
	foreach ( int currencyIndex, int currencyQuantity in prices )
	{
		ItemFlavor currencyFlav = GRX_CURRENCIES[currencyIndex]

		if ( currencyQuantity <= 0 )
			continue

		priceBag.flavors.append( currencyFlav )
		priceBag.quantities.append( currencyQuantity )
	}
	return priceBag
}
#endif

#if UI
bool function GRX_CheckBundleAndUpdateOfferPrices( GRXScriptOffer offer )
{
	if ( offer.offerType != GRX_OFFERTYPE_BUNDLE )
		return false

	GRXBundleOffer bundle = GRX_GetUserBundleOffer( offer.offerAlias )

	if ( bundle.ineligibleReason != "" )
		return false

	offer.prices.clear()

	bool hasValidBundlePrices = false
	bool hasValidOriginalPrices = false

	ItemFlavorBag bundlePricesBag = GRX_MakeItemFlavorBagFromPriceArray( bundle.bundlePrices[0] )
	if ( bundlePricesBag.flavors.len() > 0 )
	{
		offer.prices.append( bundlePricesBag )
		hasValidBundlePrices = true
	}

	ItemFlavorBag originalPriceBag = GRX_MakeItemFlavorBagFromPriceArray( bundle.bundlePrices[1] )
	if( originalPriceBag.flavors.len() > 0 )
	{
		offer.originalPrice = originalPriceBag
		hasValidOriginalPrices = true
	}

	if ( hasValidBundlePrices && hasValidOriginalPrices && bundlePricesBag.flavors[0] == GRX_CURRENCIES[GRX_CURRENCY_PREMIUM] &&
			bundlePricesBag.flavors[0] == originalPriceBag.flavors[0] && bundlePricesBag.quantities[0] > originalPriceBag.quantities[0] )
	{
		Assert( false, "Discount price for " + offer.offerAlias + " is higher than the normal price." )

		offer.prices.clear()
		offer.prices.append( originalPriceBag )
		offer.originalPrice = bundlePricesBag
	}

	return true
}
#endif


#if SERVER && DEV
                               
 
	                                              
	                                         
	                                                  
	                                                                                      
	                                                                                          
	                                          
	                                                 
	                       

	                                    
	                                                                                                            

	                           
 
#endif

#if SERVER
                                                                                                                                                   
 
	                 
		      

	                             

	                                        
	 
		                                                  
			      
		                                                 
		                                
	 

	                                
	                                                            
	                                                                                                       
	 
		                                                                  
	  

	                                             
 
#endif

#if SERVER
                                                            
 
	                                                                    
	                          
		                                                          
		                                                                  
		                                                                              
		                                                             
		                                                            
		                                                                           
	 

	                       
 
#endif


#if UI
table<int, int> function GRX_GetPostGameRewards()
{
	                                                                                                                       
	                                                                                                                                         
	table<int, int> postGameRewards = {}
	entity player = GetLocalClientPlayer()

	if ( !IsLocalClientEHIValid() )
		return postGameRewards

	for ( int persistentArrayIdx = 0; persistentArrayIdx < QUEUED_REWARDS_MAX_COUNT; persistentArrayIdx++ )
	{
		SettingsAssetGUID ornull rewardItemFlavGUID = GetQueuedRewardOrNull( persistentArrayIdx )
		if ( rewardItemFlavGUID == null)
			continue

		expect SettingsAssetGUID( rewardItemFlavGUID )

		SettingsAssetGUID sourceItemFlavGUID   = expect int( GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].sourceGUID", persistentArrayIdx ) ) )
		if ( sourceItemFlavGUID != 0 && IsValidItemFlavorGUID( sourceItemFlavGUID, eValidation.ASSERT ) )
		{
			switch( ItemFlavor_GetType( GetItemFlavorByGUID( sourceItemFlavGUID ) ) )
			{
				case eItemType.challenge:                                                                 
					if ( ItemFlavor_GetType( GetItemFlavorByGUID( rewardItemFlavGUID ) ) == eItemType.gladiator_card_badge )
						postGameRewards[ rewardItemFlavGUID ] <- persistentArrayIdx

					break
			}
		}
	}

	return postGameRewards
}
#endif

#if UI
SettingsAssetGUID ornull function GetQueuedRewardOrNull( int persistentArrayIdx )
{
	SettingsAssetGUID rewardItemFlavGUID = expect int( GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].rewardGUIDs[0]", persistentArrayIdx ) ) )
	if ( rewardItemFlavGUID == 0 )
		return null
	if ( !IsValidItemFlavorGUID( rewardItemFlavGUID, eValidation.ASSERT ) )
		return null                                                                                                                                           

	bool rewardGiven        = expect bool( GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].rewardGiven", persistentArrayIdx )  ) )                                                                                      
	bool rewardAcknowledged = expect bool( GetDialogFlowTablesValueOrPersistence( format( "grxQueuedRewards[%d].rewardAcknowledged", persistentArrayIdx )  )  )                                                                                      
	if ( !rewardGiven || rewardAcknowledged )
		return null

	return rewardItemFlavGUID
}
#endif


#if UI
void function GRX_MarkRewardAcknowledged( int rewardItemFlavGUID, int persistentArrayIdx )
{
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].sourceGUID", persistentArrayIdx ), 0 )
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].sourceGUID_extraData", persistentArrayIdx ), 0 )
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].rewardGUIDs[0]", persistentArrayIdx ), 0 )
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].rewardQuantities[0]", persistentArrayIdx ), 0 )
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].rewardGiven", persistentArrayIdx ), false )
	SetDialogFlowPersistenceTables( format( "grxQueuedRewards[%d].rewardAcknowledged", persistentArrayIdx ), false )

	Remote_ServerCallFunction( "ClientCallback_acknowledge_reward", persistentArrayIdx, rewardItemFlavGUID )
}
#endif

               
      
                                         
 
                                                                                  
                                    
 
      

      
                                           
 
                                                                                  
                                      
 
      
      