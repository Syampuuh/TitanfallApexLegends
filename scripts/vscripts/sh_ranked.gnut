global function Sh_Ranked_Init
global function Sh_Ranked_ItemRegistrationInit
global function GetCurrentRankedDivisionFromScoreAndLadderPosition
global function GetCurrentRankedDivisionFromScore
global function GetCurrentRankedDivisions
global function GetNextRankedDivisionFromScore
global function GetPlayerRankScore
global function GetPrevSeasonPeakPlayerRankScore
global function IsRankedPersistenceValid
global function IsRankedInSeason
global function GetRankedPersistenceData

global function Ranked_GetTiers
global function Ranked_GetCostForEntry
global function Ranked_GetPointsPerKillForPlacement
global function Ranked_GetPlacementMultipler
global function Ranked_GetPlacementKillScore
global function Ranked_GetKillsAndAssistsPointCap
global function Ranked_GetPointsForPlacement
global function Ranked_GetPointsForKillsPlacement
global function Ranked_GetRankedDivisionDataForTier
global function Ranked_GetNextTierData
global function Ranked_GetLadderPosition
global function Ranked_GetPeakLadderPositionPrevSeason
global function GetDemotionProtectionBuffer

global function Ranked_GetHistoricalRankScore
global function Ranked_GetHistoricalFirstSplitRankScore
global function Ranked_GetHistoricalRankedDivisionFromScore
global function Ranked_GetHighestHistoricalRankedTierData                 
global function Ranked_GetHistoricalLadderPosition
global function Ranked_GetHistoricalLadderOnlyDivision
global function Ranked_GetNewDivisionForNewSeasonReset

global function Ranked_PeriodHasLadderOnlyDivision

global function Ranked_UpdateEHIRankScore
global function Ranked_UpdateEHIRankedLadderPosition
global function Ranked_GetNumPlayersOnLadder

global function Ranked_UpdateEHIRankScorePrevSeason
global function Ranked_UpdateEHIRankedLadderPositionPrevSeason

global function Ranked_GetStryderLadderNameForLatestRankedPeriod

global function SharedRanked_CompareDivision
global function SharedRanked_GetEmblemDisplayModeFromEmblemText
global function SharedRanked_GetNumPlayerOnLaddersOverridePlaylistVar

#if CLIENT || UI
global function PopulateRuiWithRankedBadgeDetails
global function PopulateRuiWithPreviousSeasonRankedBadgeDetails
global function CreateNestedRankedRui
global function SharedRanked_FillInRuiEmblemText
#endif

#if SERVER || CLIENT
global function IsRankedGame
global function Ranked_IsPlayerAbandoning
global function SharedRanked_DidPlayerEverHaveAFullTeam
global function SharedRanked_GetAbandonPenaltyLength

#endif

#if SERVER
                                                   
                                                        
                                                                 
                                                                
                                                        
                                                            
                                                             
                                                         
                                       
                                                
                                      
                                     
                                 
                                                 
                                                             
                                                           
                                                                                                
                                                 

                                                
                                       
                                               
                                              

                                                 
                                                                
                                                 

#endif

#if SERVER && DEV
                                  
                                      
                                  
                                                                         
                                                 
                                                      
                                                           
                                                              
                                                          
                                                           
                               
                                        
                                                         
#endif

#if CLIENT && DEV
global function DEV_ForceClientError
#endif

#if CLIENT
global function ShRanked_RegisterNetworkFunctions
global function ServerToClient_Ranked_UpdatePlayerPrevRankedScore
global function ServerToClient_Ranked_UpdatePlayerPrevLadderPos
#endif

#if UI
global function IsRankedPlaylist
global function Ranked_SetupMenuGladCardForUIPlayer
global function Ranked_SetupMenuGladCardFromCommunityUserInfo
global function SharedRanked_GetMatchmakingDelayFromCommunityUserInfo
global function SharedRanked_GetMaxPartyMatchmakingDelay
global function Ranked_ManageDialogFlow
global function PlayLobbyCharacterDialogue
global function Ranked_ShouldUpdateWithComnunityUserInfo
global function SharedRanked_PartyHasRankedLevelAccess
global function Ranked_PartyMeetsRankedDifferenceRequirements
global function Ranked_HasBeenInitialized
global function ServerToUI_Ranked_NotifyRankedPeriodScoreChanged
global function Ranked_ConstructSingleRankBadgeForStatsCard
global function Ranked_ConstructDoubleRankBadgeForStatsCard
#endif

global const SHARED_RANKED_LEVEL_REQUIREMENT = (10 - 1)                                                                                                      
global const RANKED_MAX_KILL_SCORE = 6

global const SHARED_RANKED_NUM_ABANDON_FORGIVENESS_GAMES = 3
global const RANKED_RESET_DIVISION_COUNT = 6                                           
global const RANKED_RESET_DIVISION_FLOOR = 4                           

global const SHARED_RANKED_INVALID_RANK_SCORE = -1
global const SHARED_RANKED_INVALID_LADDER_POSITION = -1
global const SHARED_RANKED_SPLIT_1_STRYDER_SUFFIX = "_split_1"
global const SHARED_RANKED_SPLIT_2_STRYDER_SUFFIX = "_split_2"

global const RANKED_SEASON_02_GUIDSTRING = "SAID00747315762"
global const RANKED_SEASON_03_GUIDSTRING = "SAID00091805734"
global const RANKED_SEASON_04_GUIDSTRING = "SAID00609587000"
global const RANKED_SEASON_05_GUIDSTRING = "SAID00638209737"
global const RANKED_SEASON_06_GUIDSTRING = "SAID01826354644"
global const RANKED_SEASON_07_GUIDSTRING = "SAID00461784517"
global const RANKED_SEASON_08_GUIDSTRING = "SAID01162744308"
global const RANKED_SEASON_09_GUIDSTRING = "SAID01649072598"
global const RANKED_SEASON_10_GUIDSTRING = "SAID01091892544"
global const RANKED_SEASON_11_GUIDSTRING = "SAID01007141711"
global const RANKED_SEASON_12_GUIDSTRING = "SAID01547807959"
global const RANKED_SEASON_13_GUIDSTRING = "SAID02144147554"

                 
global function GetKillPointsWithTierDiff
global function GetTierDifference
global function GetTierDifferenceByEntity
global const RANKED_MAX_KILL_SCORE_BY_SKILL = 175
global const float PARTICIPATION_MODIFIER = 0.5
global function Ranked_GetParticipationMutlipler

global const RANKED_RP_PROMOTION_BONUS = 100

global const int MASTER_PLUS_SCALING_RP = 5
global const int MASTER_PLUS_SCALING_RP_INTERVAL = 1000
const int MASTER_PLUS_SCALING_RP_MAX = 170
const int MASTER_PLUS_TIER_INDEX = 6

const string RANKED_RECHECK_SEASONS_STARTING_WITH = "SAID01091892544"                                                             

                                         
const int RANKED_RP_TIER_MINUS_4 = 0
const int RANKED_RP_TIER_MINUS_3 = 3
const int RANKED_RP_TIER_MINUS_2 = 7
const int RANKED_RP_TIER_MINUS_1 = 10
const int RANKED_RP_TIER_EQUAL   = 10
const int RANKED_RP_TIER_PLUS_1  = 15
const int RANKED_RP_TIER_PLUS_2  = 20
const int RANKED_RP_TIER_PLUS_3  = 25

global enum emblemDisplayMode                                            
{
	DISPLAY_DIVISION,
	DISPLAY_RP,
	DISPLAY_LADDER_POSITION,
	NONE,
}

global const array<string> DIVISION_ORDERING_BY_LOC_KEY =
[
	"#RANKED_DIVISION_ROOKIE_IV",
	"#RANKED_DIVISION_ROOKIE_III",
	"#RANKED_DIVISION_ROOKIE_II",
	"#RANKED_DIVISION_ROOKIE_I",
	"#RANKED_DIVISION_BRONZE_IV",
	"#RANKED_DIVISION_BRONZE_III",
	"#RANKED_DIVISION_BRONZE_II",
	"#RANKED_DIVISION_BRONZE_I",
	"#RANKED_DIVISION_SILVER_IV",
	"#RANKED_DIVISION_SILVER_III",
	"#RANKED_DIVISION_SILVER_II",
	"#RANKED_DIVISION_SILVER_I",
	"#RANKED_DIVISION_GOLD_IV",
	"#RANKED_DIVISION_GOLD_III",
	"#RANKED_DIVISION_GOLD_II",
	"#RANKED_DIVISION_GOLD_I",
	"#RANKED_DIVISION_PLATINUM_IV",
	"#RANKED_DIVISION_PLATINUM_III",
	"#RANKED_DIVISION_PLATINUM_II",
	"#RANKED_DIVISION_PLATINUM_I",
	"#RANKED_DIVISION_DIAMOND_IV",
	"#RANKED_DIVISION_DIAMOND_III",
	"#RANKED_DIVISION_DIAMOND_II",
	"#RANKED_DIVISION_DIAMOND_I",
	"#RANKED_DIVISION_MASTER",
	"#RANKED_DIVISION_APEX_PREDATOR"
]

global const array<string> TIER_ORDERING_BY_LOC_KEY =
[
	"#RANKED_TIER_ROOKIE",
	"#RANKED_TIER_BRONZE",
	"#RANKED_TIER_SILVER",
	"#RANKED_TIER_GOLD",
	"#RANKED_TIER_PLATINUM",
	"#RANKED_TIER_DIAMOND",
	"#RANKED_TIER_MASTER",
	"#RANKED_TIER_APEX_PREDATOR"
]

global enum sharedRankedBadgeAwardLevel
{
	BRONZE_STATIC,
	BRONZE_ANIMATED,
	SILVER_STATIC,
	SILVER_ANIMATED,
	GOLD_STATIC,
	GOLD_ANIMATED,
	PLATINUM_STATIC,
	PLATINUM_ANIMATED,
	DIAMOND_STATIC,
	DIAMOND_ANIMATED,
	MASTER_STATIC,
	MASTER_ANIMATED,
	APEX_STATIC,
	APEX_ANIMATED,
	ROOKIE,
	NONE,
}


global struct SharedRankedReward
{
	string previewName
	bool   previewIconShowBox
	asset  previewIcon
	asset  previewImage
	asset  rewardAsset
}


global struct SharedRankedTierData
{
	string                    name
	int                       scoreMin
	int                       index
	asset                     icon
	asset                     iconRuiAsset
	asset                     bgImage
	asset                     levelUpRuiAsset
	int                       entryCost = 9999999
	int 					  maxProtection
	int 					  minProtection
	bool					  allowsDemotion = true
	string                    promotionAnnouncement
	bool                      isLadderOnlyTier = false
	array<SharedRankedReward> rewards
	                                                                                                                                    
}


global struct SharedRankedDivisionData
{
	string                divisionName
	string                emblemText
	SharedRankedTierData& tier
	int                   scoreMin
	int                   index
	int                   emblemDisplayMode = emblemDisplayMode.DISPLAY_DIVISION
	bool                  isLadderOnlyDivision = false
	int 				  divisionEntryCost
}


global struct RankedPlacementScoreStruct
{
	int   placementPosition
	int   placementPoints
	int   pointsPerKill
	int   pointsPerAssist
	int   sumOfKillsAndAssistsPointCap
	int   placementKillBonus
	int   killByPlacement
	float multiplier
}


global struct RankScoreData
{
	bool wasAbandoned
	bool lossForgiveness
	int  damage
	int  kills
	int  assists
	int  participation

	array<int> killsByTier
	array<int> assistsByTier
	array<int> participationByTier

	float killRP
	float killRPBase
	float assistRP
	float assistRPBase
	float participationRP
	float participationRPBase

	int killBasedPoints
	int killBasedPointsBase

	int promotionBonus = 0

	int placement
	int placementScore
	int entryCost

	int  penaltyPointsForAbandoning = 0
	int  tierDerankingProtectionAdjustment = 0
	int  lossProtectionAdjustment = 0

	int netRP
	int finalRP
	int currentRP
}


struct RankedResetStruct
{
	string previousDivisionName
	string currentDivisionName
}


global struct RankedGameSummarySquadData
{
	                                                                     
	array<int>					killsCountByTier
	array<int>					assistsCountByTier
	array<int>					participationCountByTier
}


struct
{
	bool                                               initialized = false
	bool                                               itemRegistrationInitialized = false
	array<SharedRankedTierData>                        rankedTiers
	array<SharedRankedDivisionData>                    rankedDivisions
	SharedRankedDivisionData ornull                    ladderOnlyDivision = null
	int                                                numPlayersOnLadder = 0
	table<string, int >                          	   historicalNumPlayersOnLadder
	table<string, SharedRankedDivisionData >           historicalLadderOnlyDivision
	table< string, array < SharedRankedTierData > >    historicalRankedTiers
	table< string, array< SharedRankedDivisionData > > historicalRankedDivisions

	table< int, table< int, RankedGameSummarySquadData > > rankedSquadData

	array<void functionref( entity attacker, entity victim )> onPlayerParticipationCallbacks
	array<void functionref(entity, entity, int) >  Callbacks_OnPlayerGameSummaryKillParticipation

	SharedRankedDivisionData& topRankedDivisionData

	array< RankedPlacementScoreStruct > placementScoringData

	table<string, string > stryderLadderNameToPeriodGUIDStringTable

	#if SERVER
		                                                
	#endif

	#if SERVER
		                                                        
		                                                                       
		                                                                       
		                                                                                     
		                                                                                       
		                                                                       
		                                                                         
		                					                                
	#endif

	#if UI
		string              rankedPeriodToAcknowledgeRewards
		string              rankedSplitResetAcknowledgePersistenceField
		table<string, bool> rankedPeriodsWithRewardsNotified
	#endif

} file


void function Sh_Ranked_Init()
                                                                                                                                                                                                             
{
	if ( !file.initialized )                                                                                         
	{
		                                                                                     
		Ranked_InitPlacementScoring()
		RegisterSignal( "Ranked_NotifyRankedPeriodScoreChanged" )
		file.initialized = true
	}

	#if SERVER
		                                              
		                                                         
		                                                               
		                                                                       
		                                                              
		                                                              
		                                                                          
		                                                                                
		                                                                                                                                        
		                                                   

		                
		 
			                                                                          
			                                                                                                         
			 
				                                                                  
				                                                                                                                                                                                 
					        

				                                                            
					        

				                                                                                  
			 
		 

		       
			                                               
		             

	#endif

	#if SERVER || CLIENT

		Remote_RegisterServerFunction( "ClientCallback_rankedPeriodRewardAcknowledged", "string" )
		Remote_RegisterServerFunction( "ClientCallback_rankedSplitResetAcknowledged" )
		Remote_RegisterServerFunction( "ClientCallback_rankedCurrentPeriodRPAdjusted" )

		Remote_RegisterUIFunction( "ServerToUI_Ranked_NotifyRankedPeriodScoreChanged" )                                                                                  

		Remote_RegisterClientFunction ( "ServerToClient_Ranked_UpdatePlayerPrevRankedScore" , "entity", "int", -1, INT_MAX )                    
		Remote_RegisterClientFunction ( "ServerToClient_Ranked_UpdatePlayerPrevLadderPos" , "entity", "int", -1, INT_MAX )                    

		if ( !IsRankedGame() )
			return

		#if SERVER
			                                                                                                 
		#endif

                        
			#if SERVER
				                                                
				                                                                 
			#endif              
                                  

		#if CLIENT
			AddCallback_OnScoreboardCreated( OnScoreboardCreated )
			AddCallback_OnGameStateChanged( OnGameStateChanged )

			Obituary_SetHorizontalOffset( -25 )                                    
			AddOnSpectatorTargetChangedCallback( Ranked_OnSpectateTargetChanged )
		#endif

	#endif
}


void function Sh_Ranked_ItemRegistrationInit()
                                                                                                                                                  
{
	if ( !file.itemRegistrationInitialized )                                                                                          
	{
		AddCallback_OnItemFlavorRegistered( eItemType.calevent_rankedperiod, OnRankedPeriodRegistered )
		AddCallbackOrMaybeCallNow_OnAllItemFlavorsRegistered( Ranked_AllItemFlavorsRegistered )
		file.itemRegistrationInitialized = true
	}
}


void function Ranked_InitPlacementScoring()
{
	var dataTable = GetDataTable( $"datatable/ranked_placement_scoring.rpak" )                 
	int numRows   = GetDataTableRowCount( dataTable )

	file.placementScoringData.clear()

	for ( int i = 0; i < numRows; ++i )
	{
		RankedPlacementScoreStruct placementScoringData
		placementScoringData.placementPosition            = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "placement" ) )
		placementScoringData.placementPoints              = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "placementPoints" ) )
		placementScoringData.pointsPerKill                = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "pointsPerKill" ) )
		placementScoringData.pointsPerAssist              = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "pointsPerAssist" ) )
		placementScoringData.sumOfKillsAndAssistsPointCap = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "sumOfKillsAndAssistsPointCap" ) )
		placementScoringData.placementKillBonus           = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "placementKillBonus" ) )
		placementScoringData.multiplier                   = GetDataTableFloat (dataTable, i, GetDataTableColumnByName( dataTable, "multiplier" ) )
		placementScoringData.killByPlacement              = GetDataTableInt (dataTable, i, GetDataTableColumnByName( dataTable, "killByPlacement" ) )
		file.placementScoringData.append( placementScoringData )
	}
}


void function OnRankedPeriodRegistered( ItemFlavor rp )
{
	array< SharedRankedTierData > tierData
	array< SharedRankedDivisionData  > divisionData

	foreach ( var tierBlock in IterateSettingsAssetArray( ItemFlavor_GetAsset( rp ), "tiers" ) )
	{
		SharedRankedTierData tier
		tier.name                  = GetSettingsBlockString( tierBlock, "name" )
		tier.entryCost             = GetSettingsBlockInt( tierBlock, "entryCost" )
		tier.maxProtection         = GetSettingsBlockInt( tierBlock, "maxProtection" )
		tier.minProtection         = GetSettingsBlockInt( tierBlock, "minProtection" )
		tier.allowsDemotion        = GetSettingsBlockBool( tierBlock, "allowsDemotion" )
		tier.icon                  = GetSettingsBlockAsset( tierBlock, "icon" )
		tier.bgImage               = GetSettingsBlockAsset( tierBlock, "bgImage" )
		tier.levelUpRuiAsset       = GetSettingsBlockStringAsAsset( tierBlock, "levelUpRuiAsset" )
		tier.iconRuiAsset          = GetSettingsBlockStringAsAsset( tierBlock, "iconRuiAsset" )
		tier.promotionAnnouncement = string( GetSettingsBlockStringAsAsset( tierBlock, "promotionAnnouncement" ) )

		tier.scoreMin = 99999999
		foreach ( var divBlock in IterateSettingsArray( GetSettingsBlockArray( tierBlock, "divisions" ) ) )
		{
			SharedRankedDivisionData data
			data.divisionName      = GetSettingsBlockString( divBlock, "name" )
			data.emblemText        = GetSettingsBlockString( divBlock, "emblemText" )
			data.scoreMin          = GetSettingsBlockInt( divBlock, "scoreMin" )
			data.divisionEntryCost = GetSettingsBlockInt ( divBlock, "divisionEntryCost")
			data.emblemDisplayMode = SharedRanked_GetEmblemDisplayModeFromEmblemText( data.emblemText )
			data.tier              = tier


			if ( data.scoreMin < tier.scoreMin )
				tier.scoreMin = data.scoreMin

			divisionData.append( data )
		}

		foreach ( var rewardBlock in IterateSettingsArray( GetSettingsBlockArray( tierBlock, "rewards" ) ) )
		{
			SharedRankedReward data
			data.previewName        = GetSettingsBlockString( rewardBlock, "previewName" )
			data.previewIcon        = GetSettingsBlockAsset( rewardBlock, "previewIcon" )
			data.previewIconShowBox = GetSettingsBlockBool( rewardBlock, "previewIconShowBox" )
			data.previewImage       = GetSettingsBlockAsset( rewardBlock, "previewImage" )
			data.rewardAsset        = GetSettingsBlockAsset( rewardBlock, "flavor" )

			tier.rewards.append( data )
		}

		tier.index = tierData.len()

		tierData.append( tier )
		Assert ( TIER_ORDERING_BY_LOC_KEY.contains(tier.name) , "Tier Name : " + tier.name + " is not found in TIER_ORDERING_BY_LOC_KEY." )
	}

	divisionData.sort( SharedRanked_CompareDivision )
	for ( int i = 0; i < divisionData.len(); i++ )
	{
		SharedRankedDivisionData data = divisionData[i]
		data.index = i

		Assert ( DIVISION_ORDERING_BY_LOC_KEY.contains(divisionData[i].divisionName) , "Divionsion name: " + divisionData[i].divisionName + " is not found in DIVISION_ORDERING_BY_LOC_KEY.")		                                         
		divisionData[i].divisionEntryCost = GetCurrentPlaylistVarInt ( "ranked_division_entry_cost_" + i , divisionData[i].divisionEntryCost )
	}

	int ladderOnlyTiers = 0

	foreach ( var tierBlock in IterateSettingsAssetArray( ItemFlavor_GetAsset( rp ), "ladderOnlyTier" ) )                                                                                     
	{
		Assert( ladderOnlyTiers == 0 )                                       
		++ladderOnlyTiers

		SharedRankedTierData ladderOnlyTier
		ladderOnlyTier.name                  = GetSettingsBlockString( tierBlock, "name" )
		ladderOnlyTier.entryCost             = GetSettingsBlockInt( tierBlock, "entryCost" )
		ladderOnlyTier.icon                  = GetSettingsBlockAsset( tierBlock, "icon" )
		ladderOnlyTier.bgImage               = GetSettingsBlockAsset( tierBlock, "bgImage" )
		ladderOnlyTier.levelUpRuiAsset       = GetSettingsBlockStringAsAsset( tierBlock, "levelUpRuiAsset" )
		ladderOnlyTier.iconRuiAsset          = GetSettingsBlockStringAsAsset( tierBlock, "iconRuiAsset" )
		ladderOnlyTier.promotionAnnouncement = string( GetSettingsBlockStringAsAsset( tierBlock, "promotionAnnouncement" ) )
		ladderOnlyTier.isLadderOnlyTier      = true
		ladderOnlyTier.index                 = tierData.len()

		int ladderOnlyDivisions = 0

		string rpGUIDString = ItemFlavor_GetGUIDString( rp )

		foreach ( var divBlock in IterateSettingsArray( GetSettingsBlockArray( tierBlock, "divisions" ) ) )
		{
			Assert( ladderOnlyDivisions == 0 )                                        
			++ladderOnlyDivisions

			SharedRankedDivisionData data
			data.divisionName         = GetSettingsBlockString( divBlock, "name" )
			data.emblemText           = GetSettingsBlockString( divBlock, "emblemText" )
			data.scoreMin             = GetSettingsBlockInt( divBlock, "scoreMin" )
			data.divisionEntryCost    = GetSettingsBlockInt( divBlock, "divisionEntryCost" )
			data.emblemDisplayMode    = SharedRanked_GetEmblemDisplayModeFromEmblemText( data.emblemText )
			Assert( data.emblemDisplayMode == emblemDisplayMode.DISPLAY_LADDER_POSITION )
			data.tier                 = ladderOnlyTier
			data.isLadderOnlyDivision = true
			data.index                = divisionData.len()
			ladderOnlyTier.scoreMin   = data.scoreMin


			file.historicalNumPlayersOnLadder[ rpGUIDString ]  <- GetSettingsBlockInt( divBlock, "numPlayersOnLadder" )
			file.historicalLadderOnlyDivision[ rpGUIDString  ] <- data
		}

		Assert( ladderOnlyDivisions == 1 )                                          

		foreach ( var rewardBlock in IterateSettingsArray( GetSettingsBlockArray( tierBlock, "rewards" ) ) )
		{
			SharedRankedReward data
			data.previewName        = GetSettingsBlockString( rewardBlock, "previewName" )
			data.previewIcon        = GetSettingsBlockAsset( rewardBlock, "previewIcon" )
			data.previewIconShowBox = GetSettingsBlockBool( rewardBlock, "previewIconShowBox" )
			data.previewImage       = GetSettingsBlockAsset( rewardBlock, "previewImage" )
			data.rewardAsset        = GetSettingsBlockAsset( rewardBlock, "flavor" )

			ladderOnlyTier.rewards.append( data )
		}
	}

	string rankedPeriodGUID = ItemFlavor_GetGUIDString( rp )
	file.historicalRankedTiers[ rankedPeriodGUID ] <- tierData
	file.historicalRankedDivisions[ rankedPeriodGUID ] <- divisionData

	if ( SharedRankedPeriod_HasSplits( rp ) )
	{
		string stryderFirstSplitLadderName = Ranked_GetStryderLadderNameForHistoricalRankedPeriod( rp, true )
		file.stryderLadderNameToPeriodGUIDStringTable[ stryderFirstSplitLadderName ] <- rankedPeriodGUID
		string stryderSecondSplitLadderName = Ranked_GetStryderLadderNameForHistoricalRankedPeriod( rp, false )
		file.stryderLadderNameToPeriodGUIDStringTable[ stryderSecondSplitLadderName ] <- rankedPeriodGUID
	}
	else
	{
		string stryderLadderName = Ranked_GetStryderLadderNameForHistoricalRankedPeriod( rp, false )
		file.stryderLadderNameToPeriodGUIDStringTable[ stryderLadderName ] <- rankedPeriodGUID
	}
}


int function SharedRanked_GetEmblemDisplayModeFromEmblemText( string emblemText )
{
	switch( emblemText )
	{
		case "#RANKED_DIVISION_I":
		case "#RANKED_DIVISION_II":
		case "#RANKED_DIVISION_III":
		case "#RANKED_DIVISION_IV":
		{
			return emblemDisplayMode.DISPLAY_DIVISION

		}

		case "SHOW_RP":
		{
			return emblemDisplayMode.DISPLAY_RP
		}

		case "LADDER_POSITION":
		{
			return emblemDisplayMode.DISPLAY_LADDER_POSITION
		}

		default:
		{
			return emblemDisplayMode.NONE
		}
	}

	unreachable
}


void function Ranked_AllItemFlavorsRegistered()
{
	string latestRankedPeriodGUID = ItemFlavor_GetGUIDString ( GetLatestRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod ) )
	file.rankedTiers     = file.historicalRankedTiers[ latestRankedPeriodGUID ]
	file.rankedDivisions = file.historicalRankedDivisions[ latestRankedPeriodGUID ]

	if ( latestRankedPeriodGUID in file.historicalLadderOnlyDivision )
	{
		file.ladderOnlyDivision    = file.historicalLadderOnlyDivision[ latestRankedPeriodGUID  ]
		file.topRankedDivisionData = file.historicalLadderOnlyDivision[ latestRankedPeriodGUID  ]
		file.numPlayersOnLadder    = file.historicalNumPlayersOnLadder[ latestRankedPeriodGUID ]
	}
	else
	{
		file.topRankedDivisionData = file.rankedDivisions.top()
	}

	array<ItemFlavor> rankedPeriods = GetAllRankedPeriodFlavorsByType( eItemType.calevent_rankedperiod )
	rankedPeriods.sort( CompareRankedPeriodStartTime )
}


int function Ranked_GetNumPlayersOnLadder()
{
	ItemFlavor latestRankedPeriod = GetLatestRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )
	string playlistOverrideVar    = SharedRanked_GetNumPlayerOnLaddersOverridePlaylistVar( latestRankedPeriod )
	return GetCurrentPlaylistVarInt( playlistOverrideVar, file.numPlayersOnLadder )
}


string function SharedRanked_GetNumPlayerOnLaddersOverridePlaylistVar( ItemFlavor rankedPeriod )
{
	return ItemFlavor_GetHumanReadableRef( rankedPeriod ) + "_num_players_on_ladder"
}


SharedRankedTierData function Ranked_GetHighestHistoricalTierAcrossSplitsForPlayer( entity player, ItemFlavor rankedPeriod, bool highScore )
{
	Assert( SharedRankedPeriod_HasSplits( rankedPeriod ) )
	Assert( GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod ) != rankedPeriod )

	string rankedPeriodGUID = ItemFlavor_GetGUIDString( rankedPeriod )

	int firstSplitRankedScore                 = Ranked_GetHistoricalFirstSplitRankScore( player, rankedPeriodGUID, highScore )
	int firstSplitLadderPosition              = Ranked_GetHistoricalLadderPosition( player, rankedPeriodGUID, true )
	SharedRankedTierData firstSplitRankedTier = Ranked_GetHistoricalRankedDivisionFromScoreAndLadderPosition( firstSplitRankedScore, firstSplitLadderPosition, rankedPeriodGUID ).tier

	int secondSplitRankedScore                 = Ranked_GetHistoricalRankScore ( player, rankedPeriodGUID, highScore )
	int secondSplitLadderPosition              = Ranked_GetHistoricalLadderPosition( player, rankedPeriodGUID, false )
	SharedRankedTierData secondSplitRankedTier = Ranked_GetHistoricalRankedDivisionFromScoreAndLadderPosition( secondSplitRankedScore, secondSplitLadderPosition, rankedPeriodGUID ).tier

	SharedRankedTierData highestTierAchieved = Ranked_GetHigherOfTwoTiers( firstSplitRankedTier, secondSplitRankedTier )

	return highestTierAchieved
}


int function Ranked_GetHistoricalRankScoreAcrossSplitsForPlayer ( entity player, ItemFlavor rankedPeriod )
{
	Assert( SharedRankedPeriod_HasSplits( rankedPeriod ) )
	Assert( GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod ) != rankedPeriod )

	string rankedPeriodGUID = ItemFlavor_GetGUIDString( rankedPeriod )

	int firstSplitRankedScore    = Ranked_GetHistoricalFirstSplitRankScore( player, rankedPeriodGUID, true )
	int secondSplitRankedScore   = Ranked_GetHistoricalRankScore ( player, rankedPeriodGUID, true )

	return maxint ( firstSplitRankedScore , secondSplitRankedScore )
}


bool function Ranked_NeedToCheckWithStryderForEndRankedSplitOrPeriod( entity player, string rankedPeriodGUID )
{
	if ( !GetCurrentPlaylistVarBool( "ranked_end_series_stryder_check", true ) )
		return false

	int numberOfRankedGames = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.rankedperiod_games_played, rankedPeriodGUID ) )
	if ( numberOfRankedGames == 0 )
		return false

	return true
}


SharedRankedTierData function Ranked_GetHigherOfTwoTiers( SharedRankedTierData firstTier, SharedRankedTierData secondTier )
                                                                                                                              
{
	SharedRankedTierData highestTierAchieved = firstTier.index > secondTier.index ? firstTier : secondTier
	return highestTierAchieved
}


string function Ranked_GetStryderLadderNameForLatestRankedPeriod()
                                                                                                                                                                                    
{
	ItemFlavor latestPeriod = GetLatestRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )
	                                                                                   
	string baseLadderName

	string periodGUIDString = ItemFlavor_GetGUIDString( latestPeriod )

	switch( periodGUIDString )
	{
		case RANKED_SEASON_02_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod01"
			break

		case RANKED_SEASON_03_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod02"
			break

		case RANKED_SEASON_04_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod03"
			break

		case RANKED_SEASON_05_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod04"
			break

		default:
			baseLadderName = ItemFlavor_GetHumanReadableRef( latestPeriod )
			break
	}

	if ( !SharedRankedPeriod_HasSplits( latestPeriod ) )
		return baseLadderName

	if ( SharedRankedPeriod_IsFirstSplitActive( latestPeriod ) )
		return baseLadderName + SHARED_RANKED_SPLIT_1_STRYDER_SUFFIX
	else                                                                                                                                                                                                                                                                              
		return baseLadderName + SHARED_RANKED_SPLIT_2_STRYDER_SUFFIX

	unreachable
}


string function Ranked_GetStryderLadderNameForHistoricalRankedPeriod( ItemFlavor rankedPeriod, bool isFirstSplit )
{
	Assert( IsAnyRankedPeriodFlavor( rankedPeriod ) )

	                                                                                   
	string baseLadderName

	string periodGUIDString = ItemFlavor_GetGUIDString( rankedPeriod )

	switch( periodGUIDString )
	{
		case RANKED_SEASON_02_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod01"
			break

		case RANKED_SEASON_03_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod02"
			break

		case RANKED_SEASON_04_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod03"
			break

		case RANKED_SEASON_05_GUIDSTRING:
			baseLadderName = "calevent_rankedperiod04"
			break

		default:
			baseLadderName = ItemFlavor_GetHumanReadableRef( rankedPeriod )
			break
	}

	if ( !SharedRankedPeriod_HasSplits( rankedPeriod ) )
		return baseLadderName

	if ( isFirstSplit )
		return baseLadderName + SHARED_RANKED_SPLIT_1_STRYDER_SUFFIX
	else
		return baseLadderName + SHARED_RANKED_SPLIT_2_STRYDER_SUFFIX

	unreachable

}


string function Ranked_GetSeasonGUIDStringFromStryderLadderName( string stryderLadderName )
{
	return file.stryderLadderNameToPeriodGUIDStringTable[ stryderLadderName ]
}


bool function Ranked_PeriodHasLadderOnlyDivision( string rankedPeriodGUIDString )
{
	return rankedPeriodGUIDString in file.historicalLadderOnlyDivision
}


SharedRankedDivisionData function Ranked_GetHistoricalLadderOnlyDivision( string rankedPeriodGUIDString )
{
	Assert( rankedPeriodGUIDString in file.historicalLadderOnlyDivision )
	return file.historicalLadderOnlyDivision[ rankedPeriodGUIDString  ]
}


int function Ranked_GetHistoricalNumPlayersOnLadder( string rankedPeriodGUIDString )
{
	Assert( rankedPeriodGUIDString in file.historicalNumPlayersOnLadder )
	ItemFlavor historicalRankedPeriod = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( rankedPeriodGUIDString ) )
	string playlistOverrideVar        = SharedRanked_GetNumPlayerOnLaddersOverridePlaylistVar( historicalRankedPeriod )
	return  GetCurrentPlaylistVarInt( playlistOverrideVar, file.historicalNumPlayersOnLadder[ rankedPeriodGUIDString ] )
}


#if CLIENT
void function ShRanked_RegisterNetworkFunctions()
{
	if ( !IsRankedGame() )
		return

	RegisterNetworkedVariableChangeCallback_int( "nv_currentRankedScore", OnRankedScoreChanged )
	RegisterNetworkedVariableChangeCallback_int( "nv_currentRankedLadderPosition", OnRankedLadderPositionChanged )
}

void function ServerToClient_Ranked_UpdatePlayerPrevRankedScore ( entity player, int score )
{
	if ( IsLobby() )
		return

	if ( score == SHARED_RANKED_INVALID_RANK_SCORE )
		return

	EHI playerEHI = ToEHI( player )
	Ranked_UpdateEHIRankScorePrevSeason( playerEHI, score )
}

void function ServerToClient_Ranked_UpdatePlayerPrevLadderPos ( entity player, int pos )
{
	if ( IsLobby() )
		return

	if ( pos == SHARED_RANKED_INVALID_LADDER_POSITION )
		return

	EHI playerEHI = ToEHI( player )
	Ranked_UpdateEHIRankedLadderPositionPrevSeason( playerEHI, pos )
}

#endif


int function SharedRanked_CompareDivision( SharedRankedDivisionData a, SharedRankedDivisionData b )
{
	if ( a == b )
		return 0

	                       
	if ( a.scoreMin != b.scoreMin )
		return a.scoreMin - b.scoreMin

	Assert( false, "Cannot have ranks with the same scoreMin " + a.divisionName + " " + b.divisionName )

	unreachable
}


SharedRankedDivisionData function GetCurrentRankedDivisionFromScoreAndLadderPosition( int score, int ladderPosition )
{
	int numPlayersOnLadder = Ranked_GetNumPlayersOnLadder()
	if ( (ladderPosition != SHARED_RANKED_INVALID_LADDER_POSITION) && (numPlayersOnLadder > 0) && (ladderPosition <= numPlayersOnLadder) )
	{
		SharedRankedDivisionData ladderDivisionData = expect SharedRankedDivisionData ( file.ladderOnlyDivision )

		if ( ladderDivisionData.scoreMin > score )                                                                                                                                                                                                                                             
			return GetCurrentRankedDivisionFromScore( score )
		else
			return (ladderDivisionData)
	}

	return GetCurrentRankedDivisionFromScore( score )
}

array<SharedRankedDivisionData> function GetCurrentRankedDivisions ()
{
	return file.rankedDivisions
}

SharedRankedDivisionData function GetCurrentRankedDivisionFromScore( int score )
{
	if ( score <= 0 )
	{
		Assert( file.rankedDivisions.len() > 0 )
		Assert( file.rankedDivisions[ 0 ].scoreMin == 0 )
		return file.rankedDivisions[ 0 ]
	}

	bool foundRank = false
	SharedRankedDivisionData data

	for ( int i = 0; i < file.rankedDivisions.len(); i++ )
	{
		if ( file.rankedDivisions[i].scoreMin > score )
			break

		foundRank = true

		data = file.rankedDivisions[ i ]
	}

	Assert( foundRank )
	return data
}


SharedRankedDivisionData ornull function GetNextRankedDivisionFromScore( int score )
{
	bool foundRank = false
	SharedRankedDivisionData data

	int i = 0
	for ( ; i < file.rankedDivisions.len(); i++ )
	{
		if ( file.rankedDivisions[i].scoreMin > score )
			break

		foundRank = true

		data = file.rankedDivisions[ i ]
	}

	if ( i >= file.rankedDivisions.len() )
	{
		return null
	}

	data = file.rankedDivisions[ i ]

	if ( data.isLadderOnlyDivision )
		return null

	Assert( foundRank )


	return data
}

  
                                                                                                                                
 
	                      
	                       

	                                      
	                    
	 
		                                               
			     

		                

		                                
	 

	             
	 
		           
	 

	                                

	                   
	           
 
  


int function Ranked_GetCostForEntry( SharedRankedDivisionData currentRank , int rankScore = 0)
{
	if ( GetCurrentPlaylistVarBool( "ranked_scaling_entry_cost_enabled", true ))
	{
		if (currentRank.tier.index < MASTER_PLUS_TIER_INDEX )
		{
			if  (currentRank.divisionEntryCost  > 0)
			{
				return currentRank.divisionEntryCost
			}

			return maxint( currentRank.tier.entryCost, currentRank.divisionEntryCost )
		}
		else
		{
			int masterEntryCost = currentRank.tier.entryCost
			int minScoreForMaster = currentRank.tier.scoreMin

			if (rankScore > minScoreForMaster)
			{
				int interval = Ranked_GetEntryCostInterval()

				if (interval > 0 )
				{
					int multipler = abs(rankScore - minScoreForMaster) / interval
					return minint( masterEntryCost + multipler * Ranked_GetEntryCostScalar() , Ranked_GetEntryCostMax() )
				}
			}
		}
	}

	          
	return (currentRank.tier.entryCost)
}


int function Ranked_GetEntryCostScalar ()
{
	return GetCurrentPlaylistVarInt( "ranked_entrycost_scalar",  MASTER_PLUS_SCALING_RP )
}


int function Ranked_GetEntryCostInterval ()
{
	return GetCurrentPlaylistVarInt( "ranked_entrycost_interval",  MASTER_PLUS_SCALING_RP_INTERVAL )
}


int function Ranked_GetEntryCostMax ()
{
	return GetCurrentPlaylistVarInt( "ranked_entrycost_max",  MASTER_PLUS_SCALING_RP_MAX )
}


int function Ranked_GetPointsPerKillForPlacement( int placement )
{
	int lookupPlacement    = minint( file.placementScoringData.len() - 1, placement )
	int csvValue           = file.placementScoringData[ lookupPlacement ].placementKillBonus
	string playlistVarName = "rankedPointsPerKillForPlacement_" + lookupPlacement
	return GetCurrentPlaylistVarInt( playlistVarName, csvValue )
}


float function Ranked_GetPlacementMultipler ( int placement )
{
	int lookupPlacement    = minint( file.placementScoringData.len() - 1, placement )
	float csvValue           = file.placementScoringData[ lookupPlacement ].multiplier
	string playlistVarName = "ranked_placementMultipler_" + lookupPlacement
	return GetCurrentPlaylistVarFloat( playlistVarName, csvValue )
}

int function Ranked_GetPlacementKillScore ( int placement )
{
	int lookupPlacement    = minint( file.placementScoringData.len() - 1, placement )
	int csvValue           = file.placementScoringData[ lookupPlacement ].killByPlacement
	string playlistVarName = "ranked_placementKill_" + lookupPlacement
	return GetCurrentPlaylistVarInt( playlistVarName, csvValue )
}

int function Ranked_GetPointsForKillsBySkill (int victimTier, int killerTier)
{
	int tierDiff = GetTierDifference(victimTier, killerTier)
	return GetKillPointsWithTierDiff(tierDiff)
}

int function Ranked_GetPointsForKillsPlacement ( int placement )
{
	int lookupPlacement    = minint( file.placementScoringData.len() - 1, placement )
	int killByPlacement           = file.placementScoringData[ lookupPlacement ].killByPlacement
	return  killByPlacement
}

float function Ranked_GetPointsForKillsBySkillAndPlacement (int placement, int victimTier, int killerTier)
{
	float killByPlacement           = float ( Ranked_GetPointsForKillsPlacement ( placement ) )
	int tierDiff = GetTierDifference(victimTier, killerTier)
	float killValuePercentage =  float (GetKillPointsWithTierDiff(tierDiff)) /10.0
	return  (killValuePercentage == 0 ) ? 0.0 : max ( 1.0, killByPlacement  * killValuePercentage )
}


int function GetTierDifference ( int victimTierIndex, int killerTierIndex )
{
	return victimTierIndex - killerTierIndex
}


int function GetTierDifferenceByEntity ( entity victim, entity killer)
{
	                                                                                                                
	SharedRankedTierData victimTierData = GetCurrentRankedDivisionFromScore( GetPlayerRankScore_ServerCached (victim) ).tier
	SharedRankedTierData killerTierData = GetCurrentRankedDivisionFromScore( GetPlayerRankScore_ServerCached (killer) ).tier
	int tierDiff = GetTierDifference(victimTierData.index, killerTierData.index)
	return GetKillPointsWithTierDiff(tierDiff)
}


int function GetKillPointsWithTierDiff (int tierDiff )
{
	tierDiff = minint (tierDiff, 3)

	if ( GetCurrentPlaylistVarBool( "ranked_kill_invalidation", true ))
	{
		tierDiff = maxint ( tierDiff, -4 )
	}
	else
	{
		tierDiff = maxint (tierDiff, -3)
	}

	switch (tierDiff)
	{
		case -4:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_minus_4", RANKED_RP_TIER_MINUS_4)
			break
		case -3:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_minus_3", RANKED_RP_TIER_MINUS_3)
			break
		case -2:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_minus_2", RANKED_RP_TIER_MINUS_2)
			break
		case -1:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_minus_1", RANKED_RP_TIER_MINUS_1)
			break
		case 0:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_equal"  , RANKED_RP_TIER_EQUAL)
			break
		case 1:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_plus_1" , RANKED_RP_TIER_PLUS_1)
			break
		case 2:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_plus_2" , RANKED_RP_TIER_PLUS_2)
			break
		case 3:
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_plus_3" , RANKED_RP_TIER_PLUS_3)
			break
		default:
			          
			return GetCurrentPlaylistVarInt ( "ranked_survival_kill_rp_tier_equal"  , RANKED_RP_TIER_EQUAL)
			break
	}
	unreachable
}


bool function Ranked_IsKillValid ( int points )
{
	return points >  0
}


float function Ranked_GetPointsForKills( int placement, array<int> killsByTiers, int currentRankTier)
{
	float totalPoints = 0.0
	totalPoints += Ranked_GetPointsForKillsBase ( placement,  killsByTiers, currentRankTier )
	                                                                                            
	return totalPoints
}


float function Ranked_GetPointsForKillsBonus( int placement, array<int> killsByTiers, int currentRankTier)
{
	float totalPoints = 0.0

	                                
	                                              
	   
	  	                                   
	  	                                                                                         
	  
	  	                                                                    
	  	 
	  		                          
	  		                                                                         
	  		                                           
	  		 
	  			                                                                                         
	  		 
	  	 
	   
	return totalPoints
}


                                                                                            
float function Ranked_GetPointsForKillsBase( int placement, array<int> killsByTiers, int currentRankTier)
{
	float totalPoints = 0
	for (int i = 0; i < killsByTiers.len(); i++)
	{
		int numberOfKills = killsByTiers[i]
		                                                                                        
		float pointsPerKill = Ranked_GetPointsForKillsBySkillAndPlacement ( placement, i, currentRankTier )
		totalPoints += numberOfKills * pointsPerKill
	}
	return totalPoints
}


float function Ranked_GetPointsForAssists( int placement, array<int> AssistsByTiers, int currentRankTier )
{
	float totalPoints = 0.0
	totalPoints += Ranked_GetPointsForAssistsBase ( placement, AssistsByTiers, currentRankTier )
	                                                                                               
	return 	totalPoints
}


float function Ranked_GetPointsForAssistsBonus ( int placement, array<int> assistsByTiers, int currentRankTier )
{

	float totalPoints = 0.0

	                        
	                                                
	   
	  	                                     
	  	                                                                                      
	  
	  	                          
	  	                                                                         
	  
	  	                                                                   
	  	 
	  		                                           
	  		 
	  			                                                                                         
	  		 
	  	 
	   
	return 	totalPoints
}


float function Ranked_GetPointsForAssistsBase( int placement, array<int> assistsByTiers, int currentRankTier )
{
	float totalPoints = 0
	for (int i = 0; i < assistsByTiers.len(); i++)
	{
		int numberOfKills = assistsByTiers[i]
		float pointsPerKill = Ranked_GetPointsForKillsBySkillAndPlacement ( placement, i, currentRankTier )
		totalPoints += numberOfKills * pointsPerKill
	}
	return 	totalPoints
}


float function Ranked_GetPointsForParticipation( int placement, array<int> participationByTiers, int currentRankTier )
{
	float totalPoints = 0.0
	totalPoints += Ranked_GetPointsForParticipationBase ( placement, participationByTiers, currentRankTier )
	                                                                                                           
	return 	totalPoints
}


float function Ranked_GetPointsForParticipationBonus ( int placement, array<int> participationByTier, int currentRankTier )
{
	float totalPoints = 0.0

	                        
	                                                     
	   
	  	                                          
	  	                                                                                      
	  
	  	                          
	  	                                                                         
	  	                                                                   
	  	 
	  		                                           
	  		 
	  			                                                                                         
	  		 
	  	 
	   
	return 	totalPoints * Ranked_GetParticipationMutlipler()
}


float function Ranked_GetPointsForParticipationBase( int placement, array<int> participationByTiers, int currentRankTier )
{
	float totalPoints = 0
	for (int i = 0; i < participationByTiers.len(); i++)
	{
		int numberOfKills = participationByTiers[i]
		float pointsPerKill =  Ranked_GetPointsForKillsBySkillAndPlacement ( placement, i, currentRankTier )  * Ranked_GetParticipationMutlipler()

		if (pointsPerKill > 0.0)
			pointsPerKill = max ( 1.0, pointsPerKill )

		totalPoints += numberOfKills * pointsPerKill
	}
	return 	totalPoints
}


float function Ranked_GetParticipationMutlipler ( )
{
	return GetCurrentPlaylistVarFloat( "ranked_participation_mod", PARTICIPATION_MODIFIER )
}


int function Ranked_GetKillsAndAssistsPointCap( int placement )
{
	return GetCurrentPlaylistVarInt ( "ranked_kp_cap" , RANKED_MAX_KILL_SCORE_BY_SKILL )
}


int function Ranked_GetPointsForPlacement( int placement )
{
	int lookupPlacement    = minint( file.placementScoringData.len() - 1, placement )
	int csvValue           = file.placementScoringData[ lookupPlacement ].placementPoints
	string playlistVarName = "rankedPointsForPlacement_" + lookupPlacement

	return GetCurrentPlaylistVarInt( playlistVarName, csvValue )
}


int function Ranked_GetPenaltyPointsForAbandon( SharedRankedDivisionData currentRank , int rankedPoint = 0)
{
	SharedRankedTierData tierData = currentRank.tier
	int tierIndex                 = tierData.index
	string playlistVarString      = "ranked_abandon_cost_" + tierIndex
	return GetCurrentPlaylistVarInt( playlistVarString, Ranked_GetCostForEntry( currentRank , rankedPoint ) )
}


int function Ranked_GetHistoricalRankScore( entity player, string rankedSeasonGUID, bool highScore = false )
{
	                                                                                 
	                                                      

#if UI
	if ( !IsFullyConnected() )
		return 0
#endif

#if CLIENT
	if ( !IsConnected() )
		return 0
#endif

	#if CLIENT
		Assert ( player == GetLocalClientPlayer() )
	#endif

	#if UI
		Assert ( player == GetLocalClientPlayer() )
	#endif

	var score

	if ( highScore )
	{
		score = Ranked_GetHistoricalRankedPersistenceData( player, "highestRankedScore", rankedSeasonGUID )
	}
	else
	{
		score = Ranked_GetHistoricalRankedPersistenceData( player, "currentRankedScore", rankedSeasonGUID )
	}

	if ( score == null )
		return 0

	return expect int( score )
}


int function Ranked_GetHistoricalFirstSplitRankScore( entity player, string rankedSeasonGUID, bool highScore = false )
                                         
{
#if UI
	if ( !IsFullyConnected() )
		return 0
#endif

#if CLIENT
	if ( !IsConnected() )
		return 0
#endif

	#if CLIENT
		Assert ( player == GetLocalClientPlayer() )
	#endif

	#if UI
		Assert ( player == GetLocalClientPlayer() )
	#endif

	var score

	if ( highScore )
	{
		score = Ranked_GetHistoricalRankedPersistenceData( player, "firstSplitHighScore", rankedSeasonGUID )
	}
	else
	{
		score = Ranked_GetHistoricalRankedPersistenceData( player, "firstSplitRankedScore", rankedSeasonGUID )
	}

	if ( score == null )
		return 0

	return expect int( score )
}


SharedRankedDivisionData function Ranked_GetHistoricalRankedDivisionFromScore( int rankScore, string rankedSeasonGUID )
{
	Assert( rankedSeasonGUID in file.historicalRankedDivisions )

	array< SharedRankedDivisionData > historicalRankedDivisionData = file.historicalRankedDivisions[ rankedSeasonGUID  ]

	if ( rankScore <= 0 )
	{
		Assert( historicalRankedDivisionData.len() > 0 )
		Assert( historicalRankedDivisionData[ 0 ].scoreMin == 0 )
		return historicalRankedDivisionData[ 0 ]
	}

	bool foundRank = false
	SharedRankedDivisionData data

	for ( int i = 0; i < historicalRankedDivisionData.len(); i++ )
	{
		if ( historicalRankedDivisionData[i].scoreMin > rankScore )
			break

		foundRank = true

		data = historicalRankedDivisionData[ i ]
	}

	Assert( foundRank )
	return data
}


SharedRankedTierData function Ranked_GetHighestHistoricalRankedTierData( entity player )
{
	SharedRankedTierData highestTier
	int highestRankScore = 0
	int highestLadderPos = 0

	array< ItemFlavor > rankedPeriods = GetAllRankedPeriodFlavorsByType( eItemType.calevent_rankedperiod )

	Assert ( rankedPeriods.len() > 0, "No Rank Period Flavor is found"  )

	for  ( int i = 0 ; i < rankedPeriods.len(); i++)
	{
		ItemFlavor period = rankedPeriods[i]
		string periodGUID       				= ItemFlavor_GetGUIDString( period )
		int endRankScore        				= Ranked_GetHistoricalRankScore( player, periodGUID )
		int firstSplitRankScore				 	= Ranked_GetHistoricalFirstSplitRankScore( player, periodGUID )
		int bestRankScore       				= firstSplitRankScore > endRankScore ? firstSplitRankScore : endRankScore
		SharedRankedTierData thisTier			= Ranked_GetHistoricalRankedDivisionFromScore (bestRankScore, periodGUID).tier

		if ( i == 0 )                 
		{
			highestTier = thisTier
		}

		if ( DIVISION_ORDERING_BY_LOC_KEY.find( highestTier.name ) < DIVISION_ORDERING_BY_LOC_KEY.find( thisTier.name ) )
		{
			highestTier = thisTier
		}

	}
	return highestTier
}


int function Ranked_GetTierOfThresholdForRankedPartyDifferences()
{
	array<SharedRankedTierData> tiers = Ranked_GetTiers()
	foreach ( rankTier in tiers )
	{
		if ( rankTier.name == "#RANKED_TIER_PLATINUM" )
			return rankTier.index
	}

	return tiers.len() + 1                                                                       
}


SharedRankedDivisionData function Ranked_GetHistoricalRankedDivisionFromScoreAndLadderPosition( int rankScore, int ladderPosition, string rankedSeasonGUID )
{
	if ( Ranked_PeriodHasLadderOnlyDivision( rankedSeasonGUID ) )
	{
		int historicalNumPlayersOnLadder = Ranked_GetHistoricalNumPlayersOnLadder( rankedSeasonGUID )
		if ( ladderPosition != SHARED_RANKED_INVALID_LADDER_POSITION && ladderPosition > 0 && ladderPosition <= historicalNumPlayersOnLadder )                                                                      
			return Ranked_GetHistoricalLadderOnlyDivision( rankedSeasonGUID )
	}

	return Ranked_GetHistoricalRankedDivisionFromScore( rankScore, rankedSeasonGUID )

	unreachable
}


int function Ranked_GetHistoricalLadderPosition( entity player, string rankedSeasonGUID, bool forFirstSplit = false )
{
	Assert( rankedSeasonGUID in file.historicalRankedDivisions )
	ItemFlavor historicalRankedPeriod = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( rankedSeasonGUID ) )

	if ( !SharedRankedPeriod_HasSplits( historicalRankedPeriod ) || !forFirstSplit )
		return expect int ( Ranked_GetHistoricalRankedPersistenceData( player, "endSeriesLadderPosition", rankedSeasonGUID ) )

	if ( SharedRankedPeriod_HasSplits( historicalRankedPeriod ) && forFirstSplit )
		return expect int ( Ranked_GetHistoricalRankedPersistenceData( player, "endFirstSplitLadderPosition", rankedSeasonGUID ) )

	unreachable
}


var function Ranked_GetHistoricalRankedPersistenceData( entity player, string persistenceField, string rankedSeasonGUID )
{
	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return null
	#endif

	Assert( rankedSeasonGUID in file.historicalRankedTiers )
	#if UI
		return GetPersistentVar( "allRankedData[" + rankedSeasonGUID + "]." + persistenceField )
	#else
		return player.GetPersistentVar( "allRankedData[" + rankedSeasonGUID + "]." + persistenceField )
	#endif

}


SharedRankedDivisionData function Ranked_GetNewDivisionForNewSeasonReset( entity player, ItemFlavor newRankedPeriod )
{
	string newRankedPeriodRef       = ItemFlavor_GetGUIDString( newRankedPeriod )
	ItemFlavor previousRankedPeriod = expect ItemFlavor ( GetPrecedingRankedPeriod( newRankedPeriod ) )
	string previousRankedPeriodRef  = ItemFlavor_GetGUIDString( previousRankedPeriod )

	int resetDivisionCount

	switch ( newRankedPeriodRef )
	{
		                                   
		  	                                                                           
		  	     

		case RANKED_SEASON_13_GUIDSTRING:
			resetDivisionCount = 2                                                                                                                                                
			break

		default:
			resetDivisionCount = RANKED_RESET_DIVISION_COUNT
			break
	}

	                                                                                                                                                             
	int previousRankedScore             = Ranked_GetHistoricalRankScore( player, previousRankedPeriodRef )
	SharedRankedDivisionData divData    = Ranked_GetHistoricalRankedDivisionFromScore( previousRankedScore, previousRankedPeriodRef )                                                                                       

	int resetDivisionIndex = maxint( 0,  divData.index - resetDivisionCount )

	                                                             
	if ( divData.index >= RANKED_RESET_DIVISION_FLOOR )
	{
		resetDivisionIndex = maxint( RANKED_RESET_DIVISION_FLOOR, resetDivisionIndex )
	}
	SharedRankedDivisionData newDivData = file.historicalRankedDivisions[ newRankedPeriodRef ][ resetDivisionIndex ]

	return newDivData
}


SharedRankedDivisionData function Ranked_GetNewDivisionForSeasonSplitReset( entity player, ItemFlavor rankedPeriod )
{
	string rankedPeriodRef = ItemFlavor_GetGUIDString( rankedPeriod )

	int resetDivisionCount
	switch ( rankedPeriodRef )
	{
		                                   
		case RANKED_SEASON_13_GUIDSTRING:
			resetDivisionCount = 4                                                                                 
			break

		default:
			resetDivisionCount = RANKED_RESET_DIVISION_COUNT
			break
	}

	                                                                                                                                                             
	int previousRankedScore             = Ranked_GetHistoricalRankScore( player, rankedPeriodRef )
	SharedRankedDivisionData divData    = Ranked_GetHistoricalRankedDivisionFromScore( previousRankedScore, rankedPeriodRef )                                                                                       

	int resetDivisionIndex = maxint( 0,  divData.index - resetDivisionCount )

	                                                             
	if ( divData.index >= RANKED_RESET_DIVISION_FLOOR )
	{
		resetDivisionIndex = maxint( RANKED_RESET_DIVISION_FLOOR, resetDivisionIndex )
	}

	SharedRankedDivisionData newDivData = file.historicalRankedDivisions[ rankedPeriodRef ][ resetDivisionIndex ]

	return newDivData
}


int function GetPlayerRankScore_ServerCached ( entity player )
{
#if SERVER
	                                    
	 
		                                    
	 
	    
	 
		                                         
		                                    
		            
	 
#else
	                                             
	           
	Assert(false)
	return GetPlayerRankScore ( player )
#endif
	unreachable
}


                                                                                               
int function GetPlayerRankScore( entity player )
{
#if UI
	if ( !IsFullyConnected() )
		return 0
#endif

#if CLIENT
	if ( !IsConnected() )
		return 0
#endif

	#if SERVER
		                                                                    
		                    
			        

		                          
	#endif

	#if CLIENT
		Assert( !IsLobby() )
		EHI playerEHI = ToEHI( player )
		return GetEHIScriptStruct( playerEHI ).rankScore
	#endif

	#if UI
		if ( !IsLobby() )
		{
			EHI playerEHI = ToEHI( player )
			return GetEHIScriptStruct( playerEHI ).rankScore
		}
		else
		{
			Assert( player == GetLocalClientPlayer() )
			var score = GetRankedPersistenceData( player, "currentRankedScore" )
			if ( score == null )
				return 0

			return expect int( score )
		}
	#endif

	unreachable
}

                                                                                               
int function GetPrevSeasonPeakPlayerRankScore( entity player )
{
#if UI
	if ( !IsFullyConnected() )
		return 0
#endif

#if CLIENT
	if ( !IsConnected() )
		return 0
#endif

	#if SERVER
		              
		                                                                                                                                       
		                                                                                                      


		                                                           
		 
			                                                                                           
		 
		    
		 
			                                                                                  
			                                                                               
		 


		                  
			        

		            
	#endif

	#if CLIENT
		Assert( !IsLobby() )
		EHI playerEHI = ToEHI( player )
		return GetEHIScriptStruct( playerEHI ).rankScorePrevSeason
	#endif

	#if UI
		if ( !IsLobby() )
		{
			EHI playerEHI = ToEHI( player )
			return GetEHIScriptStruct( playerEHI ).rankScorePrevSeason
		}
		else
		{
			Assert( player == GetLocalClientPlayer() )
			int score = -1
			ItemFlavor latestRankedPeriod = expect ItemFlavor ( GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod ))
			ItemFlavor previousRankedPeriod = expect ItemFlavor ( GetPrecedingRankedPeriod( latestRankedPeriod ) )

			if ( SharedRankedPeriod_HasSplits( previousRankedPeriod ) )
			{
				score = Ranked_GetHistoricalRankScoreAcrossSplitsForPlayer ( player, previousRankedPeriod )
			}
			else
			{
				string previousRankedPeriodRef  = ItemFlavor_GetGUIDString( previousRankedPeriod )
				score = Ranked_GetHistoricalRankScore ( player, previousRankedPeriodRef, true )
			}

			if ( score == -1 )
				return 0

			return score
		}
	#endif

	unreachable
}



#if SERVER || CLIENT
bool function IsRankedGame()
{
	return GetMatchRankedMode() == MATCHRANKEDMODE_RANKED && !IsLobby()                                 
}
#endif


#if SERVER || CLIENT
bool function Ranked_IsPlayerAbandoning( entity player )
                                         
{
	if ( !IsRankedGame() )
		return false

	if ( !GetCurrentPlaylistVarBool( "ranked_match_abandon_penalty", true ) )
		return false

	if ( expect bool ( player.GetPersistentVar( "lastGameRankedForgiveness" ) ) )
		return false

	                                                                                                               
	                                                                                                              
	                                                                                  

	if ( Ranked_IsMatchOverForPlayer( player ) )
		return false

	if ( Ranked_HasPlayerWaitedTooLongAfterBannerWasPickedUp( player ) )
		return false

	if ( GetGameState() >= eGameState.Prematch && !SharedRanked_DidPlayerEverHaveAFullTeam( player ) )                                                                                                    
		return false

	return true
}
#endif


#if SERVER || CLIENT
bool function SharedRanked_DidPlayerEverHaveAFullTeam( entity player )
                                                                                                                                                              
{
	return player.GetPlayerNetBool( "rankedDidPlayerEverHaveAFullTeam" )
}
#endif

#if SERVER || CLIENT

int function SharedRanked_GetAbandonPenaltyLength( entity player )
{
	if( !IsValid( player ) )
		return 0

	int numGamesAbandoned = expect int ( player.GetPersistentVar( "numPenalizedAbandons" ) )
	if ( numGamesAbandoned == 0 )
		return 0

	int banLengthInSeconds = 0

	if ( GetCurrentPlaylistVarBool( "ranked_abandon_stacking_penalties", false ) )
	{
		switch( numGamesAbandoned )
		{
			case 1:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_1", 60 * 5 )            
				break

			case 2:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_2", 60 * 10 )             
				break

			case 3:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_3", 60 * 20 )              
				break

			case 4:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_4", 60 * 45 )             
				break

			case 5:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_5", 60 * 90 )             
				break

			case 6:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_6", 60 * 180 )                            
				break

			case 7:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_7", 60 * 360 )                            
				break

			case 8:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_8", 60 * 720 )                             
				break

			case 9:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_9", 60 * 1440 )        
				break

			case 10:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_10", 60 * 1440 * 3 )         
				break

			case 11:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_11", 60 * 1440 * 5 )          
				break

			case 12:
			default:
				banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_12", 60 * 1440 * 7 )                      
				break
		}
	}
	else
	{
		banLengthInSeconds = GetCurrentPlaylistVarInt( "ranked_abandon_penalty_1", 60 * 10 )             
	}

	return banLengthInSeconds
}
#endif


#if SERVER || CLIENT
bool function Ranked_IsMatchOverForPlayer( entity player )
                                                                                                                                
{
	if ( GetGameState() >= eGameState.WinnerDetermined )
		return true


	                                                                                                                                                                                                                                 
	if ( GetGameState() >= eGameState.Playing && GetPlayerArrayOfTeam_Alive( player.GetTeam() ).len() == 0 )                                                                                                                          
		return true

	if ( PlayerMatchState_GetFor( player ) >= ePlayerMatchState.NORMAL )
	{
		switch ( player.GetPlayerNetInt( "respawnStatus" ) )
		{
			case eRespawnStatus.PICKUP_DESTROYED:
			case eRespawnStatus.SQUAD_ELIMINATED:                                  
			return true

			default:
				break

		}
	}

	return false
}
#endif


#if SERVER || CLIENT
bool function Ranked_HasPlayerWaitedTooLongAfterBannerWasPickedUp( entity player )
{
	if ( IsAlive( player ) )
		return false

	if ( PlayerMatchState_GetFor( player ) < ePlayerMatchState.NORMAL )
		return false

	if ( player.GetPlayerNetInt( "respawnStatus" ) !=  eRespawnStatus.WAITING_FOR_DELIVERY )
		return false

	Assert( player.GetPlayerNetTime( "respawnBannerPickedUpTime" ) > -1 )
	float timeSinceBeaconPickedUp = Time() - player.GetPlayerNetTime( "respawnBannerPickedUpTime" )

	return (timeSinceBeaconPickedUp > GetCurrentPlaylistVarFloat( "ranked_respawn_banner_pickedup_timeout", 150.0 ))
}
#endif


#if SERVER
                                                                     
 
	                                                                        
		      

	                                                                
		      

                        
		                                               
			      
      
                        
         
       

	                                                                                             

	                                         
	                                                                        
	                                                       
 
#endif


#if SERVER
                                                                                                                              
 
	                                 
		      

	                                                         
	                                           
	 
		                                                                
		                                                                                     
		 
			                                                                                                                                  
			                                                                             
		 
	 
 
#endif


#if SERVER
                                                                                                 
 
	                                
	                                                                        
                        
		                           
			                                                                          
       

	                                                                  
	 
		                         
			        

		                                  

		                                                   
		                                                                                          
		                                                                                                         
                         
			                           
			 
				                                                                  
				                                                                                               
			 
        

		                                         
		 
			                                   
				        

			                                                                                      
			                                                                                                     
                          
				                           
				 
					                                                                
					                                                                                             
				 
         

			                                                                                       
				        

			                                                                 
			 
				                                                                                                                                                                                                                                                                    
				                            
				     
			 
		 

		                            
		 
			                                                 
			                                    
			 
				                                                                                                                                                               
			 
		 
	 

	                                             
	 
		                                                                           
		                                                                                   
	 
 
#endif


#if SERVER
                                                         
 
	                                     
	                                                                
	                                                                                      
	                                                                        
		      

	                                                                
		      

                        
		                                               
			      
      
                        
         
       

	                                                                                             

	                                         
	                                             
	 
		                                                                        
	 

	                                                                                       

	                                                       
 


                                        
 
	                                                                      
	                                                                          
	                                                                                       
 


                                                            
 
	                               
	                                       
	                                         
	                                           
	                                                 

	                                      
	                                                 
	                                           
		                                       

	                                                              
		                                                            
	    
		                                                           

	                                                   
	                                    
	 
		                                                                      
		                                                                       
	 

 


                                                                                    
 
	                            
	                                       
	                                            
 


                                                                                    
 
	       
		                                                                                                                                              
		                                                                                                                                          
		                                                             
	      

	                                                       
	                                                                                                               

	                                                                           
	                                        
 


                                                                                      
 

	       
		                                                                                                                                              
		                                                                                                                                            
		                                                             
	      

	                                                       
	                                                                                                               

	                                                                           
	                                          
 


                                                                                                 
 
	                                   
	                       
		      

	       
		                                                                                                                                              
		                                                                                                                                                    
		                                                             
	      

	                                                       
	                                                                                                               

	                                                                           
	                                                
 

#endif


var function GetRankedPersistenceData( entity player, string persistenceField )
{
	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return null
	#endif

	string ornull currentSeasonRefOrNull = GetCurrentStatRankedPeriodRefOrNullByType( eItemType.calevent_rankedperiod )

	if ( currentSeasonRefOrNull != null )
	{
		expect string( currentSeasonRefOrNull )

		#if UI
			return GetPersistentVar( "allRankedData[" + currentSeasonRefOrNull + "]." + persistenceField )
		#else
			return player.GetPersistentVar( "allRankedData[" + currentSeasonRefOrNull + "]." + persistenceField )
		#endif
	}
	else
	{
		#if UI
			return GetPersistentVar( "offSeasonRankedData." + persistenceField )
		#else
			return player.GetPersistentVar( "offSeasonRankedData." + persistenceField )
		#endif

	}

	unreachable

}

int function GetDemotionProtectionBuffer ( entity player )
{
	return expect int ( player.GetPersistentVar( "demotionBuffer" ) )
}

#if SERVER
       
                                   
 
	                                                   

	                                                         
	                                                    
	                                                        
	                                                            
	                                                  
	                                                        
	                                                       

	                           
 


                                                                          
 
	                                                                                                                   
	                                                                                

	                                                                                                                          

	                                                           
 


                                                                           
 
	                                                                                                                   
	                                                                                
	                                                                                                                          


	                                                                                                        
	                                                                            

	                                                                                                                      

	                                                            
 


                                                                                           
 
	                                                                         
	                                                                                                         
	                                                                                                      
	                                                                                          
	                                                                                       

	                                                                   
	                                                               
	                                                       
	                                                   
 


                                                                                                                                                   
 
	                                                                                                                     
	                                                                                                         

	                                                                                                                
		                                                                                                                                                                                                                        
 

                                          
 
	                                   

	                           
	                                                       
	                                                       
	                   								   
	                    							   
	                                                   
	                                                   
	                                                   
	                                                   
	                      		                           
	                            	                                             

	                                                       
 

                                      
 
	                     
	                  
	                 
	                             
	                            
	                                   
	                                 
	                            
	                                  

	                             
	                                             
	                                               
	                                                     

	                                                                                                                                                                                                                                                                                      
 

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
 
	                                             
	 
		                                              
		                                                                                                            
		                                                                  
		                                                    
		                                                                     

		                                                                    
		                                                                       
		                                                                               
		                                                                  
		                                                                                 
		                                                                       
		                                                                                   

		                       
		 
			                                                  
		 

		                                                
		                                                             
		                                                         
		                                                                         

		                                    
		                                    
		                             

		                                                                                                            

		                                                                                                              
		                                
		 
			                                   

			                                                                                                                 
				                                                                                                                                                                                                                         
		 

		                                  
	 
 


                                                       
 
	                                                    
	                                                           
	                                                  
	                                                             
	                                                                
	                                               
 


                                                                         
 
	                                             
	 
		                                                         
		                                                              
		                                                          
		                                                              
	 
 


                                                                              
 
	                                             
	 
		                     
		 
			                                                                                                                  
			                                                                                                                               

			                                                                                                    
			                                                                                
			                                                                                                         
			                                                                                                                
			                                                                                                          
		 
		    
		 
			                                                                                                         
			 
				                                                                  
				                                                                                                  
				                                                                                                         
				                                                                                                 
				                                                                                                   
			 
		 

		                                                          
		                                                   
		                                                                  
		                                                                                                                                                                                             
	 
 


                                                      
                                   
 
	                                             
	 
		                                                                                                                  
		                                                                              
		                                                                                                    
		                                                                                                      
		                                                                                                  
		                                                                                                                     
		                                                                                                       

		                                                          
		                                                   
		                                                                  
	 
 


                                                           
                                   
 
	                                             
	 
		                                                                                                                  
		                                                                              
		                                                                                                      
	 
 
               


                                                       
                                                                                                                                                                                    
 
	                        
	                                             
	 
		                                                                                                             
			                                                    
	 

	                                                                                                            
	                                                   
	 
		                                                                      
		                                                                                   
		                             
		                                                               
		 
			            
				                                
		 

		                                                                                
	 
 


                                                            
 
	                          
		      

	                                                               
	                                                                          
	                                                                                                                                                                                                         

	                                                                                     

	                      
	 
		                                                               
		                                                                          
	 

	                                                                                                           
	                                                                                                                                                         
	                                                                                                                                                      

	                                     
		                                                                                                                         
 


                                                                                  
 

	       
		                                                                                                   
		                                                                           
		                                                              
		                                                                    
		                                                                        
		                                                              
		                                                                                                
		                                                                                            
		                                                                                                              
		                                                                
	      


	                                                                                     
	                                                                        
	                                                                              
	                                                                                  
	                                                                        
	                                                                                                          
	                                                                                                      
	                                                                                                                        
	                                                                          

	                                                  
	 
		                                              
		                                                                                                            
		                                                                                                  

	 
	
	                         
	 
		       
			                                          
		      
		                                                                                                              
		                                                                                                                                                     
	 
	    
	 
		       
			                                              
		      
		                                                                                                                                
	 

	                                                                             
	 
		       
			                                                           
		      
		                                                                                                                                  
	 

	                                                                                                                                   
 


                                                                            
 
	                         
		      

	                      
		      

	                                                                          
	                                                                  

	                                                                          
 


                                                                                          
 
	                                                                                                                   

	                                     
	 
		                                       
		                                                                                                    
	 
	    
	 
		                                                                          
	 
 


                                                                                                                                   
 
	                                                                                             
 


                                                                  
 
	                                                           
	                                             
	                                                 
	                       
	                                                                                                                                                                            

	                                                                          
	                                                                                            

	                                                                                                                               
 

                                                                                                                                                                     
                                                                                                                        
 
	                                                                                                                                                                                                       

	                                                                                                        
	                                                                                                                                                                                       

	                                                                                           

	                              
	                                 

	                                                             
	                                                                      
	                                            
	                                             

	       
	          
	                                                      
	      

	                                               
 


                                                                                              
 
	                       
	 
		            
	 

	                                                                          
	                               
	                               
	                               
	                               
	                               
	                               
	                             
	                             
	                             

	                                                                     
	                                                                                                                                                                
	                                                                                                      
	                                              
	                                               

	            
 


                                                                                          
 
	                     
	 
		            
	 

	                                       

	                                      
	 
		                                                                
		                               
	 

	            
 


                                                                                
 
	                                                                                                                                                                
	                                                                                                                                                              

	                       
	                                                                                                      
	 
		                                                       
		                                                                                                       
		 
			                
			                                                                          
			                                                                   
			                                                
		 
		    
		 
			               
			                                                        
			                                                                       

			                                                                          
			                                                          

			                                                         
		 
	 

	            
 

       
                                                                                          
 
	                                                                                   
	                    
	 
		                                                                             
		                                                                                                                                            
	 
	            
 
      


                                                                                 
 

	                                                                                                                                                                
	                                                                                                                                                              

	                                                                                          
	 
		                                                       
		                                                                                                              
		                                   
		 
			                                                     
		 

		                                                                                                            

		                                                           
		                                                              
	 

	            
 

                                                                       
 
	                                                     
 


                                                                                 
 
	                                                                        
	 

		                          
			        

		                         
			        

		                                                               
			        

		                       
			 
			                                                                                                          
			                                                    
			                                                   
		 
	 
 


                                                                                                                  
 
	                                                                                                                                                              
	                                                          
 


                                                                                                                     
 
	                                                                                         
	                                                                          
 


                                                                                
 
	                                                               
	 
		                              
	 
 


                                                                                            
 
	                                          
		      

	                     
		      

	                                                                               
	 
		                                         
	 
 


                                                                        
 
	                                                                                         
	                                                                 

	                                                    
	                                               

	                                                    
 

                              


                      
                                                                                      
 
	                      
		      

	                               
		      

	                                                                                     
	                                                             
	 
		                                                                                                               
	 
	                                                              
	 
		                                                                                                                                                                        
		 
			                                                                         
			 
				                           
					        

				                                                                                                                                           
					                                                                
			 
		 
		                                                                                                           
		 
			                                                         
				                                                            
		 
	 
	    
	 
		                                                                                                                                                                                 

		                                                                                                                               

		                                                                                                          

		                                                                               
		 
			                                                                                                                                                                                 
			 
				                                                                                                                                 
				                                                                                                       

				                                                                                                                                
				 
					                                                                                                                                   
				 

				                                                                                           
				                                                             
			 
			    
			 
				                                                                                                                                 
				                                                                                           
				                                                        
				                                                                                                                       
				                                                  
			 
		 
		    
		 
			                              
			 
				                                                                                                                                 
				                                                                                           
				                                                             
			 
			    
			 
				                                                                                                                                 
				                                                                                           
				                                                        
				                                                                                                                       
				                                                  
			 
		 

		                                                                                      
		                                                                         
		 
			                           
				        

			                                               
				        

			                                                                
		 
	 

	                                                                                                                                                               
		                                             
 
                       


                                                                       
 
	                                                        
	                                                                                                
 

                                                                                                             
 
	                                                                                                            

	                                                                                     

	                                                                                                                           
	                                                    
	 
		                                                                                                      
		                                                      
		                                                                
			      

		                                                           

		                                                    

		                                                                   
	 
	                                 
	 
		                                                                                                             
		                                                                                                                      
		                                                                   

		                    
		                                                   
		 
			                                                                                                        
			              
				                                                                
		 
		                                                                                                              
		                                                                                                                

		                                                                        
		                                                                         
		                                                                                                    
		                                                                                                                                
		                                                                                                                           

		                                                   
			                                                   

		                                                                                                             
		                                                                                                                        
		                                        

		                                                                                                           
		                                                                                                                             

		                                                                     
			                                                                                                                                                                 
	 
 


                                                                                                                                                            
                                                                                                                                                                            
                                                                                                                                     
 
	                                                          
	                                                                                                                       

	                                                                                                              
	                                                                                                                      
	                                                              
	                                                                   

	                                                   
	 
		                                                                                                                     
		                     
		 
			                                                          
			                                                                

			                                                                                                                    
		 
	 

	                                                                                                                                                                                                                                                                 
	 
		                                                                                                                                                              
		                                                                                                                                                            
		                                                      
		 
			                                                         
			                                                                   
			                                                                                                
		 

		                                                                                                                 
	 

	                                                                                                                

	                                                                                                                                                                 

	                    
		                                                                                                                                                                                             

	                                                   
		                                                   

	                              
 


                                                             
 
	                                      
	 
		                                                   
	 
 


                                                                        
 
	                                                                                    
	 
		      
	 

	                                                                 

	                                                             
	                                                                                    
	                                                                                
	                                                                 

 


                                                                         
 

	                                                               
	                                                                                 

	                                                                 
	                                      

	                                                    
	                                                        
	                                                                    

	       
		                                                                
		                                                                             
	      
	                                                                                                                                

	                                

	             
 


                                                                                                                                                                        
                                                                                                                                        
 
	       
		                                                 
		                                                                                             
	      

	                                                                                                                                                           
	                                      
	                                                          

	                    

	                                         
	                                             
	                                                 
	                                                              

	                                             
	                                                
	                                
	                                    
	                                                

	                         
	                                                                         
	                                                                              

	                                          
	                                                                                      

	                        
	                                                                                    
	                                                                                            
	                                                                                                       
	                                                                                                               

	                                                                                                     
	                                
	                                           
	 
		                                                                                             
		                                         
		 
			                                             
		 
	 

	                                             
	 
		                                                                                             
		                                           
		 
			                                            
		 
	 

	                                                   
	 
		                                                                                             
		                                                 
		 
			                                                                                  
		 
	 

	                          
	                                                       

	                       
	                                                     
	 
		                                    
		 
			                                                                                                                                                      
			                        

			       
				                                                                
			      
		 
	 

	                                                                  


	                                   

	                     
	                                                                               

	                                                                        
	                                                                                        
	                                            

	                        
	                                                

	                                                                                

	                                                  

	       
		                                                          
		                                                                     
		                                                      
		                                                 
	      

	             
 


                                                            
 
	                                 

	                                            
		          

	                                  
		                           

	                                                              
	                                                                                
 


                                                    
 
	                                
	             
	                                       
		                   

	            
 

                                                        
 
	       
		                                    
			      
	      

	                 
		      

	                       
		      

	                                                                                                     
		      

	                                                                                               
	                                                                                                                 
		      

	                                                                                                         
	 
		                                                                  
		                                                                            
			        

		                                                                                                                               
		                   
		                                                                                   
		 
			                                                                                                        
			                                                                                  
		 

		               
		                                                                          
		 
			                                                                                                        
			                                                                                  
		 

		                                                                                        
		                                                                            
		 
			                                                                  
			                                                                                   
			                                                                                                       
			                                                                                                                                  
			                                           
			 
				                                                                                                                           
				                                                                     
					                                                                                                                                                            
			 
		 
	 
 


                                                        
 
	       
		                                                               
		                                    
			      
	      

	                 
		      

	                       
		      

	                                                                                 

	                                                                                                                                                                                                                                                                                                                                          
	 
		                                                                                                                                                  
		      
	 

	                                         
		                                                           

	                                                                                        
	                                                   
	                                                              
	 
		                                                                                                                  
		                                                                                                                         
		 
			                                                                                              
			      
		 

		                                                                                        
		                                                                                                                                            
		                                                                                                                               

		                                                                                                     

		                                     
		 
			      
		 

		                                                                                                                                            
		 
			                                                                                                                     
			                                                                                                          
			                                                                                                                                
			                                                                                                               
			      
		 
		    
		 
			                                                         
		 

		      
	 

	                                                                                                                  

	                                                                                                     

	                                                                                                                                                                                                                              
	 
		                                                                     
		                                                         
		                                               

		                                                                   
		                                                                                                                     

		                                                                                                         
		 
			                                                                                                                                                                               
			        
		 

		                                                                                 

		                                                                                                                                                                                                                                                                      
		 
			                                         
			                                                                                  

			                                                                                                                                                                                       
			                                                                                                                           

			                                                                                                 
				                                                                                     

			                              
			 
				                                                                                                                                        
				 
					                                                                                                                       
					                                                                                                      
					                                                                                                                                
					                                                                                                                                                                                                                                                                                                        
					      
				 
				    
				 
					                                                           
				 
			 
		 

		                                                                                            
		                                                                                               
		 
			                                                                                                                                                                        
			      
		 

		                                                   
		 
			                                                                                                                                                                         
			 
				                                                                                                                                                                        
				                                                                                                                                                            
				                                                   
			 
		 
	 
 


                                                                                          
 
	                                                                                                                                                             
	                                                                 
	                                                                                                                                                                                                  

	                         
	 
		                                                                                            
		     

		                                 
		 
			                                                                                                    
			                                                         
			                                                                                                          
			     
		 

		                                                                                                                                                                                                

		        
		 
			                                                                                                
			                                                                                  
			                                                                                                                                                                                
			 
				                                                                                                                         
				                                                                                                       
				                                                                                                           
				                                                                                                                                                                                                      
				                                                                                                                                       
			 
			    
			 
				                                                                                           

				                             
				                                  
				 
					                                                                                                                                        
					                                                                                                                     
					                                                                                                                                   
				 
				    
				 
					                                                                              
				 


				                               
				                                                                                                                                                                                                                         
				                                                                                                    
				                                                         

				                                                                                        
				 
					                                            
					                                           
				 

				                                                            
				                                                                

				                                  
					                                                                                                                                
				    
					                                                                                                   

				                                                                                                          
				                                                                                                          

				     
			 
			     
		 
	 

	                                        
	                                                                            
	                                                                                                 
	                                                                                                                
	                                                                    

	                                                                                               

	                                                                                                                  
	                          
	                                         
		                                                                                                                       

	                    
	 
		                                                                              
		                                                                                       
		                                                                                    
		                                 
		 
			                                                                                                                 
			                                                                                                                              
			                                                                                                     
		 
	 

	                                                                  
		                                                                                    

	                                                                                                                                                           
	           
 


                                                                                   
 
	                                                                                                                                                           
	                                                                 
	                                                                                                                                                                                                       

	                                                                            

	                                                                               

	                             
	                                  
	 
		                                                                                                                            
		                                                                                                         
		                                                                                                                          
	 
	    
	 
		                                                                     
	 

	                               
	                                                                                                                      
	                                                                                                      

	                                  
		                                                                                                                               
	    
		                                                                                                   

	                                        

	                                                                                        
	 
		                                           
		                                           
	 

	                                                                                        
	                                                                                                                
	                                                                                                               
	                                                                                                          
	                                                                                                  
	                                                                                                          

	                           
	                                                            
	                                                                


	                                                                                                                                                                     
	 
		                                                                                                       
	 

	                                                                                                                  
	                                                       
	                    
	 
		                                                                                 
		                                 
		 
			                                                                                                                  
			                                                                               
			                                                                                                                              
			                                                                                                  
		 
	 
	                
		                                                                                    
 


                                                             
                                                       
 

	                                                                                                         
	       
		                                    
			      
	      

	                                                                                      

	                                                   
		      

	                                                    

	                                                                                                      

	                                                                                                                                                                                                                           
	 
		                                                                       
		                                                           
		                                                 

		                                                                  
		                                                                                      
		 
			        
		 

		                                                                                         
		 
			                                                                                             
			                                                                                                                                                             
			 
				                                                                                                                                                                                             
				      
			 
		 
	 

	                                                                                                  

	                                                                                                                                                        
	                                                                                                                                 
	                                                                                    
	   
	                                                                                                                         
	                                                                                                                                             
	                                 
		                                                                                              

	                                                                                                         
	 
		                                                                       
		                                                           
		                                                 

		                                                                  
		                                                                                                                                                                                                                                                                      
		                                                                                      
		 
			        
		 

		                                                                                         
		 
			                                                                             
		 

		                                                                                                                                                 
		                                                                                                                             
		                               
		 
			                                                                                                        
			        
		 

		                                                                                                                                                                                           

		                                   

		                                                  
		                                                                        
		                                                                                                           

		                                                   
		 			
			                                                                                                                       
		 
		    
		 			
			                                                                                                                
			                                
			 
				                                                                                                            
			 
			    
			 
				                                                                                          
				                                                                                                                                                    
			 
		 

		                                                                                         

		                         
		                                                                     
		 
			                                      
			 
				                                                                  
				                                                                                                    
			 
		 

		                                            
		 
			                                                                                                                                                    
				        

			                                                                  
				        

			                                                                          
			                                                                                                                      
				        

			                                
			                                                         
			                                                                                 
			 
				                                                                      
				                                                                                                                              
			  
			                                                                                     
				                                                                             
				                           
					      

				                                                
			  
			                                                                          
			                                             
		 

		                                                                                                    
	 
 


                                                                                                     
 
	                                                            
		                                                

	                                                                                                        

	                                                          
	                                                   
	                                                                  
 


                                                                          
 
	                                                                  
	                                                          
	                                                   
	                                                                  
 


                                                                           
 
	                                                          
	                                                   
	                                                                  
 

                                                          
 
	                
	 
		                                    
			                                    

		                                                   
			                                                   

		                                                   
			                                                   

		                                                   
			                                                   

		                                                     
			                                                     
	 
 


                                                       
 
	       
		                                    
			      

		                     
		 
			                                                        
			                                                                         
			 
				                                               
			 

			                                                                       
			 
				                                                                     
				                                      
			 
		 
	      

	                    

	                                                              
	                                                             
	                                                         
	                                                              

	                                                                                                    
	                                                          
	                                                               
	                                                          
	                                                                           
	                                                                         
	                                                                                  

	                      
		      

	                                        
	                                                   
	                                                        

	                             
	                                                         

	                               
	 
		                                                                   
		                                                                                                                
		                                                                                                                       

		                                                                             
		                                                                                                                           
		                                                                                                                         
	 

	                                                                                                                                                              
	                                                                                                
	                                                                 
	                                      

	                                                             
	                                                                      
	                                     
	 
		                                       
		                                                                                 
			                                                                          

		                                                                                      
			                                                                       
	 

	                                                                 

	                                                                                                                    
	 
		                                                                                                                                                                     
		 
			                                                                                                             
			                                                    
			                                                                                                            
			                                                                            
			                                                                           
		 

		                                                                  
	 

       
	                                                              
	                                        

	                
	 
		                                                     

		                    

		                      
		 
			                      
			                                                                                      
			                          
			 
				            

				                            
				 
					                
					     
				 

				              
			 

			                
				     
		 

		                       
		 
			                                           
			                     
			                                

			                                                                                                         
			                                                                                              
			                                        
			                                                           
		 
	 

      
 


                                                                                
 
	                                

	                                                       
	           
	                                                
 


                                                                               
 
	                                

	                     
		      

	                                                                
		      

	                                                       
	           

	                                                                        
	 
		                                                                                  
		                                                                                   
	 
 


                                                             
 
	                                                   
	 
		                                                                                        
			                                                                                                                                              

		                                                   
	 

	                                                     
	 
		                                                                              
		 
			                                                                                                       
			                                                                                    
			                                                                                                                                 

			                                                   
			 
				                                                                                                              
				                                                                                                                           
			 
		 

		                                                     
	 
 


                                                                                              
 
	       
		                                    
			      
	      

	                                                    
	                                                        
	 
		                                                                                                               
	 
 


                                                                
                                                                                                                        
 
	                                                                                                                                        
	                         
	 
		                                                                                                  
		                                                                                                                                               
	 
 


                                                                        
 
	                                                            

	                                            
	                                      
		                                                                                        

	                                                                                                
		                                                       

	            
 


                                                                                                  
 
	                                                     
	 
		                                                                         
	 
	    
	 
		                                                                      
	 
 


                                                                                                                               
                                                                                                                                                                                                                                      
 
	                            
	                                                      
	                                                     

	                                                   
	 
		                                                                 
	 
	    
	 
		                                                             
	 
 


                                                                 
 
	                                                                                                                                                                                                              
	                        
	                                                                                                                
	                                                                                                                       
	                                                                                                                       
	                                                                                                                   
	                                                                                                                           
	                                                                                                                         
	                                                                                                                       
	                                                                                                                            

	                                                                                                                  
	                                                                                                                           
	                                                                                                                           
	                                                                                                                       
	                                                                                                                               
	                                                                                                                             
	                                                                                                                           
	                                                                                                                                
 

                                                                                                                              
 
                                                                                                               
	                                                                               
	                                                                                                                         

	                                                  
	                                                                        
	                                                                                                           

	                               
	 
		                                                                                                
	                                    
	 
	
	                                                                                                                                                               

	                                      
	                                                                      

	                                                                    
		                                                                   

	                                                                                                                                                                                                                          
	 
		                                                                                                                                                
		                                                                                                                      
		                                                                                                                                                                                      
		                                              
		 
			                                                                        
			                                                                     
		 
		    
		 
			                                                                                                             
			                                                                                     
			                                                                                  
		 
	 

	           
 
#endif            


#if CLIENT
void function OnRankedScoreChanged( entity player, int new )
{

	printf ("Baadge onrankedscoredchanged aaaa  " + player.GetPlayerName() + " " + new )
	if ( IsLobby() )
		return

	if ( new == SHARED_RANKED_INVALID_RANK_SCORE )
		return

	EHI playerEHI = ToEHI( player )
	Ranked_UpdateEHIRankScore( playerEHI, new )
	RunUIScript( "Ranked_UpdateEHIRankScore", playerEHI, new )

	if ( player != GetLocalViewPlayer() )
		return

	SetRankedIcon( new, Ranked_GetLadderPosition( player ) )
}
#endif


#if CLIENT
void function OnRankedLadderPositionChanged( entity player, int new )
{
	if ( IsLobby() )
		return

	if ( new == SHARED_RANKED_INVALID_LADDER_POSITION )                                                                                            
		return

	EHI playerEHI = ToEHI( player )
	Ranked_UpdateEHIRankedLadderPosition( playerEHI, new )
	RunUIScript( "Ranked_UpdateEHIRankedLadderPosition", playerEHI, new )

	if ( player != GetLocalViewPlayer() )
		return

	SetRankedIcon( GetPlayerRankScore( player ), new )
}
#endif


#if CLIENT
void function SetRankedIcon( int score, int ladderPos )
{
	var rui = ClGameState_GetRui()

	if ( rui == null )
	{
		                                                            
		return
	}

	                                                                                                                                                     


	if ( score < 0 )
		return


	SharedRankedDivisionData data = GetCurrentRankedDivisionFromScoreAndLadderPosition( score, ladderPos )
	                                                                  
	PopulateRuiWithRankedBadgeDetails( rui, score, ladderPos )

	if ( GetLocalViewPlayer() != null )
	{
		RuiTrackInt( rui, "inMatchRankScoreProgress", GetLocalViewPlayer(), RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "inMatchRankScoreProgress" ) )
		RuiTrackFloat( rui, "rankedKillAssistMultiplier", GetLocalViewPlayer(), RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "rankedKillAssistMultiplier" ) )
	}
}
#endif


#if CLIENT
void function Ranked_OnSpectateTargetChanged( entity spectatingPlayer, entity prevSpectatorTarget, entity newSpectatorTarget )
{
	                                                                                                                                                       
	if ( IsValid( newSpectatorTarget ) && newSpectatorTarget.IsPlayer() )
		SetRankedIcon( GetPlayerRankScore( newSpectatorTarget ), Ranked_GetLadderPosition( newSpectatorTarget ) )
}
#endif


bool function IsRankedPersistenceValid()
{
	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return false
	#endif

	return IsRankedInSeason()
}


bool function IsRankedInSeason()
{
	string ornull currentSeasonRefOrNull = GetCurrentStatRankedPeriodRefOrNullByType( eItemType.calevent_rankedperiod )

	if ( currentSeasonRefOrNull == null )
		return false

	return true
}


#if CLIENT
void function OnScoreboardCreated()
{
	if ( GetLocalViewPlayer() == null )
		return

	int score     = GetPlayerRankScore( GetLocalViewPlayer() )
	int ladderPos = Ranked_GetLadderPosition( GetLocalViewPlayer() )
	SetRankedIcon( score, ladderPos )
}
#endif


#if CLIENT
void function OnGameStateChanged( int newVal )
{
	if ( IsLobby() )
		return

	Assert( IsRankedGame() )

	var rui       = ClGameState_GetRui()
	int gameState = newVal
	if ( gameState >= eGameState.Prematch )
	{
		RuiSetBool( rui, "showRanked", true )
		OnScoreboardCreated()
	}
}
#endif


array<SharedRankedTierData> function Ranked_GetTiers()
{
	return file.rankedTiers
}


SharedRankedTierData ornull function Ranked_GetNextTierData( SharedRankedTierData data )
{
	if ( data.isLadderOnlyTier )
		return null

	if ( data.index + 1 < file.rankedTiers.len() )
		return file.rankedTiers[ data.index + 1 ]

	return null
}


array< SharedRankedDivisionData > function Ranked_GetRankedDivisionDataForTier( SharedRankedTierData tier )
{
	if ( tier.isLadderOnlyTier )
	{
		Assert( file.ladderOnlyDivision != null )
		return [ expect SharedRankedDivisionData( file.ladderOnlyDivision ) ]
	}

	array< SharedRankedDivisionData > data

	for ( int i = 0; i < file.rankedDivisions.len(); i++ )
	{
		if ( file.rankedDivisions[ i ].tier == tier )
			data.append( file.rankedDivisions[ i ] )
	}

	return data
}


void function Ranked_UpdateEHIRankScore( EHI playerEHI, int rankScore )
                                                                                                                               
{
	printf ( "baadge 11111 Ranked_UpdateEHIRankScore :" +  rankScore)
	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.rankScore = rankScore
}

void function Ranked_UpdateEHIRankScorePrevSeason( EHI playerEHI, int rankScore )
                                                                                                                               
{
	printf ( "baadge 11111 Ranked_UpdateEHIRankScorePrevSeason :" +  rankScore)

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.rankScorePrevSeason = rankScore

}


void function Ranked_UpdateEHIRankedLadderPosition( EHI playerEHI, int rankedLadderPosition )
                                                                                                                               
{
	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.rankedLadderPosition = rankedLadderPosition
}


void function Ranked_UpdateEHIRankedLadderPositionPrevSeason( EHI playerEHI, int rankedLadderPosition )
                                                                                                                               
{
	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.rankedLadderPositionPrevSeason = rankedLadderPosition
}


int function Ranked_GetLadderPosition( entity player )
{
	#if SERVER
		                               
		                                                           

	#endif

	#if CLIENT
		Assert( !IsLobby() )
		EHI playerEHI = ToEHI( player )
		return GetEHIScriptStruct( playerEHI ).rankedLadderPosition
	#endif

	#if UI
		if ( !IsLobby() )
		{
			EHI playerEHI = ToEHI( player )
			return GetEHIScriptStruct( playerEHI ).rankedLadderPosition
		}
		else
		{
			Assert( player == GetLocalClientPlayer() )
			CommunityUserInfo ornull cui = GetUserInfo( GetPlayerHardware(), GetPlayerUID() )

			if ( cui == null )
				return -1

			expect CommunityUserInfo( cui )
			return cui.rankedLadderPos
		}
	#endif

	unreachable
}

int function Ranked_GetPeakLadderPositionPrevSeason( entity player )
{
	#if SERVER
		                               
		                                                           

	#endif

	#if CLIENT
		Assert( !IsLobby() )
		EHI playerEHI = ToEHI( player )
		return GetEHIScriptStruct( playerEHI ).rankedLadderPosition
	#endif

	#if UI
		if ( !IsLobby() )
		{
			EHI playerEHI = ToEHI( player )
			return GetEHIScriptStruct( playerEHI ).rankedLadderPosition
		}
		else
		{
			Assert( player == GetLocalClientPlayer() )
			CommunityUserInfo ornull cui = GetUserInfo( GetPlayerHardware(), GetPlayerUID() )

			if ( cui == null )
				return -1

			expect CommunityUserInfo( cui )
			return cui.rankedLadderPos
		}
	#endif

	unreachable
}



#if UI
void function Ranked_SetupMenuGladCardForUIPlayer()
{
	entity player = GetLocalClientPlayer()

	int ladderPos = -1
	int highScore = -1

	ItemFlavor ornull latestRankedPeriodOrNull = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )

	if ( latestRankedPeriodOrNull != null )
	{
		ItemFlavor latestRankedPeriod = expect ItemFlavor ( latestRankedPeriodOrNull )
		ItemFlavor ornull previousRankedPeriodOrNull = GetPrecedingRankedPeriod( expect ItemFlavor ( latestRankedPeriodOrNull ) )
		if ( previousRankedPeriodOrNull != null )
		{
			ItemFlavor previousRankedPeriod = expect ItemFlavor ( previousRankedPeriodOrNull )

			if ( SharedRankedPeriod_HasSplits( previousRankedPeriod ) )
			{
				highScore = Ranked_GetHistoricalRankScoreAcrossSplitsForPlayer ( player, previousRankedPeriod )
			}
			else
			{
				string previousRankedPeriodRef  = ItemFlavor_GetGUIDString( previousRankedPeriod )
				highScore = Ranked_GetHistoricalRankScore ( player, previousRankedPeriodRef, true )
			}

			Ranked_SetupMenuGladCard_internal( Ranked_GetLadderPosition( player ), GetPlayerRankScore( player ) , highScore , ladderPos )
			return
		}
	}

	Ranked_SetupMenuGladCard_internal( Ranked_GetLadderPosition( player ), GetPlayerRankScore( player ) )
}


void function Ranked_SetupMenuGladCardFromCommunityUserInfo( CommunityUserInfo userInfo )
{
	Ranked_SetupMenuGladCard_internal( userInfo.rankedLadderPos, userInfo.rankScore )
}


void function Ranked_SetupMenuGladCard_internal( int ladderPos, int rankScore, int ladderPosPrev = -1, int rankScorePrev = -1 )
{
	int rankShouldShow = IsRankedPlaylist( Lobby_GetSelectedPlaylist() ) ? 1 : 0
	SendMenuGladCardPreviewCommand( eGladCardPreviewCommandType.RANKED_SHOULD_SHOW, rankShouldShow, null )
	SendMenuGladCardPreviewCommand( eGladCardPreviewCommandType.RANKED_DATA, ladderPos, null, rankScore )
	SendMenuGladCardPreviewCommand( eGladCardPreviewCommandType.RANKED_DATA_PREV, ladderPosPrev, null, rankScorePrev )                            
}


int function SharedRanked_GetMatchmakingDelayFromCommunityUserInfo( CommunityUserInfo userInfo )
{
	return userInfo.banSeconds
}


int function SharedRanked_GetUIPlayerMatchmakingDelay()
{
	string playerHardware = GetPlayerHardware()
	if ( playerHardware == "" )                                                      
		return 0

	string playerUID = GetPlayerUID()
	if ( playerUID == "" )                                                        
		return 0

	CommunityUserInfo ornull userInfo = GetUserInfo( GetPlayerHardware(), GetPlayerUID() )
	if ( userInfo == null )
		return 0

	expect CommunityUserInfo( userInfo  )

	return SharedRanked_GetMatchmakingDelayFromCommunityUserInfo( userInfo )
}


int function SharedRanked_GetMaxPartyMatchmakingDelay()
{
	Party party    = GetParty()
	int currentMax = -1

	if ( party.members.len() == 0 )
	{
		                                                                                         
		currentMax = SharedRanked_GetUIPlayerMatchmakingDelay()
	}
	else
	{
		foreach ( member in party.members )
		{
			CommunityUserInfo ornull userInfoOrNull = GetUserInfo( member.hardware, member.uid )

			if ( userInfoOrNull != null )
			{
				CommunityUserInfo userInfo = expect CommunityUserInfo(userInfoOrNull)

				int delay = SharedRanked_GetMatchmakingDelayFromCommunityUserInfo( userInfo )

				                                                              

				if ( delay > currentMax )
				{
					currentMax = delay
				}
			}
		}
	}

	return currentMax
}


bool function Ranked_ManageDialogFlow( bool rankedSplitChangeAudioPlayed = false )
{
	bool result = false

	if ( Ranked_HasRankedPeriodMarkedForRewardAcknowledgement() )
	{
		string earliestRankedPeriod = Ranked_GetRankedPeriodToAcknowledgReward()
		Remote_ServerCallFunction( "ClientCallback_rankedPeriodRewardAcknowledged", earliestRankedPeriod )
		Ranked_MarkRankedRewardsGivenNotified( earliestRankedPeriod )

		ItemFlavor rankedPeriodToAcknowledgeReward                      = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( earliestRankedPeriod ) )
		ItemFlavor followingRankedPeriod                                = expect ItemFlavor( GetFollowingRankedPeriod( rankedPeriodToAcknowledgeReward ) )
		SharedRankedDivisionData rankedDivisionForFollowingRankedPeriod = Ranked_GetNewDivisionForNewSeasonReset( GetLocalClientPlayer(), followingRankedPeriod )

		string unlockMessage
		Assert( IsPersistenceAvailable() )
		                                                                                                                                                                                                           
		 
			                                                            
			                                                                                         
			                                                                                                                                                                                         
				                                                                                                                               
		 
		      
		{
			unlockMessage = Localize( "#RANKED_REWARDS_GIVEN_DIALOG_MESSAGE", Localize( ItemFlavor_GetShortName( rankedPeriodToAcknowledgeReward ) ),
				Localize( rankedDivisionForFollowingRankedPeriod.divisionName ), Localize( ItemFlavor_GetShortName( followingRankedPeriod ) ) )
		}
		if( !rankedSplitChangeAudioPlayed )
			PlayLobbyCharacterDialogue( "glad_rankNewSeason", 1.7 )                      

		PromoDialog_OpenHijackedUM( Localize( "#RANKED_REWARDS_GIVEN_DIALOG_HEADER" ), unlockMessage, "ranked_rewards" )
		IncrementNumDialogFlowDialogsDisplayed()

		DialogFlow_DidCausePotentiallyInterruptingPopup()

		result = true
	}
	else if ( Ranked_NeedToNotifySplitReset() )
	{
		string rankedSplitResetAcknowledgePersistenceField = Ranked_GetSplitResetAcknowledgePersistenceField()
		SetDialogFlowPersistenceTables( "starterAcknowledged", true )
		Remote_ServerCallFunction( "ClientCallback_rankedSplitResetAcknowledged" )

		ItemFlavor ornull activeRankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )
		expect ItemFlavor ( activeRankedPeriod )
		Assert( SharedRankedPeriod_HasSplits( activeRankedPeriod ) && SharedRankedPeriod_IsSecondSplitActive( activeRankedPeriod ) )
		SharedRankedDivisionData newRankedDivisionAfterSplit = GetCurrentRankedDivisionFromScore( GetPlayerRankScore( GetLocalClientPlayer() ) )
		string resetMessage                                  = Localize( "#RANKED_SPLIT_RESET_DIALOG_MESSAGE", Localize( newRankedDivisionAfterSplit.divisionName ) )

		if( !rankedSplitChangeAudioPlayed )
			PlayLobbyCharacterDialogue( "glad_rankNewSplit", 1.7 )                       

		PromoDialog_OpenHijackedUM( Localize( "#RANKED_SPLIT_RESET_DIALOG_HEADER" ), resetMessage, "ranked_split" )
		IncrementNumDialogFlowDialogsDisplayed()

		DialogFlow_DidCausePotentiallyInterruptingPopup()

		result = true
	}
	                                                                                                                                   
	 
		                                                                           
		                                                            
		                                                                                        
		                                                                                          
		                                                                                                                              
		                                        
	   

	return result
}


bool function Ranked_HasRankedPeriodMarkedForRewardAcknowledgement()
{
	if ( IsFeatureSuppressed( eFeatureSuppressionFlags.RANKED_DIALOG ) )
		return false

	string earliestRankedPeriod = Ranked_EarliestRankedPeriodWithRewardsNotAcknowledged()
	if ( earliestRankedPeriod == "" )
		return false

	                                                         
	ItemFlavor rankedPeriodToAcknowledgeReward = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( earliestRankedPeriod ) )
	ItemFlavor ornull followingRankedPeriod    = GetFollowingRankedPeriod( rankedPeriodToAcknowledgeReward )

	if ( followingRankedPeriod == null )
		return false

	file.rankedPeriodToAcknowledgeRewards = earliestRankedPeriod
	return true
}


string function Ranked_GetRankedPeriodToAcknowledgReward()
{
	return file.rankedPeriodToAcknowledgeRewards
}

string function Ranked_EarliestRankedPeriodWithRewardsNotAcknowledged()
{
	string rankedPeriodResult = ""

	if ( !IsPersistenceAvailable() )
		return rankedPeriodResult

	int previousPeriodFinishTime = 0                                                                      

	foreach ( ItemFlavor rankedPeriod in GetAllRankedPeriodFlavorsByType( eItemType.calevent_rankedperiod ) )
	{
		int rankedPeriodFinishTime = CalEvent_GetFinishUnixTime( rankedPeriod )
		Assert( previousPeriodFinishTime < rankedPeriodFinishTime )

		if ( rankedPeriodFinishTime > GetUnixTimestamp() )                                              
			continue

		previousPeriodFinishTime = rankedPeriodFinishTime
		string rankedPeriodGUID = ItemFlavor_GetGUIDString( rankedPeriod )

		entity uiPlayer = GetLocalClientPlayer()

		int numberOfRankedGames = GetStat_Int( uiPlayer, ResolveStatEntry( CAREER_STATS.rankedperiod_games_played, rankedPeriodGUID ) )

		if ( numberOfRankedGames == 0 )                                                                                                            
			continue

		if ( Ranked_NeedToCheckWithStryderForEndRankedSplitOrPeriod( uiPlayer, rankedPeriodGUID ) )
		{
			if ( Ranked_GetHistoricalLadderPosition( uiPlayer, rankedPeriodGUID ) == 0 )                                                                   
				continue
		}

		var wasAwardsAcknowledged = Ranked_GetHistoricalRankedPersistenceData( uiPlayer, "rankedRewardsAcknowledged", rankedPeriodGUID )                                                                                                                                                                     

		if ( wasAwardsAcknowledged == null )
			continue

		expect bool ( wasAwardsAcknowledged  )

		if ( wasAwardsAcknowledged )
			continue

		if ( Ranked_HasNotifiedRankedRewardsGiven( rankedPeriodGUID ) )
			continue

		rankedPeriodResult = rankedPeriodGUID
		break
	}

	return rankedPeriodResult
}


bool function Ranked_NeedToNotifySplitReset()
                                                                                                       
{
	if ( !IsPersistenceAvailable() )
		return false

	if( IsFeatureSuppressed( eFeatureSuppressionFlags.RANKED_SPLIT_DIALOG ) )
		return false

	ItemFlavor ornull activeRankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )

	if ( activeRankedPeriod == null )
		return false

	expect ItemFlavor( activeRankedPeriod  )

	if ( !SharedRankedPeriod_HasSplits( activeRankedPeriod ) )
		return false

	if ( SharedRankedPeriod_IsFirstSplitActive( activeRankedPeriod ) )
		return false

	if ( !SharedRankedPeriod_IsSecondSplitActive( activeRankedPeriod ) )
		return false

	var hasRankedSplitOccured = GetRankedPersistenceData( GetLocalClientPlayer(), "hasSplitResetOccured" )
	if ( hasRankedSplitOccured == null )
		return false

	expect bool ( hasRankedSplitOccured )
	if ( !hasRankedSplitOccured )
		return false

	if ( GetCurrentPlaylistVarBool( "ranked_end_series_stryder_check", true ) )
	{
		if ( Ranked_GetHistoricalLadderPosition( GetLocalClientPlayer(), ItemFlavor_GetGUIDString( activeRankedPeriod ), true ) == 0 )                                                                   
			return false
	}

	string rankedPeriodGUID                       = ItemFlavor_GetGUIDString( activeRankedPeriod )
	string historicalPersistenceFieldAcknowledged = "allRankedData[" + rankedPeriodGUID + "]." + "splitResetAcknowledged"

	file.rankedSplitResetAcknowledgePersistenceField = historicalPersistenceFieldAcknowledged

	return (GetDialogFlowTablesValueOrPersistence( historicalPersistenceFieldAcknowledged, 9999 ) == false)
}


string function Ranked_GetSplitResetAcknowledgePersistenceField()
{
	return file.rankedSplitResetAcknowledgePersistenceField
}


bool function Ranked_NeedToNotifyRPAdjustment()
{
	if ( !IsPersistenceAvailable() )
		return false

	ItemFlavor ornull activeRankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )

	if ( activeRankedPeriod == null )
		return false

	expect ItemFlavor( activeRankedPeriod  )

	return ((GetPersistentVarAsInt( "hasStryderRPAdjustment" ) > 0) && (GetPersistentVarAsInt( "stryderRPAdjustment" ) != 0) && (GetPersistentVarAsInt( "stryderRPAdjustmentAcknowledged" ) == 0))
}


                                                                                                                                                   
void function PlayLobbyCharacterDialogue( string aliasPart, float delay = 0 )
{
	thread PlayLobbyCharacterDialogue_Internal( aliasPart, delay )
}

void function PlayLobbyCharacterDialogue_Internal( string aliasPart, float delay )
{
	wait delay
	waitthread WaitForLocalClientEHI()
	if ( LoadoutSlot_IsReady( LocalClientEHI(), Loadout_Character() ) )
	{
		ItemFlavor character = LoadoutSlot_GetItemFlavor( LocalClientEHI(), Loadout_Character() )
		var block    = GetSettingsBlockForAsset( CharacterClass_GetSetFile( character ) )
		string voice = GetSettingsBlockString( block, "voice" ).tolower()
		string soundAliasName = "diag_mp_" + voice +"_" + aliasPart + "_menu"
		                                                
		EmitUISound( soundAliasName )
	}
}


bool function IsRankedPlaylist( string playlist )
{
	return GetPlaylistVarBool( playlist, "is_ranked_game", false )
}


bool function Ranked_ShouldUpdateWithComnunityUserInfo( int score, int ladderPosition )
{
	SharedRankedDivisionData data = GetCurrentRankedDivisionFromScoreAndLadderPosition( score, ladderPosition )
	if ( data.emblemDisplayMode ==  emblemDisplayMode.DISPLAY_LADDER_POSITION && ladderPosition == SHARED_RANKED_INVALID_LADDER_POSITION )
		return true

	if ( file.ladderOnlyDivision != null )
	{
		SharedRankedTierData rankedTier = data.tier
		if ( Ranked_GetNextTierData( rankedTier ) != null )
		{
			return false
		}
		else
		{

			return ((expect SharedRankedDivisionData( file.ladderOnlyDivision )).scoreMin <= score)
		}
	}

	return false
}


bool function SharedRanked_PartyHasRankedLevelAccess()
{
	if ( !IsFullyConnected() )
		return false

	if ( GetCurrentPlaylistVarBool( "ranked_dev_playtest", false ) )
		return true

	Party party = GetParty()
	if ( party.members.len() == 0 )
	{
		if ( IsPersistenceAvailable() )
			return GetAccountLevelForXP( GetPersistentVarAsInt( "xp" ) ) >= SHARED_RANKED_LEVEL_REQUIREMENT
		else
			return false
	}

	bool allPartyMembersMeetRankedLevelRequirement = true

	foreach ( member in party.members )
	{
		CommunityUserInfo ornull userInfoOrNull = GetUserInfo( member.hardware, member.uid )

		if ( userInfoOrNull != null )
		{
			CommunityUserInfo userInfo = expect CommunityUserInfo(userInfoOrNull)

			if ( userInfo.charData[ePlayerStryderCharDataArraySlots.ACCOUNT_LEVEL] < SHARED_RANKED_LEVEL_REQUIREMENT )
			{
				allPartyMembersMeetRankedLevelRequirement = false
				break
			}
		}
		else
		{
			allPartyMembersMeetRankedLevelRequirement = false
			break
		}
	}

	return allPartyMembersMeetRankedLevelRequirement
}


bool function Ranked_PartyMeetsRankedDifferenceRequirements()
{
	if ( !IsFullyConnected() )
		return false

	if ( GetCurrentPlaylistVarBool( "ranked_dev_playtest", false ) )
		return true

	if ( GetCurrentPlaylistVarBool( "ranked_ignore_party_rank_difference", false ) )
		return true

	Party party = GetParty()
	if ( party.members.len() == 0 )
		return true

	bool allPartyMembersMeetRankedDifferenceRequirements = true

	foreach ( member in party.members )
	{
		CommunityUserInfo ornull userInfoOrNull = GetUserInfo( member.hardware, member.uid )

		if ( userInfoOrNull != null )
		{
			CommunityUserInfo userInfo = expect CommunityUserInfo(userInfoOrNull)

			int rankedTierThresholdIndex = Ranked_GetTierOfThresholdForRankedPartyDifferences()

			SharedRankedTierData tierData = GetCurrentRankedDivisionFromScore( userInfo.rankScore ).tier
			if ( tierData.index < rankedTierThresholdIndex )
			{
				continue
			}
			else
			{
				foreach ( partyMember in party.members )                                                                              
				{
					if ( partyMember.hardware == member.hardware && partyMember.uid == member.uid )
						continue

					CommunityUserInfo ornull partyMemberUserInfo = GetUserInfo( partyMember.hardware, partyMember.uid )
					if ( partyMemberUserInfo == null )
					{
						allPartyMembersMeetRankedDifferenceRequirements = false
						break
					}

					expect CommunityUserInfo( partyMemberUserInfo )

					SharedRankedTierData partyMemberTierData = GetCurrentRankedDivisionFromScore( partyMemberUserInfo.rankScore ).tier

					if ( abs( partyMemberTierData.index - tierData.index ) > 1 )
					{
						allPartyMembersMeetRankedDifferenceRequirements = false
						break
					}
				}

				if ( !allPartyMembersMeetRankedDifferenceRequirements )
					break
			}
		}
		else
		{
			allPartyMembersMeetRankedDifferenceRequirements = false
			break
		}
	}

	return allPartyMembersMeetRankedDifferenceRequirements

}


bool function Ranked_HasBeenInitialized()
{
	if ( !IsFullyConnected() )
		return false

	if ( !IsPersistenceAvailable() )
		return false

	#if DEV
		                                                                                                                 
	if ( GetBugReproNum() == 9000  )
	{
		if ( GetAccountLevelForXP( GetPersistentVarAsInt( "xp" ) ) < 150 )                                        
			return false
	}
	#endif          

	if ( GetCurrentPlaylistVarBool( "ranked_dev_playtest", false ) )
		return true

	if ( GetCurrentPlaylistVarBool( "ranked_ignore_intialization_check", false ) )
		return true

	ItemFlavor ornull activeRankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )
	if ( activeRankedPeriod == null )                                                        
		return true

	expect ItemFlavor ( activeRankedPeriod )

	entity uiPlayer = GetLocalClientPlayer()

	if ( !GetRankedPersistenceData( uiPlayer, "rankedInitialized" ) )
		return false

	if ( SharedRankedPeriod_HasSplits( activeRankedPeriod ) )
	{
		if ( GetCurrentPlaylistVarBool( "ranked_end_series_stryder_check", true ) )                                                                                                                                                             
		{
			if ( SharedRankedPeriod_IsSecondSplitActive( activeRankedPeriod ) && GetRankedPersistenceData( uiPlayer, "endFirstSplitLadderPosition" ) == 0 )
				return false
		}
	}

	return true

}


void function ServerToUI_Ranked_NotifyRankedPeriodScoreChanged()
{
	thread ServerToUI_Ranked_NotifyRankedPeriodScoreChanged_threaded()
}


void function ServerToUI_Ranked_NotifyRankedPeriodScoreChanged_threaded()
{
	Signal( uiGlobal.signalDummy, "Ranked_NotifyRankedPeriodScoreChanged" )                                                                
	EndSignal( uiGlobal.signalDummy, "Ranked_NotifyRankedPeriodScoreChanged" )

	WaitEndFrame()
	thread TryRunDialogFlowThread()
}


bool function Ranked_HasNotifiedRankedRewardsGiven( string rankedPeriodGUID )
{
	return (rankedPeriodGUID in file.rankedPeriodsWithRewardsNotified)
}


void function Ranked_MarkRankedRewardsGivenNotified( string rankedPeriodGUID )
                                                                                                                                                                  
{
	if ( rankedPeriodGUID in file.rankedPeriodsWithRewardsNotified )
		return

	file.rankedPeriodsWithRewardsNotified[ rankedPeriodGUID  ] <- true
}


void function Ranked_ConstructSingleRankBadgeForStatsCard( var badgeRui, entity player, string rankedPeriodRef )
{
	int score                     = Ranked_GetHistoricalRankScore( player, rankedPeriodRef )
	SharedRankedDivisionData data = Ranked_GetHistoricalRankedDivisionFromScore( score, rankedPeriodRef )

	if ( rankedPeriodRef == GetCurrentStatRankedPeriodRefOrNullByType( eItemType.calevent_rankedperiod ) )
	{
		PopulateRuiWithRankedBadgeDetails( badgeRui, score, Ranked_GetLadderPosition( GetLocalClientPlayer() ) )
	}
	else
	{
		int historicalLadderPosition = Ranked_GetHistoricalLadderPosition( player, rankedPeriodRef, false )
		PopulateRuiWithHistoricalRankedBadgeDetails( badgeRui, score, historicalLadderPosition, rankedPeriodRef )
	}

	RuiSetInt( badgeRui, "score", score )
	RuiSetInt( badgeRui, "scoreMax", 0 )
	RuiSetFloat( badgeRui, "scoreFrac", 1.0 )
	RuiSetString( badgeRui, "rankName", data.divisionName )
}


void function Ranked_ConstructDoubleRankBadgeForStatsCard( var firstSplitBadgeRui, var secondSplitBadgeRui, entity player, string rankedPeriodRef )
{
	int firstSplitScore                        = Ranked_GetHistoricalFirstSplitRankScore( player, rankedPeriodRef )
	SharedRankedDivisionData firstSplitDivData = Ranked_GetHistoricalRankedDivisionFromScore( firstSplitScore, rankedPeriodRef )
	int firstSplitLadderPos                    = Ranked_GetHistoricalLadderPosition( player, rankedPeriodRef, true )

	PopulateRuiWithHistoricalRankedBadgeDetails( firstSplitBadgeRui, firstSplitScore, firstSplitLadderPos, rankedPeriodRef )
	RuiSetInt( firstSplitBadgeRui, "score", firstSplitScore )
	RuiSetInt( firstSplitBadgeRui, "scoreMax", 0 )
	RuiSetFloat( firstSplitBadgeRui, "scoreFrac", 1.0 )
	RuiSetString( firstSplitBadgeRui, "rankName", firstSplitDivData.divisionName )

	int secondSplitSplitScore                   = Ranked_GetHistoricalRankScore( player, rankedPeriodRef )
	SharedRankedDivisionData secondSplitDivData = Ranked_GetHistoricalRankedDivisionFromScore( secondSplitSplitScore, rankedPeriodRef )

	if ( rankedPeriodRef == GetCurrentStatRankedPeriodRefOrNullByType( eItemType.calevent_rankedperiod ) )
	{
		PopulateRuiWithRankedBadgeDetails( secondSplitBadgeRui, secondSplitSplitScore, Ranked_GetLadderPosition( GetLocalClientPlayer() ) )
	}
	else
	{
		int historicalLadderPosition = Ranked_GetHistoricalLadderPosition( player, rankedPeriodRef, false )
		PopulateRuiWithHistoricalRankedBadgeDetails( secondSplitBadgeRui, secondSplitSplitScore, historicalLadderPosition, rankedPeriodRef )
	}

	RuiSetInt( secondSplitBadgeRui, "score", secondSplitSplitScore )
	RuiSetInt( secondSplitBadgeRui, "scoreMax", 0 )
	RuiSetFloat( secondSplitBadgeRui, "scoreFrac", 1.0 )
	RuiSetString( secondSplitBadgeRui, "rankName", secondSplitDivData.divisionName )
}
#endif     


#if CLIENT || UI
void function PopulateRuiWithRankedBadgeDetails( var rui, int rankScore, int ladderPosition, bool isNested = false )
{
	SharedRankedDivisionData currentRank = GetCurrentRankedDivisionFromScoreAndLadderPosition( rankScore, ladderPosition )
	                                                       
	SharedRankedTierData currentTier     = currentRank.tier
	RuiSetImage( rui, "rankedIcon", currentTier.icon )
	if ( currentTier.isLadderOnlyTier )                                                      
	{
		SharedRankedTierData tierByScore = GetCurrentRankedDivisionFromScore( rankScore ).tier
		RuiSetInt( rui, "rankedIconState", tierByScore.index + 1 )
	}
	else
	{
		RuiSetInt( rui, "rankedIconState", currentTier.index )
	}

	SharedRanked_FillInRuiEmblemText( rui, currentRank, rankScore, ladderPosition )

	if ( !isNested )
	{
		RuiDestroyNestedIfAlive( rui, "rankedBadgeHandle" )
		CreateNestedRankedRui( rui, currentRank.tier, "rankedBadgeHandle", rankScore, ladderPosition )
	}
}

void function PopulateRuiWithPreviousSeasonRankedBadgeDetails( var rui, int rankScore, int ladderPosition, bool isNested = false )
{
	SharedRankedDivisionData currentRank = GetCurrentRankedDivisionFromScoreAndLadderPosition( rankScore, ladderPosition )
	                                                       
	SharedRankedTierData currentTier     = currentRank.tier
	RuiSetImage( rui, "rankedIconPrev", currentTier.icon )
	if ( currentTier.isLadderOnlyTier )                                                      
	{
		SharedRankedTierData tierByScore = GetCurrentRankedDivisionFromScore( rankScore ).tier
		RuiSetInt( rui, "rankedIconStatePrev", tierByScore.index + 1 )
	}
	else
	{
		RuiSetInt( rui, "rankedIconStatePrev", currentTier.index )
	}

	SharedRanked_FillInRuiEmblemText( rui, currentRank, rankScore, ladderPosition, "Prev" )

	if ( !isNested )
	{
		RuiDestroyNestedIfAlive( rui, "rankedBadgeHandlePrev" )
		CreateNestedRankedRui( rui, currentRank.tier, "rankedBadgeHandlePrev", rankScore, ladderPosition )
	}
}


void function PopulateRuiWithHistoricalRankedBadgeDetails( var rui, int rankScore, int ladderPosition, string rankedSeasonGUID, bool isNested = false )
                                                             
{
	Assert( rankedSeasonGUID in file.historicalRankedDivisions )
	SharedRankedDivisionData historicalRank = Ranked_GetHistoricalRankedDivisionFromScoreAndLadderPosition( rankScore, ladderPosition, rankedSeasonGUID )
	SharedRankedTierData historicalTier     = historicalRank.tier
	RuiSetImage( rui, "rankedIcon", historicalTier.icon )
	                                                           

	if ( historicalTier.isLadderOnlyTier )                                                      
	{
		SharedRankedTierData tierByScore = Ranked_GetHistoricalRankedDivisionFromScore( rankScore, rankedSeasonGUID ).tier
		RuiSetInt( rui, "rankedIconState", tierByScore.index + 1 )
	}
	else
	{
		RuiSetInt( rui, "rankedIconState", historicalTier.index )
	}

	SharedRanked_FillInRuiEmblemText( rui, historicalRank, rankScore, ladderPosition )

	if ( !isNested )
	{
		RuiDestroyNestedIfAlive( rui, "rankedBadgeHandle" )
		CreateNestedHistoricalRankedRui( rui, historicalRank.tier, rankedSeasonGUID, "rankedBadgeHandle", rankScore, ladderPosition )
	}
}


var function CreateNestedRankedRui( var pRui, SharedRankedTierData tier, string varName, int score, int ladderPosition )
{
	var rui = RuiCreateNested( pRui, varName, tier.iconRuiAsset )

	PopulateRuiWithRankedBadgeDetails( rui, score, ladderPosition, true )

	return rui
}


var function CreateNestedHistoricalRankedRui( var pRui, SharedRankedTierData tier, string rankedSeasonGUID, string varName, int score, int ladderPosition )
{
	var rui = RuiCreateNested( pRui, varName, tier.iconRuiAsset )

	PopulateRuiWithHistoricalRankedBadgeDetails( rui, score, ladderPosition, rankedSeasonGUID, true )

	return rui
}


void function SharedRanked_FillInRuiEmblemText( var rui, SharedRankedDivisionData divData, int rankScore, int ladderPosition, string ruiArgumentPostFix = "" )
{
	RuiSetInt( rui, "emblemDisplayMode" + ruiArgumentPostFix, divData.emblemDisplayMode )
	switch( divData.emblemDisplayMode )
	{
		case emblemDisplayMode.DISPLAY_DIVISION:
		{
			RuiSetString( rui, "emblemText" + ruiArgumentPostFix, divData.emblemText )
			break
		}

		case emblemDisplayMode.DISPLAY_RP:
		{
			string rankScoreShortened = FormatAndLocalizeNumber( "1", float( rankScore ), IsTenThousandOrMore( rankScore ) )
			RuiSetString( rui, "emblemText" + ruiArgumentPostFix, Localize( "#RANKED_POINTS_GENERIC", rankScoreShortened ) )
			break
		}

		case emblemDisplayMode.DISPLAY_LADDER_POSITION:
		{
			string ladderPosShortened
			if ( ladderPosition == SHARED_RANKED_INVALID_LADDER_POSITION )
				ladderPosShortened = ""
			else
				ladderPosShortened = Localize( "#RANKED_LADDER_POSITION_DISPLAY", FormatAndLocalizeNumber( "1", float( ladderPosition ), IsTenThousandOrMore( ladderPosition ) ) )

			RuiSetString( rui, "emblemText" + ruiArgumentPostFix, ladderPosShortened )
			break
		}

		case emblemDisplayMode.NONE:
		default:
		{
			RuiSetString( rui, "emblemText" + ruiArgumentPostFix, "" )
			break
		}
	}
}

#endif                

#if CLIENT && DEV
void function DEV_ForceClientError()
{
	thread Ranked_AssertFalse()
}

void function Ranked_AssertFalse()
{
	wait 2.0
	Assert( false )
}
#endif                
