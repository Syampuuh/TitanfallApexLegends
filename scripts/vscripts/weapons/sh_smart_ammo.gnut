untyped

global function SmartAmmo_Init

                                                      
  				                     				  
                                                      

                                           
global function SmartAmmo_FireWeapon

                                  
  	                         	  
  	                          	  
                                  

                            
global function SmartAmmo_SetAllowUnlockedFiring
global function SmartAmmo_SetAimAttachment				                                                 
global function SmartAmmo_SetMissileSpeed					                                                                 
global function SmartAmmo_SetMissileSpeedLimit		                                                                                              
global function SmartAmmo_SetMissileHomingSpeed		                                               
global function SmartAmmo_SetMissileShouldDropKick
global function SmartAmmo_SetUnlockAfterBurst			                                                                                   
global function SmartAmmo_SetMissileAimAtCursor				                                                                                                                             
global function SmartAmmo_SetWarningIndicatorDelay
global function SmartAmmo_SetDisplayKeybinding
global function SmartAmmo_SetExpandContract
global function SmartAmmo_EntHasEnoughTrackedMarks
global function SmartAmmo_SetShouldTrackPosition

                                                      
  				                         			  
  	                                               	  
                                                      
global function SmartAmmo_GetUseAltAmmoFunc
global function SmartAmmo_GetAllowUnlockedFiring
global function SmartAmmo_SetWeaponFireFailedTime
global function SmartAmmo_GetWeaponFireFailedTime
global function SmartAmmo_GetAimAttachment
global function SmartAmmo_GetMissileSpeed
global function SmartAmmo_GetMissileSpeedLimit
global function SmartAmmo_GetMissileHomingSpeed
global function SmartAmmo_GetMissileShouldDropKick
global function SmartAmmo_GetUnlockAfterBurst
global function SmartAmmo_GetMissileAimAtCursor
global function SmartAmmo_GetWarningIndicatorDelay
global function SmartAmmo_GetDisplayKeybinding
global function SmartAmmo_GetExpandContract
global function SmartAmmo_GetShouldTrackPosition

global function SmartAmmo_SetMissileTarget
global function SmartAmmo_TransferMissileLockons
global function SmartAmmo_CanWeaponBeFired

global function SmartAmmo_WeaponRequiresTrackedMarks
global function SmartAmmo_GetWeaponTargets

#if CLIENT
  	                                                          
#endif

global const SMART_AMMO_DEFAULT_AIM_ATTACHMENT = "CHESTFOCUS"
global const SMART_AMMO_AI_AIM_ATTACHMENT = "HEADSHOT"
global const SMART_AMMO_GRENADE_AIM_ATTACHMENT = "LIGHT"                                                             
global const TARGET_SET_FRACTION = 0.0001                                                                
global const HOMING_SFX_LOOP	= "Weapon_Sidwinder_Projectile"
global const SMART_AMMO_PLAYER_MAX_LOCKS			= 3

typedef FireWeaponCallback int functionref( entity, WeaponPrimaryAttackParams, int, int, bool, entity )
FireWeaponCallback function GetFireWeaponCallbackForWeaponType( int wt )
{
	switch( wt )
	{
		case eSmartAmmoWeaponType.homingMissile:
			return SmartAmmo_FireWeapon_HomingMissile
		case eSmartAmmoWeaponType.bullet:
			return SmartAmmo_FireWeapon_Bullet
	}

	Assert( false, "Unhandled eSmartAmmoWeaponType: #" + wt )
	return SmartAmmo_FireWeapon_Bullet
}

void function SmartAmmo_Init()
{
#if SERVER
#endif
}

                                            
   	                                        
                                            

int function SmartAmmo_FireWeapon( entity weapon, WeaponPrimaryAttackParams attackParams, int damageType, int explosionDamageType )
{
	if ( !IsValid( weapon ) )
		return 0

	if ( !weapon.SmartAmmo_IsEnabled() )
	{
		if ( !SmartAmmo_GetAllowUnlockedFiring( weapon ) )
		{
			SmartAmmo_SetWeaponFireFailedTime( weapon )
			return 0
		}
	}

	#if CLIENT
		if ( IsWatchingReplay() )
			return 0                                                                                          
	#endif

	array<entity> storedTargets = weapon.SmartAmmo_GetStoredTargets()
	bool weaponRequiresTrackedMarks = SmartAmmo_WeaponRequiresTrackedMarks( weapon )
	if ( weaponRequiresTrackedMarks )
		RemovePartiallyTrackedEnts( weapon, storedTargets )
	array< SmartAmmoTarget > targets = weapon.SmartAmmo_GetTargets()
	                                                  
	table targetFracs
	table targetActiveShots

	foreach ( target in targets )
	{
		if ( target.fraction < 1.0 )
			continue

		targetFracs[target.ent] <- target.fraction
		targetActiveShots[target.ent] <- target.activeShot
	}

	if ( attackParams.burstIndex == 0 )
	{
		                                                                                                                                     
		                                                                                                                                             
		                                                                                                                                                
		                                     

		weapon.SmartAmmo_StoreTargets()
		                                                                           
		                                                   
		storedTargets = weapon.SmartAmmo_GetStoredTargets()
		if ( weaponRequiresTrackedMarks )
			RemovePartiallyTrackedEnts( weapon, storedTargets )
		                                                                  
		int maxTargetedBurst = SmartAmmo_GetMaxTargetedBurst( weapon )

		bool alwaysDoBurst = weapon.GetWeaponSettingBool( eWeaponVar.smart_ammo_always_do_burst )
		int burstCount = 0
		if ( weapon.GetWeaponSettingBool( eWeaponVar.smart_ammo_alt_lock_style ) )
		{
			float chargeFrac = 1 - weapon.GetWeaponChargeFraction()
			float shotFrac = 1 / float( maxTargetedBurst )

			if ( chargeFrac < shotFrac )
				return 0
		}

		foreach ( target in storedTargets )
		{
			Assert( target in targetFracs )

			burstCount += int( floor( targetFracs[target] ) )
		}

		if ( alwaysDoBurst )
			burstCount = maxTargetedBurst

		burstCount = minint( maxTargetedBurst, burstCount )

		if ( weapon.GetWeaponInfoFileKeyField( "smart_ammo_doBurstPerTarget" ) == 1 )
			burstCount *= storedTargets.len()

		if ( burstCount <= 0 )
			burstCount = 0

		weapon.SetWeaponBurstFireCount( burstCount )
	}

	                                                                
	if ( storedTargets.len() == 0 && !SmartAmmo_GetAllowUnlockedFiring( weapon ) )
	{
		SmartAmmo_SetWeaponFireFailedTime( weapon )
		return 0
	}

	array<entity> expandedStoredTargets = []

	foreach ( target in storedTargets )
	{
		int burstCount

		if ( target in targetFracs )
			burstCount = int( floor( targetFracs[target] ) )
		else
			burstCount = 1

		for ( int index = 0; index < burstCount; index++ )
		{
			expandedStoredTargets.append( target )
		}
	}

	                                                         
	entity target = null
	if ( expandedStoredTargets.len() > 0 )
	{
		int index = attackParams.burstIndex % expandedStoredTargets.len()
		target = expandedStoredTargets[index]
	}

	                                                                         
	if ( target != null && !IsValid( target ) )
		return 0

	bool activeShot = false
	if ( target in targetActiveShots )
	{
		if ( targetActiveShots[target] )
		{
			activeShot = true
			damageType = damageType | DF_HEADSHOT
			explosionDamageType = explosionDamageType | DF_HEADSHOT
		}
	}

	                  
	FireWeaponCallback fireWeapFunc = GetFireWeaponCallbackForWeaponType( weapon.GetWeaponSettingEnum( eWeaponVar.smart_ammo_weapon_type, eSmartAmmoWeaponType ) )
	int shotsFired = fireWeapFunc( weapon, attackParams, damageType, explosionDamageType, activeShot, target )
	bool isLastShot = (attackParams.burstIndex + 1 == weapon.GetWeaponBurstFireCount())
	if ( isLastShot )
	{
		if ( weaponRequiresTrackedMarks )
		{
			foreach ( storedTarget in storedTargets )
			{
				weapon.SmartAmmo_UntrackEntity( storedTarget )
			}
		}

		if ( SmartAmmo_GetUnlockAfterBurst( weapon ) )
		{
			weapon.SmartAmmo_Clear( true, false )
		}
	}

	return shotsFired
}

int function SmartAmmo_FireWeapon_Bullet( entity weapon, WeaponPrimaryAttackParams attackParams, int damageType, int explosionDamageType, bool activeShot, entity target )
{
	if ( target )
	{
		                                
		Assert( IsValid( target ) )
		vector dir = weapon.SmartAmmo_GetFirePosition( target, attackParams.burstIndex ) - attackParams.pos

		WeaponFireBulletSpecialParams fireBulletParams
		fireBulletParams.pos = attackParams.pos
		fireBulletParams.dir = dir
		fireBulletParams.bulletCount = 1
		fireBulletParams.scriptDamageType = damageType
		fireBulletParams.skipAntiLag = true
		fireBulletParams.dontApplySpread = false
		fireBulletParams.doDryFire = false
		fireBulletParams.noImpact = false
		fireBulletParams.noTracer = false
		fireBulletParams.activeShot = activeShot
		fireBulletParams.doTraceBrushOnly = false
		weapon.FireWeaponBullet_Special( fireBulletParams )
	}
	else
	{
		                                                          
		weapon.FireWeaponBullet( attackParams.pos, attackParams.dir, 1, damageType )
	}

	return 1
}

int function SmartAmmo_FireWeapon_HomingMissile( entity weapon, WeaponPrimaryAttackParams attackParams, int damageType, int explosionDamageType, bool activeShot, entity target )
{
	Assert( false )
	return 0
	                                                        
	  
	            
	  	                     
	  		        
	        
	  
	                                         
	                                     
	                                     
	                                                          
	                                                             
	  
	                                                  
	  	                                                                 
	  
	                                                               
	                                                                    
	  
	                             
	                                                                 
	  
	                                  
	   
	  	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
	   
	      
	   
	  	                                         
	  	                                 
	  	                                 
	  	                                      
	  	                                                    
	  	                                                                 
	  	                                                     
	  	                                                 
	  	                                                              
	  	              
	  	 
	  		                                                            
	  		                                                                           
	  		                               
	  	 
	   
	  
	                                      
	   
	  	                        
	  
	  	          
	  		                          
	  		                                             
	  	      
	  
	  	                                          
	  	                                                   
	  	                                    
	  
	  	             
	  	 
	  		                                                 
	  			                                                     
	  		    
	  			                                             
	  	 
	  
	  	                                       
	  		                                                     
	   
	  
	                            
}

                                            
   	                                        
                                            

void function SmartAmmo_SetWeaponSettingOverride( entity weapon, string setting, value )
{
	if ( !( setting in weapon.s ) )
		weapon.s[ setting ] <- null
	weapon.s[ setting ] = value
}

function SmartAmmo_GetWeaponSettingOverride( entity weapon, string setting, defaultValue = null )
{
	if ( setting in weapon.s )
		return weapon.s[ setting ]
	return defaultValue
}

function SmartAmmo_GetUseAltAmmoFunc( entity weapon )
{
	return SmartAmmo_GetWeaponSettingOverride( weapon, "useAltAmmoFunc" )
}

void function SmartAmmo_SetWarningIndicatorDelay( entity weapon, float warningIndicatorDelay )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "warningIndicatorDelay", warningIndicatorDelay )
}

float function SmartAmmo_GetWarningIndicatorDelay( entity weapon )
{
	return expect float( SmartAmmo_GetWeaponSettingOverride( weapon, "warningIndicatorDelay", 0.0 ) )
}

void function SmartAmmo_SetAllowUnlockedFiring( entity weapon, bool allow = true )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "allowUnlockedFiring", allow )
}

bool function SmartAmmo_GetAllowUnlockedFiring( entity weapon )
{
	return expect bool( SmartAmmo_GetWeaponSettingOverride( weapon, "allowUnlockedFiring", false ) )
}

void function SmartAmmo_SetWeaponFireFailedTime( entity weapon )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "lastFireWeaponFailTime", Time() )
}

function SmartAmmo_GetWeaponFireFailedTime( entity weapon )
{
	if ( !( "lastFireWeaponFailTime" in weapon.s ) )
		weapon.s.lastFireWeaponFailTime <- -1
	return Time() - weapon.s.lastFireWeaponFailTime
}

void function SmartAmmo_SetAimAttachment( entity weapon, string targetAttachment )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "targetAttachment", targetAttachment )
}

string function SmartAmmo_GetAimAttachment( entity weapon, entity ent )
{
	string attachName

	if ( ent.IsPlayer())
		attachName = SMART_AMMO_DEFAULT_AIM_ATTACHMENT
	else if ( ent.GetNetworkedClassName() == "grenade_frag" )
		attachName = SMART_AMMO_GRENADE_AIM_ATTACHMENT
	else
		attachName = SMART_AMMO_AI_AIM_ATTACHMENT

	return expect string( SmartAmmo_GetWeaponSettingOverride( weapon, "targetAttachment", attachName ) )
}

void function SmartAmmo_SetShouldTrackPosition( entity weapon, bool shouldTrackPosition )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "shouldTrackPosition", shouldTrackPosition )
}

bool function SmartAmmo_GetShouldTrackPosition( entity weapon )
{
	return expect bool( SmartAmmo_GetWeaponSettingOverride( weapon, "shouldTrackPosition", false ) )
}

void function SmartAmmo_SetMissileSpeed( entity weapon, float missileSpeed )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "missileSpeed", missileSpeed )
}

float function SmartAmmo_GetMissileSpeed( entity weapon )
{
	return expect float( SmartAmmo_GetWeaponSettingOverride( weapon, "missileSpeed", 2500.0 ) )
}

void function SmartAmmo_SetMissileHomingSpeed( entity weapon, missileHomingSpeed )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "missileHomingSpeed", missileHomingSpeed )
}

function SmartAmmo_GetMissileHomingSpeed( entity weapon )
{
	return SmartAmmo_GetWeaponSettingOverride( weapon, "missileHomingSpeed", 300 )
}

void function SmartAmmo_SetMissileShouldDropKick( entity weapon, bool doDropKick = false )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "missilesShouldDropKick", doDropKick )
}

bool function SmartAmmo_GetMissileShouldDropKick( entity weapon )
{
	return expect bool( SmartAmmo_GetWeaponSettingOverride( weapon, "missilesShouldDropKick", false ) )
}

void function SmartAmmo_SetMissileSpeedLimit( entity weapon, missileSpeedLimit = 0 )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "missileSpeedLimit", missileSpeedLimit )
}

function SmartAmmo_GetMissileSpeedLimit( entity weapon )
{
	return SmartAmmo_GetWeaponSettingOverride( weapon, "missileSpeedLimit", 0 )
}

void function SmartAmmo_SetUnlockAfterBurst( entity weapon, bool unlockAfterBurst )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "unlockAfterBurst", unlockAfterBurst )
}

bool function SmartAmmo_GetUnlockAfterBurst( entity weapon )
{
	return expect bool( SmartAmmo_GetWeaponSettingOverride( weapon, "unlockAfterBurst", false ) )
}

void function SmartAmmo_SetMissileAimAtCursor( entity weapon, bool aimAtCenter )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "aimAtCenter", aimAtCenter )
}

bool function SmartAmmo_GetMissileAimAtCursor( entity weapon )
{
	return expect bool( SmartAmmo_GetWeaponSettingOverride( weapon, "aimAtCenter", false ) )
}

void function SmartAmmo_SetDisplayKeybinding( entity weapon, bool displayKeybinding )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "displayKeybinding", displayKeybinding )
}

function SmartAmmo_GetDisplayKeybinding( entity weapon )
{
	return SmartAmmo_GetWeaponSettingOverride( weapon, "displayKeybinding", true )
}

void function SmartAmmo_SetExpandContract( entity weapon, int numRocketsPerShot, bool applyRandSpread, launchOutAng, float launchOutTime, float launchInLerpTime, launchInAng, float launchInTime, float launchStraightLerpTime )
{
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_numRocketsPerShot", numRocketsPerShot )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_applyRandSpread", applyRandSpread )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchOutAng", launchOutAng )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchOutTime", launchOutTime )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchInLerpTime", launchInLerpTime )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchInAng", launchInAng )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchInTime", launchInTime )
	SmartAmmo_SetWeaponSettingOverride( weapon, "exmissile_launchStraightLerpTime", launchStraightLerpTime )
}

table function SmartAmmo_GetExpandContract( entity weapon )
{
	table data
	data.numRocketsPerShot <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_numRocketsPerShot" )
	data.applyRandSpread <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_applyRandSpread" )
	data.launchOutAng <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchOutAng" )
	data.launchOutTime <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchOutTime" )
	data.launchInLerpTime <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchInLerpTime" )
	data.launchInAng <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchInAng" )
	data.launchInTime <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchInTime" )
	data.launchStraightLerpTime <- SmartAmmo_GetWeaponSettingOverride( weapon, "exmissile_launchStraightLerpTime" )
	data.isValid <- true

	foreach ( k, v in data )
	{
		if ( v == null )
		{
			data.isValid = false
			break
		}
	}

	return data
}

                                 
   	                             
                                 

void function SmartAmmo_SetMissileTarget( entity missile, entity target )
{
	if ( !IsValid( missile ) || !IsValid( target ) )
		return

	                                 
	                                                                      

	                                          
	missile.SetMissileTarget( target, <0,0,0> )
}

void function SmartAmmo_SetMissileTargetPosition( entity missile, entity target )
{
	if ( !IsValid( missile ) || !IsValid( target ) )
		return

	                                 
	                                                                      

	                                          
	missile.SetMissileTargetPosition( target.EyePosition() )
}

void function SmartAmmo_TransferMissileLockons( entity soul, entity titan, entity oldTitan )
{
	if ( !IsValid( oldTitan ) || !IsValid( titan ) )
		return

	array<entity> missiles = GetProjectileArray()
	foreach ( missile in missiles )
	{
		if ( missile.GetNetworkedClassName() != "rpg_missile" )
			continue
		if ( !( "GetMissileTarget" in missile ) )
			continue
		if ( missile.GetMissileTarget() == oldTitan )
			SmartAmmo_SetMissileTarget( missile, titan )
	}
}

bool function SmartAmmo_CanWeaponBeFired( entity weapon )
{
	Assert( weapon.SmartAmmo_IsEnabled() )

	if ( !weapon.IsReadyToFire() || weapon.IsReloading() )
		return false

	                                                                                     
	                                                                                         
	if ( SmartAmmo_GetAllowUnlockedFiring( weapon ) == true )
		return true

	array< SmartAmmoTarget > targets = weapon.SmartAmmo_GetTargets()
	float highestFraction = 0

	bool weaponRequiresTrackedMarks = SmartAmmo_WeaponRequiresTrackedMarks( weapon )

	foreach ( target in targets )
	{
		if ( weaponRequiresTrackedMarks && !SmartAmmo_EntHasEnoughTrackedMarks( weapon, target.ent ) )
			continue

		if ( target.fraction > highestFraction )
			highestFraction = target.fraction
	}

	return highestFraction == 1.0
}

                           
   	                       
                           

#if CLIENT
  
                                                                                                       
 
 
  
#endif          

#if SERVER
                                                                          
 
	                      
		      

	                                  
	                                                 

	                       
	 
		                                                       
	 
	                          
	 
		                         
			                                             
	 
 
#endif          

void function RemovePartiallyTrackedEnts( entity weapon, array<entity> targets )
{
	for ( int i = targets.len() - 1; i >= 0; i-- )
	{
		if ( !SmartAmmo_EntHasEnoughTrackedMarks( weapon, targets[i] ) )
			targets.remove( i )
	}
}

bool function SmartAmmo_WeaponRequiresTrackedMarks( entity weapon )
{
	return weapon.GetWeaponSettingInt( eWeaponVar.smart_ammo_max_trackers_per_target ) > 1
}

bool function SmartAmmo_EntHasEnoughTrackedMarks( entity weapon, entity target )
{
	int numTrackers = weapon.SmartAmmo_GetNumTrackersOnEntity( target )
	int maxTrackers
	if ( target.IsTitan() )
		maxTrackers = GetMaxTrackerCountForTitan( target )
	else
		maxTrackers = weapon.GetWeaponSettingInt( eWeaponVar.smart_ammo_max_trackers_per_target )

	return numTrackers >= maxTrackers
}

array<entity> function SmartAmmo_GetWeaponTargets( entity weapon )
{
	array< SmartAmmoTarget > targets = weapon.SmartAmmo_GetTargets()
	array<entity> validTargets = []

	foreach ( target in targets )
	{
		if ( target.fraction < 1.0 )
			continue

		entity ent = target.ent
		validTargets.append( ent )
	}

	return validTargets
}