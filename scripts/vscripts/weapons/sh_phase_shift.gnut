  
global function MpAbilityShifter_Init
global function PhaseShift
global function CodeCallback_EnterPhaseShift
global function CodeCallback_ExitPhaseShift
global function CancelPhaseShift

#if SERVER
                                      
                                         
                                   
#endif

const SHIFTER_OUTRO_TIME_BEFORE_END = 1.5

const SHIFTER_PRE_FX = $"P_warpjump_FP"

const SHIFTER_APPEAR_FX = $"P_phase_dash_end_fp"
const SHIFTER_APPEAR_FX_TITAN = $"P_phase_shift_main_XO"
const SHIFTER_DISAPPEAR_FX = $"P_phase_shift_main"
const SHIFTER_LOOP_FX = $"P_phase_shift_main"
const SHIFTER_DISAPPEAR_FX_TITAN = $"P_phase_shift_main_XO"

const SHIFTER_DASH_APPEAR_FX = $"P_phase_dash_end"
const SHIFTER_DASH_DISAPPEAR_FX = $"P_phase_dash_start"
const SHIFTER_DASH_DISAPPEAR_ON_WRAITH_FX = $"P_phase_dash_start_mdl"

const string SHIFTER_MOVER_SCRIPTNAME = "phaseshift_mover"

                  
const SHIFTER_GATE_DISAPPEAR_FX = $"P_wrth_tt_dash_3P"
      

const SHIFTER_SCREEN_FX = $"P_phase_shift_screen"
const SHIFTER_PERSONAL_FX = $"P_phase_shift_player"
const SHIFTER_SCREEN_FX_START = $"P_phase_shift_screen_start"
const SHIFTER_COLORCORRECTION = "materials/correction/fx_phase_shift.raw_hdr"

const SHIFTER_PRE_SOUND_1P 			= "Pilot_PhaseShift_PreActivate_1P"
const SHIFTER_PRE_SOUND_3P 			= "Pilot_PhaseShift_PreActivate_3P"
global const SHIFTER_START_SOUND_1P = "Pilot_PhaseShift_Activate_1P"
global const SHIFTER_START_SOUND_3P = "Pilot_PhaseShift_Activate_3P"
const SHIFTER_LOOP_SOUND_1P 		= "Pilot_PhaseShift_Loop_1P"
const SHIFTER_LOOP_SOUND_3P 		= "Pilot_PhaseShift_Loop_3P"
const SHIFTER_PRE_END_SOUND_1P 		= "Pilot_PhaseShift_WarningToEnd_1P"
const SHIFTER_PRE_END_SOUND_3P 		= "Pilot_PhaseShift_WarningToEnd_3P"
global const SHIFTER_END_SOUND_1P 	= "Pilot_PhaseShift_End_1P"
global const SHIFTER_END_SOUND_3P 	= "Pilot_PhaseShift_End_3P"
                                                                       
const SHIFTER_START_SOUND_3P_BREACH   = "Ash_PhaseBreach_PortalOpen_Enter_3p"
const SHIFTER_LOOP_SOUND_1P_BREACH    = "Ash_PhaseBreach_loop_1p"
const SHIFTER_LOOP_SOUND_3P_BREACH    = "Ash_PhaseBreach_loop_3p"
const SHIFTER_PRE_END_SOUND_1P_BREACH = "Ash_PhaseBreach_warningtoend_1p"
const SHIFTER_PRE_END_SOUND_3P_BREACH = "Ash_PhaseBreach_warningtoend_3p"
const SHIFTER_END_SOUND_1P_BREACH 	  = "Ash_PhaseBreach_End_1p"
const SHIFTER_END_SOUND_3P_BREACH     = "Ash_PhaseBreach_End_3p"

const GATE_PRE_SOUND_1P 			= "Olympus_phaseshift_preactivate_1p"
const GATE_PRE_SOUND_3P 			= "Olympus_phaseshift_preactivate_3p"
global const GATE_START_SOUND_1P 	= "Olympus_phaseshift_activate_1p"
global const GATE_START_SOUND_3P 	= "Olympus_phaseshift_activate_3p"
const GATE_LOOP_SOUND_1P 			= "Olympus_phaseshift_loop_1p"
const GATE_LOOP_SOUND_3P 			= "Olympus_phaseshift_loop_3p"
const GATE_PRE_END_SOUND_1P 		= "Olympus_phaseshift_warningtoend_1p"
const GATE_PRE_END_SOUND_3P 		= "Olympus_phaseshift_warningtoend_3p"
global const GATE_END_SOUND_1P 		= "Olympus_phaseshift_end_1p"
global const GATE_END_SOUND_3P 		= "Olympus_phaseshift_end_3p"

const SHIFTER_PRE_SOUND_1P_TITAN = "Pilot_PhaseShift_PreActivate_1P"
const SHIFTER_PRE_SOUND_3P_TITAN = "Pilot_PhaseShift_PreActivate_3P"
global const SHIFTER_START_SOUND_1P_TITAN = "titan_phasedash_activate_1p"
global const SHIFTER_START_SOUND_3P_TITAN = "titan_phasedash_activate_3p"
const SHIFTER_LOOP_SOUND_1P_TITAN = "titan_phasedash_loop_1p"
const SHIFTER_LOOP_SOUND_3P_TITAN = "titan_phasedash_loop_3p"
const SHIFTER_PRE_END_SOUND_1P_TITAN = "titan_phasedash_warningtoend_1p"
const SHIFTER_PRE_END_SOUND_3P_TITAN = "titan_phasedash_warningtoend_3p"
global const SHIFTER_END_SOUND_1P_TITAN = "titan_phasedash_end_1p"
global const SHIFTER_END_SOUND_3P_TITAN = "titan_phasedash_end_3p"

global const RECONSTRUCT_REWIND_TICK = 0.1
global const RECONSTRUCT_REWIND_COUNT = 100
global const RECONSTRUCT_END_HOLD_TIME = 0.1

const int TELEFRAG_DAMAGE = 5000

struct
{
} file

void function CodeCallback_EnterPhaseShift( entity ent )
{
	PhaseShift( ent, 0.0, 999.0 )
}


void function CodeCallback_ExitPhaseShift( entity ent )
{
	#if SERVER
		                       
	#endif
}


void function CancelPhaseShift( entity ent )
{
	ent.PhaseShiftCancel()

	#if SERVER
		                        
		                                                
		 
			                                  
		 

		                         

		                                   
		                                                                 
		                                             
	#endif   
}


void function MpAbilityShifter_Init()
{
	#if CLIENT
		                                                                                  

		ColorCorrection_RegisterPhaseShift( SHIFTER_COLORCORRECTION )
		thread ClientPhaseShiftFirstPersonFXThread()

		                                                 
	#endif              

	PrecacheParticleSystem( SHIFTER_PRE_FX )
	PrecacheParticleSystem( SHIFTER_APPEAR_FX )
	PrecacheParticleSystem( SHIFTER_APPEAR_FX_TITAN )
	PrecacheParticleSystem( SHIFTER_DISAPPEAR_FX )
	PrecacheParticleSystem( SHIFTER_LOOP_FX )
	PrecacheParticleSystem( SHIFTER_DISAPPEAR_FX_TITAN )
	PrecacheParticleSystem( SHIFTER_PERSONAL_FX )
	PrecacheParticleSystem( SHIFTER_SCREEN_FX )
	PrecacheParticleSystem( SHIFTER_SCREEN_FX_START )
	PrecacheParticleSystem( SHIFTER_DASH_APPEAR_FX )
	PrecacheParticleSystem( SHIFTER_DASH_DISAPPEAR_FX )
	PrecacheParticleSystem( SHIFTER_DASH_DISAPPEAR_ON_WRAITH_FX )

                  
	PrecacheParticleSystem( SHIFTER_GATE_DISAPPEAR_FX )
      

	MpAbilityPhaseWalk_Init()

	RegisterSignal( "StartPhaseShift" )
	RegisterSignal( "StopPhaseShift" )
	RegisterSignal( "ForceStopPhaseShift" )
	RegisterSignal( "PlayPhaseReflexLoopFX" )
	RegisterSignal( "StartTrackingPositions" )
	RegisterSignal( "EndTrackingPositions" )
	RegisterSignal( "PhaseRewindCrouchPlayer" )
	RegisterSignal( "PhaseRewindStop" )

	#if SERVER
		                                                              
		                                                                                
		                                                                           
		                                                                            
	#endif
}

int function PhaseShift( entity ent, float warmupTime, float duration, int shiftStyle = PHASETYPE_DEFAULT, bool fxOnly = false )
{
	if ( !IsAlive( ent ) )
		return 0

	if ( ent.IsPhaseShifted() )
		return 0
	
	                                          
	                                                                     
	if ( ent.IsPlayer() )
	{
		entity proxy = ent.GetFirstPersonProxy()
		if ( ( ent.ContextAction_IsActive() || (proxy != null && proxy.Anim_IsActive()) )
			&& !ent.IsZiplining()
			&& !ent.ContextAction_IsLeeching()
			&& !ent.ContextAction_IsInVehicle()
			&& !HoverVehicle_IsPlayerInAnyVehicle( ent )
			&& !Crafting_IsPlayerAtWorkbench( ent )
			&& !( IsEntNewcastleReviver( ent ) )
			&& !( IsEntNewcastleReviveTarget( ent ) ) )
		{
			return 0
		}

		switch ( shiftStyle )
		{
			case PHASETYPE_BALANCE:
				ent.SetSeeOtherNonShifters( true )
				StatusEffect_AddTimed( ent, eStatusEffect.speed_boost, 0.05, duration, 0.25 )
				break
                  
			case PHASETYPE_GATE:
      
			case PHASETYPE_BREACH:
			case PHASETYPE_TUNNEL:
				ent.SetSeeOtherNonShifters( false )
				StatusEffect_AddTimed( ent, eStatusEffect.speed_boost, 0.05, duration, 0.25 )
			break
			case PHASETYPE_DASH:
				#if SERVER
				                                   
				#endif
			default:
				ent.SetSeeOtherNonShifters( false )
				break
		}

		                                                                         
		if ( !fxOnly )
			ent.PhaseShiftBegin( warmupTime, duration , shiftStyle )

		#if SERVER
			                                                                            
		#else
			thread ClientPhaseShiftWarmupThread( ent, warmupTime, shiftStyle )
		#endif              

		return 1
	}
	else
	{
		                                                                         
		if ( !fxOnly )
			ent.PhaseShiftBegin( warmupTime, duration , shiftStyle)

		#if SERVER
			                                                                            
		#endif              

		return 1
	}

	unreachable
}

#if SERVER

                                                                                                           
 
	                          
	                                      

	                           

	                     
	 
		                     
		  	                                                                 

		                                        
		                    
			                                         

		                    
		 
			                          
		 
	 
	    
	 
		                    
			                          
		                                   
		                                   
			                                           
		    
			                                              
	 

	                                    

	            
		                                             
		 
			                     
			 
				                              
				           
				                              

				                                              
				                                               
				                                                      
				                                           
				                                            
				                                                    
				                                                     

				                            

				                     
				 
					                  
					                                     

					                                       
					 
						                                      
						                                         
						 
							                                                               
						 
					 

					                                        
					                    
						                                          
				 
				    
				 
					                                    
					                                    
				 

				                                                               
				                                
				 
					                                    
						                                                                                                                                                                                       
					    
						                                                                             
				 
			 
		 
	 

	               

	                                 

	                     
	 
		                      
		                       
		                      
			                                                                             
			                                                             
			                                                                          
			                                                             
			     
		                    
			                                                                             
			                                                             
			                                                                          
			                                                             
			     
                  
		                    
			                                                                             
			                                                             

			     
      
		        
			                                            
			                                                             
			     
	 

	                               
	                      
		                              
	              
	                       
	                           
	                                     

	                     
	 
		                   

		                               
		                    
		 
			                                                                         
			                                                                        
		 
		    
		 
			                                   
			 
				                                                                
				                                                               
			 
			                                          
			 
				                                                                                                  
				                                                                         
			 
			    
			 
				                                                                   
				                                                                  
			 
		 

		                                                                                                                                                             
		 
			                                      
		 

		                                                  
	 
	    
	 
		                    
		 
			                                                      
			                                                     
		 
		    
		 
			                                                
			                                               
		 
	 

	                          
	                            

	                                 
	 
		                                                                                          
		                   
	 

	                                                 
	 
		                                                

		                     
		 
			                    
			 
				                                                                         
				                                                                           
			 
			    
			 
				                                   
				 
					                                                                
					                                                                  
				 
				                                          
				 
					                                                                          
					                                                                            
				 
				    
				 
					                                                                   
					                                                                     
				 
			 
		 
		    
		 
			                    
				                                                        
			    
				                                                  
		 

		                                  
	 
	    
	 
		              
	 

	                     
	 
		                    
		                       
			                                                     
			     
		                      
			                                                                                                               
			     
		        
			                             
			     
	 

	                   
		                   
 

                                                
                                                                            
 
	                          
		           

	                                                                                 
 

                                                                                       
 
	                           
	                                      

	            
		                        
		 
			                    
			 
				                                                                  
				            
			 
			                                                         
			 
				                               
			 
		 
	 

	                           
	                    
		                

	                                      
 

                                                                                                                                          
 
	            
	                            
		                       
	                                
		                                
	    
		                          

	                     
	 
		                            
			                                                            
		                         
			                                                                       
		                                                                                  
			                                                              
		    
			                                                                 

		                            
			                                                          

		                                                                
	 
	    
	 
		                    
			                                                    
		    
			                                              
		                                    
	 

	           
 

                                                                                                                                                  
 
	                           
		                                    

	                                                
	                                                 

	             
	               
	 
		                                                                                                              
		                      
		                            
		                                     
		                                                                                                   
		                                                                                                                                      
		                           
		                                    
		                      
		                         
		                                
	 
	    
	 
		                                                                                                 
		                            
		                                     
	 
	             
 

  
                                         
 
	                             
	                                    

	           
	 
		                                   
		                     
		                                
		                              
		                            
		                         
		                       
		                                                
		           
	 
 
  

                                               
 
	                                                                   
	                                
	 
		                                                        
		                          
			      

		                                                                       
			        

		                                      
	 
 
#endif              


#if CLIENT
void function ClientPhaseShiftWarmupThread( entity player, float warmupTime, int shiftStyle = PHASETYPE_DEFAULT )
{
	player.EndSignal( "OnDeath" )

	if ( player != GetLocalViewPlayer() )
		return
	if ( InPrediction() && !IsFirstTimePredicted() )
		return

	if ( warmupTime <= 0 )
		return

	int index = GetParticleSystemIndex( SHIFTER_PRE_FX )
	int fxID  = StartParticleEffectInWorldWithHandle( index, ZERO_VECTOR, ZERO_VECTOR )

	OnThreadEnd(
		function() : ( fxID )
		{
			EffectStop( fxID, true, true )
		}
	)

	if ( player.IsTitan() )
	{
		EmitSoundOnEntity( player, SHIFTER_PRE_SOUND_1P_TITAN )
	}
	else
	{
		if ( shiftStyle == PHASETYPE_GATE )
			EmitSoundOnEntity( player, GATE_PRE_SOUND_1P )
		else
			EmitSoundOnEntity( player, SHIFTER_PRE_SOUND_1P )
	}

	wait warmupTime
}

void function ClientPhaseShiftFirstPersonFXThread()
{
	int effectSparkles
	int effectScreen
	bool effectsAreActive = false
	bool endSoundPlayed   = false
	entity ourPlayer      = null

	while ( true )
	{
		if ( effectsAreActive )
		{
			entity localViewPlayer = GetLocalViewPlayer()

			bool needShutdown = false
			if ( !IsValid( ourPlayer ) || !IsAlive( ourPlayer ) )
				needShutdown = true
			else if ( ourPlayer != localViewPlayer )
				needShutdown = true
			else if ( !ourPlayer.IsPhaseShifted() )
				needShutdown = true

			if ( needShutdown )
			{
				if ( IsValid( ourPlayer ) && (ourPlayer == localViewPlayer) )
				{
					     
					{
						int fxIndex = GetParticleSystemIndex( SHIFTER_SCREEN_FX_START )
						StartParticleEffectInWorldWithHandle( fxIndex, ZERO_VECTOR, ZERO_VECTOR )
					}

					     
					{
						int fxIndex          = GetParticleSystemIndex( SHIFTER_APPEAR_FX )
						vector viewAngles    = ourPlayer.EyeAngles()
						vector viewForward   = AnglesToForward( viewAngles )
						vector viewForward2d = Normalize( <viewForward.x, viewForward.y, 0> )
						StartParticleEffectOnEntityWithPos( ourPlayer, fxIndex, FX_PATTACH_ABSORIGIN, ATTACHMENTID_INVALID, (viewForward2d * 30), ZERO_VECTOR )
					}

					if ( ourPlayer.IsTitan() )
					{
						EmitSoundOnEntity( ourPlayer, SHIFTER_END_SOUND_1P_TITAN )
					}
					else if ( StatusEffect_GetSeverity( ourPlayer, eStatusEffect.phase_gate_tracking ) > 0 )
					{
						EmitSoundOnEntity( ourPlayer, GATE_END_SOUND_1P )
					}
					else
					{
						EmitSoundOnEntity( ourPlayer, SHIFTER_END_SOUND_1P )
					}

					StopSoundOnEntity( ourPlayer, GATE_LOOP_SOUND_1P )
					StopSoundOnEntity( ourPlayer, SHIFTER_LOOP_SOUND_1P )
					StopSoundOnEntity( ourPlayer, SHIFTER_LOOP_SOUND_1P_TITAN )
					StopSoundOnEntity( ourPlayer, SHIFTER_LOOP_SOUND_1P_BREACH )
				}

				ClientPhaseShift_SCRIPT_HACKS_OFF()

				EffectStop( effectSparkles, true, true )
				EffectStop( effectScreen, true, true )
				effectsAreActive = false
				ourPlayer = null
				endSoundPlayed = false

				Chroma_PhaseShiftEnding()
			}
		}

		if ( !effectsAreActive )
		{
			entity localViewPlayer = GetLocalViewPlayer()

			if ( IsValid( localViewPlayer ) && localViewPlayer.IsPhaseShifted() && localViewPlayer.GetTeam() != TEAM_SPECTATOR )
			{
				     
				{
					int fxIndex   = GetParticleSystemIndex( SHIFTER_PERSONAL_FX )
					int attachIdx = localViewPlayer.LookupAttachment( "CHESTFOCUS" )
					effectSparkles = StartParticleEffectOnEntity( localViewPlayer, fxIndex, FX_PATTACH_POINT_FOLLOW, attachIdx )
				}

				     
				{
					int fxIndex = GetParticleSystemIndex( SHIFTER_SCREEN_FX )
					effectScreen = StartParticleEffectInWorldWithHandle( fxIndex, ZERO_VECTOR, ZERO_VECTOR )
				}

				     
				{
					int fxIndex = GetParticleSystemIndex( SHIFTER_SCREEN_FX_START )
					StartParticleEffectInWorldWithHandle( fxIndex, ZERO_VECTOR, ZERO_VECTOR )
				}

				     
				{
					entity viewModelEntity  = localViewPlayer.GetViewModelEntity()
					entity firstPersonProxy = localViewPlayer.GetPredictedFirstPersonProxy()

					if ( IsValid( viewModelEntity ) )
					{
						viewModelEntity.Highlight_HideInside( 0.0 )
						viewModelEntity.Highlight_HideOutline( 0.0 )
					}

					if ( IsValid( firstPersonProxy ) )
					{
						firstPersonProxy.Highlight_HideInside( 0.0 )
						firstPersonProxy.Highlight_HideOutline( 0.0 )
					}
				}

				ClientPhaseShift_SCRIPT_HACKS_ON()

				if ( localViewPlayer.IsTitan() )
					EmitSoundOnEntity( localViewPlayer, SHIFTER_START_SOUND_1P_TITAN )
				else if ( localViewPlayer.GetPhaseShiftType() == PHASETYPE_GATE )
					EmitSoundOnEntity( localViewPlayer, GATE_START_SOUND_1P )
				else if ( localViewPlayer.GetPhaseShiftType() == PHASETYPE_BREACH )
					EmitSoundAtPosition( TEAM_ANY, localViewPlayer.GetOrigin(), SHIFTER_START_SOUND_3P_BREACH )
				else
					EmitSoundOnEntity( localViewPlayer, SHIFTER_START_SOUND_1P )


				if ( localViewPlayer.IsTitan() )
					EmitSoundOnEntity( localViewPlayer, SHIFTER_LOOP_SOUND_1P_TITAN )
				else if ( localViewPlayer.GetPhaseShiftType() == PHASETYPE_GATE )
					EmitSoundOnEntity( localViewPlayer, GATE_LOOP_SOUND_1P )
				else if ( localViewPlayer.GetPhaseShiftType() == PHASETYPE_BREACH )
					EmitSoundOnEntity( localViewPlayer, SHIFTER_LOOP_SOUND_1P_BREACH )
				else
					EmitSoundOnEntity( localViewPlayer, SHIFTER_LOOP_SOUND_1P )

				effectsAreActive = true
				ourPlayer = localViewPlayer

				Chroma_PhaseShiftStarting()
			}
		}

		WaitFrame()
	}
}

  
                                                     
 
	                  
	                
	                             
	                            

	                                                             

	              
	 
		                       
		 
			                                             

			                         
			                                                     
				                   
			                                        
				                   
			                                               
				                   

			                   
			 
				                                                             
					                                                 

				                        
				                
			 
		 

		                        
		 
			                                             
			                                                                                
			 
				                                                       
				                       
				                           
			 
		 

		           
	 
 
  

void function ClientPhaseShift_SCRIPT_HACKS_ON()
{
	entity localViewPlayer = GetLocalViewPlayer()

	localViewPlayer.Signal( "StartPhaseShift" )

	if ( localViewPlayer == GetLocalClientPlayer() )
	{
		                                              
		                                               
		                                               
	}
}

void function ClientPhaseShift_SCRIPT_HACKS_OFF()
{
	entity localViewPlayer = GetLocalViewPlayer()
	  
	                                                  
	  	                                     

	                                                                                                              
	                                             
	   	                                                                     
}

#endif              

#if SERVER
                                                            
 
	                                       
	 
		                                                 
		                               
	 

	                             
 
#endif