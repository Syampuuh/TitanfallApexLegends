global function CLTrackingVision_Init
global function TrackingVision_CreateSonarPulseArea
global function GetBloodhoundPingCommsAction
global function GetPingTypeFromPOIType

global function ClientCodeCallback_OnPlayerPOIWaypointCreated
global function ClientCodeCallback_WaypointPOIVisibilityChanged
global function ClientCodeCallback_WaypointPOIGetTraceDistScale

global function TrackingVisionUpdatePlayerConnected

const TRACKING_VISION_FX = $"P_phase_shift_main"
const TRACKING_VISION_LOOP_FX = $"P_hunt_trail_CP"

const int TRACKING_VISION_HUNT_MODE_DRAW_DIST_MULT = 2

const float TRACKING_VISION_UPDATE_INTERVAL = 0.25

const float TRACKING_VISION_DEFAULT_FOV = 70.0
const float TRACKING_VISION_DISCOVERY_PING_DURATION = 3.0

const float TRACKING_VISION_DRAW_DIST_SHORT 	= 512.0
const float TRACKING_VISION_DRAW_DIST_MEDIUM 	= 1024.0
const float TRACKING_VISION_DRAW_DIST_LONG		= 2048.0
const float TRACKING_VISION_DRAW_DIST_MAX 		= 4098.0

const float TRACKING_VISION_DRAW_DIST_FOOTPRINTS = 4098.0
const float TRACKING_VISION_DRAW_DIST_FOOTPRINTS_SQR = TRACKING_VISION_DRAW_DIST_FOOTPRINTS * TRACKING_VISION_DRAW_DIST_FOOTPRINTS
const float TRACKING_VISION_SNIPER_RANGE = 3000.0

enum eTrackingPOIDrawSize
{
	NORMAL,
	SMALL,
}

struct POISonarPulseData
{
	vector origin
	float radius
	vector dir
	float fov
}

struct TrackingVisionDrawInfo
{
	int    drawSize = -1
	asset  icon
	string displayText
                                        
                         
                         
      
}

struct FootstepParticleData
{
#if DEV
	entity  debugEntity
#endif
	int 	fxHandle = -1
	bool 	active = false
	bool 	update = false
}

struct
{
	int nextPOIID = 0
	entity currentTracker = null
	table < int, var > trackedPOIRui
	array< POISonarPulseData > activeSonarPulseAreas
	table< entity, FootstepParticleData > footstepParticles

} file

void function CLTrackingVision_Init()
{
	RegisterSignal( "TrackingVision_StopLoopFX" )
	RegisterSignal( "TrackingVision_ForceStop" )

	PrecacheParticleSystem( TRACKING_VISION_FX )
	PrecacheParticleSystem( TRACKING_VISION_LOOP_FX )

	AddCallback_PlayerClassChanged( TrackingVision_OnPlayerClassChanged )

	StatusEffect_RegisterEnabledCallback( eStatusEffect.tracking_vision, TrackingVision_Start )
	StatusEffect_RegisterDisabledCallback( eStatusEffect.tracking_vision, TrackingVision_Stop )

	AddCallback_GameStateEnter( eGameState.Prematch, OnGameStatePrematch )

	BirdClusterSharedInit()
}

void function TrackingVision_CreateSonarPulseArea( vector origin, float radius, vector dir, float fov )
{
	POISonarPulseData data
	data.origin = origin
	data.radius = radius
	data.dir	= dir
	data.fov	= fov
	file.activeSonarPulseAreas.append( data )
}

void function TrackingVision_Start( entity ent, int statusEffect, bool actuallyChanged )
{
  	                                                   
  	                                                       
  	                                                      
	if ( !actuallyChanged && GetLocalViewPlayer() == GetLocalClientPlayer() )
		return

  	                                                 
  	                                    



	if ( ent != GetLocalViewPlayer() )
		return

  	                                                             
	ResetWaypointVisibilities()
	file.currentTracker = ent
	TrackingVisionCleanupFootstepParticles()

	ent.Signal( "TrackingVision_ForceStop" )
	thread TrackingVisionUpdate( ent )
	thread TrackingVision_UpdatePOI( ent )
}

void function TrackingVision_Stop( entity ent, int statusEffect, bool actuallyChanged )
{
  	                                                  
  	                                                       
   	                                                      
	if ( !actuallyChanged && GetLocalViewPlayer() == GetLocalClientPlayer() )
		return

  	                                                 
  	                                    
	if ( ent != GetLocalViewPlayer() )
		return

  	                                                             

	                                     
	ResetWaypointVisibilities()
	file.currentTracker = null
	TrackingVisionCleanupFootstepParticles()

	ent.Signal( "TrackingVision_ForceStop" )
}

void function TrackingVision_OnPlayerClassChanged( entity player )
{

  	                                        

	entity localViewPlayer = GetLocalViewPlayer()
	entity localClientPlayer = GetLocalClientPlayer()

	if ( player.IsTitan() )
		return

  	                                         
  	                                                    
  	                                                     
  	                                                         

	bool playerIsLocalViewPlayer = (player == localViewPlayer)

	if ( playerIsLocalViewPlayer )
		ResetWaypointVisibilities()

	if ( PlayerHasPassive( localViewPlayer, ePassives.PAS_TRACKING_VISION ) )
		return

  	                                                                            

	if ( playerIsLocalViewPlayer )
	{
		player.Signal( "TrackingVision_ForceStop" )
		TrackingVisionCleanupFootstepParticles()
	  	                                            
	}
	else
	{
		player.Signal( "TrackingVision_StopLoopFX" )
	  	                                    
	}
}

void function TrackingVisionUpdatePlayerConnected( entity player )
{
	entity localViewPlayer = GetLocalViewPlayer()

	if ( !PlayerHasPassive( localViewPlayer, ePassives.PAS_TRACKING_VISION ) )
		return

	                                                       

	if ( !(player in file.footstepParticles) )
	{
		FootstepParticleData particleData
		particleData.active = false
		particleData.update = false

#if DEV
		particleData.debugEntity = player
#endif

		file.footstepParticles[player] <- particleData
	}
}

void function TrackingVisionCleanupFootstepParticles()
{
	foreach( entity enemy, FootstepParticleData footstepData in file.footstepParticles )
	{
		if ( footstepData.active || EffectDoesExist( footstepData.fxHandle ) )
			EffectStop( footstepData.fxHandle, true, true )
	}

	file.footstepParticles.clear()
}

void function TrackingVisionUpdate( entity player )
{
	Assert( IsNewThread(), "Must be threaded off." )
	{
		int team = GetLocalViewPlayer().GetTeam()
		array<entity> enemies = GetPlayerArrayOfEnemies( team )

		foreach( entity enemy in enemies )
		{
			FootstepParticleData particleData
			particleData.active = false
			particleData.update = false

#if DEV
			particleData.debugEntity = enemy
#endif

			file.footstepParticles[enemy] <- particleData
		}

		thread TrackingVisionLoopFX_Update( player )
	}
}

int function PlayTrackingVisionFX( entity ent, bool startActive, asset fxAsset = TRACKING_VISION_FX )
{
	if ( !IsHumanSized( ent ) )
		fxAsset = TRACKING_VISION_LOOP_FX

	int fxid = GetParticleSystemIndex( fxAsset )
	int attachId = ent.LookupAttachment( "ORIGIN" )
	Assert( attachId > 0, "Failed to find CHESTFOCUS attachment on" + ent + " with model " + ent.GetModelName() )

	int fxHandle = StartParticleEffectOnEntity( ent, fxid, FX_PATTACH_POINT_FOLLOW, attachId )

	if ( !startActive )
	{
		Effects_SetParticleFlag( fxHandle, PARTICLE_SCRIPT_FLAG_DISABLE_DRAW, true )
		Effects_SetParticleFlag( fxHandle, PARTICLE_SCRIPT_FLAG_NO_DESATURATE, true )
	}

	vector controlPoint = <1.0, 0.0, 0.0>
	EffectSetControlPointVector( fxHandle, 1, controlPoint )

	return fxHandle
}

void function TrackingVisionLoopFX_Update( entity player )                                                     
{
	player.EndSignal( "TrackingVision_StopLoopFX" )

	float prevStatusSeverity = -1.0
	while ( true )
	{
		entity viewPlayer = GetLocalViewPlayer()
		float statusSeverity = StatusEffect_GetSeverity( viewPlayer, eStatusEffect.hunt_mode_visuals )
		array< entity > cleanUpData

		foreach( entity enemy, FootstepParticleData footstepData in file.footstepParticles )
		{
			int handle = footstepData.fxHandle

			bool shouldHaveEffect = IsAlive( enemy ) && !IsPlayerInPlane( enemy ) && !enemy.Player_IsSkydiving()

			if ( footstepData.active )
			{
				if ( !shouldHaveEffect )
				{
					EffectStop( handle, true, false )
					footstepData.active = false
					footstepData.update = false
				}
			}
			else
			{
				if ( shouldHaveEffect )
				{
					bool startActive = (statusSeverity != 0)
					footstepData.fxHandle = PlayTrackingVisionFX( enemy, startActive, TRACKING_VISION_LOOP_FX )

					EffectSetDontKillForReplay( footstepData.fxHandle )
					footstepData.active = true
					footstepData.update = true
					continue
				}
				else
				{
					continue
				}
			}

			if ( !EffectDoesExist( handle ) )
			{
				footstepData.active = false
				footstepData.update = false
				cleanUpData.append( enemy )
				continue
			}

			bool validEnemy = true
			if ( !IsValid( enemy ) )
			{
				validEnemy = false
				cleanUpData.append( enemy )
			}

			if( validEnemy )
			{
				entity groundEntity = enemy.GetGroundEntity()
				if( IsValid( groundEntity ) && groundEntity.GetVelocity() != <0,0,0> || enemy.IsPhaseShifted())
				{
					if( footstepData.update )
					{
						Effects_SetParticleFlag( handle, PARTICLE_SCRIPT_FLAG_DISABLE_UPDATE, true )
						footstepData.update = false
					}
				}
			}
			else if ( !footstepData.update )
			{
				Effects_SetParticleFlag( handle, PARTICLE_SCRIPT_FLAG_DISABLE_UPDATE, false )
				EffectRestart( handle, true, false)
				footstepData.update = true
			}

			if ( prevStatusSeverity == statusSeverity )
				continue

			if ( statusSeverity == 0 )
				Effects_SetParticleFlag( handle, PARTICLE_SCRIPT_FLAG_DISABLE_DRAW, true )
			else
				Effects_SetParticleFlag( handle, PARTICLE_SCRIPT_FLAG_DISABLE_DRAW, false )
		}

		foreach ( entity badEnt in cleanUpData )
		{
			if ( !(badEnt in file.footstepParticles) )
				continue

			FootstepParticleData footstepData = file.footstepParticles[badEnt]
			if ( EffectDoesExist( footstepData.fxHandle ) )
				EffectStop( footstepData.fxHandle, true, true )

			delete file.footstepParticles[badEnt]
		}

		prevStatusSeverity = statusSeverity
		WaitFrame()
	}
}

void function TrackingVision_UpdatePOI( entity player )
{
	Assert( IsNewThread(), "Must be threaded off." )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "TrackingVision_ForceStop" )

	                                                              
	OnThreadEnd(
		function() : ()
		{
			TrackingVision_DestroyAllPOIRuis()
			ResetWaypointVisibilities()
		}
	)

	                                                 
	                                         
	  	      

	if ( !PlayerHasPassive( player, ePassives.PAS_TRACKING_VISION ) )
		return

	float lastHuntModeStatusSeverity = StatusEffect_GetSeverity( player, eStatusEffect.hunt_mode )
	while ( true )
	{
		array< entity > waypoints = GetNearbyPlayerWaypointPOIs()
		foreach ( entity waypoint in waypoints )
			TrackingVision_UpdateWaypointPOIDrawing( waypoint )

		                                                                               
		file.activeSonarPulseAreas = []

		wait TRACKING_VISION_UPDATE_INTERVAL
	}
}

void function TrackingVision_UpdateWaypointPOIDrawing( entity waypoint )
{
	bool isVisible = waypoint.WaypointIsVisible()
	int waypointID = waypoint.WaypointGetID()

	if ( waypointID < 0 )
		return                                             

	entity localViewPlayer = GetLocalViewPlayer()
	if ( !IsValid( localViewPlayer ) )
		return

#if DEV
	if ( localViewPlayer != file.currentTracker )
	{
		ResetWaypointVisibilities()
		file.currentTracker = localViewPlayer

		printt( "WARNING: current tracker changed. Reset Waypoint Visibilities may not have been called" )
		return
	}
#endif

	bool waypointIsLocalTeam = localViewPlayer.GetTeam() == waypoint.GetTeam()
	if ( waypointIsLocalTeam )
	{
			return
	}

	if ( waypoint.WaypointIsFlagSet( WPF_VISIBILITY_SONAR ) )
	{
		if ( waypoint.WaypointIsFlagSet( WPF_DEPLOYABLE ) )
		{
			entity attachedEnt = waypoint.WaypointGetAttachedPOIEnt()
			if ( IsValid( attachedEnt ) )
			{
				float statusEffectWeight = StatusEffect_GetSeverity( attachedEnt, eStatusEffect.sonar_detected )
				if ( statusEffectWeight )
					waypoint.WaypointSetAlwaysVisibleEndTime( Time() + TRACKING_VISION_DISCOVERY_PING_DURATION )
			}
		}
		else
		{
			vector waypointPos = waypoint.GetOrigin()
			bool addWaypointFlag = false
			foreach ( POISonarPulseData sonarData in file.activeSonarPulseAreas )
			{
				float sonarDistSqr = DistanceSqr( sonarData.origin, waypointPos )
				if ( sonarDistSqr <= ( sonarData.radius * sonarData.radius ) )
				{
					                                                              
					vector posToTarget = Normalize( waypointPos - sonarData.origin )
					float dot = DotProduct( posToTarget, sonarData.dir )
					float angle = DotToAngle( dot )

					if ( angle > ( sonarData.fov / 2 ) )
						continue

					addWaypointFlag = true
					break
				}
			}

			if ( addWaypointFlag )
				waypoint.WaypointSetAlwaysVisibleEndTime( Time() + TRACKING_VISION_DISCOVERY_PING_DURATION )
		}
	}

	if ( isVisible && waypointID in file.trackedPOIRui )
	{
                          
			if( Control_IsPlayerInMapCameraView ( localViewPlayer ) )
			{
				RuiSetVisible ( file.trackedPOIRui[ waypointID ] , false )
				return
			}
        
		bool waypointInFocus = waypoint.WaypointIsInFocus()
		RuiSetBool( file.trackedPOIRui[ waypointID ], "inViewFocus", waypointInFocus )

		if ( waypointInFocus && !waypoint.WaypointInFocusPrevFrame() )
			RuiSetGameTime( file.trackedPOIRui[ waypointID ], "iconCreationTime", Time() )
	}
}

void function TrackingVision_DestroyAllPOIRuis()
{
	table < int, var > trackedPOIRuiClone = clone file.trackedPOIRui
	foreach ( int id, var rui in trackedPOIRuiClone )
	{
		RuiDestroyIfAlive( rui )
		delete file.trackedPOIRui[ id ]
	}
}

void function ClientCodeCallback_OnPlayerPOIWaypointCreated( entity waypoint, int poiType, vector pos, entity ent, int teamNum )
{
	TrackingVisionCreatePOIBlueprint( waypoint, poiType, pos, ent, teamNum )
}

void function ClientCodeCallback_WaypointPOIVisibilityChanged( entity waypoint, bool isVisible )
{
	WaypointPOIVisibilityChanged_Internal( waypoint, isVisible )
}

float function ClientCodeCallback_WaypointPOIGetTraceDistScale()
{
	if ( !ShouldShowTrackingVisionIcons() )
		return 0.0

	entity localViewPlayer = GetLocalViewPlayer()
	float huntStatusSeverity = StatusEffect_GetSeverity( localViewPlayer, eStatusEffect.hunt_mode )
	if ( huntStatusSeverity )
		return TRACKING_VISION_HUNT_MODE_DRAW_DIST_MULT

	return 1.0
}

void function WaypointPOIVisibilityChanged_Internal( entity waypoint, bool isVisible )
{
	entity localViewPlayer = GetLocalViewPlayer()
	if ( !IsValid( localViewPlayer ) )
		return

	if ( !IsValid( waypoint ) )                                                                                                                            
		return

	bool waypointIsLocalTeam = localViewPlayer.GetTeam() == waypoint.GetTeam()
	if ( waypointIsLocalTeam )
	{
		return
	}

	int waypointID = waypoint.WaypointGetID()
	Assert( waypointID >= 0, "Never created a rui for waypoint" )

	if ( isVisible )
	{
		TrackingVision_CreateGenericTrackerMarker( waypoint )
	}
	else
	{
		if ( waypointID in file.trackedPOIRui )
		{
			RuiDestroyIfAlive( file.trackedPOIRui[ waypointID ] )
			delete file.trackedPOIRui[ waypointID ]
		}
	}
}

                                                                                                        
void function TrackingVisionCreatePOIBlueprint( entity waypoint, int poiEventID, vector pos, entity ent, int team )
{
	waypoint.WaypointSetID( file.nextPOIID )
	file.nextPOIID++

	switch ( poiEventID )
	{

		                                

		case eTrackingVisionNetworkedPOITypes.DROPPOD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.TITANFALL:
			break

		case eTrackingVisionNetworkedPOITypes.TITAN_EMBARK:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.TITAN_DISEMBARK:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.DOOR_USE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.DOOR_DESTROYED:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_HEAL:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_RELOAD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_STARTBLEEDOUT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TOOK_DAMAGE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_BULLET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_GRENADE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_OPENDROPPOD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOTBIN_USED:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_DEATH:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_LONG )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_KILLER:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_LONG )
			break

		                         

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_START:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_LONG )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_STOP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_LONG )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_FOOTPRINT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_SLIDE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_MANTLE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_START:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_STOP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_LAUNCH_PAD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		                       
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_START:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_STOP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_SMOKE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_GAS:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		                    

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_AMMO:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ARMOR:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ATTACHMENT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_WEAPON:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GRENADE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_JUMPKIT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HEALTH:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HELMET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_BACKPACK:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

                  
                                                                     
                                                                       
                                                                   
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GADGET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_INCAPSHIELD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_DATAKNIFE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break
      

		                      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_ARMOR:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_WEAPON:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_JUMPKIT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_HELMET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_BACKPACK:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

                  
                                                                       
                                                                       
                                                                   
        
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_GADGET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_INCAPSHIELD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		                     

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_AMMO:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ARMOR:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ATTACHMENT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_WEAPON:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GRENADE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_JUMPKIT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HEALTH:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HELMET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_BACKPACK:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

                  
                                                                   
                                                                                            
                                                                   
        
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GADGET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_INCAPSHIELD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_DATAKNIFE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DYNAMIC_UPDATE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DIRTY_BOMB:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_ENEMY_TETHERED:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

               
                                                                     
                                                                                        
                                                                    
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DEPLOYABLE_MEDIC:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_JUMP_PAD:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BUBBLE_BUNKER:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TESLA_TRAP:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MEDIUM )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TROPHY_SYSTEM:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

               
                                                                   
                                                                                        
                                                                    
        
      

                                        
                                                                     
                                                                               
                                                                                        
                                                                  
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_HOLE:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_SPACE_ELEVATOR:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_ENTER:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_EXIT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_PHASE_GATE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_ENTER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_EXIT:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_MARKET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TOSS:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TELEPORT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_DATAKNIFE_USED:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_SHORT )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_COVER_WALL:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TURRET:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_ABILITY_VOID_RING:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_START:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_END:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_KNUCKLE_CLUSTER:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_START:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_END:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_TACTICAL:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_END:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_FOCUS_OF_ATTENTION:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ECHO_LOCATOR:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR | WPF_DEPLOYABLE )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_END:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_PATH:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break

                 
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_END:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break
      
               
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_ULTIMATE_FIRED:
			waypoint.WaypointAddFlag( WPF_VISBILITY_LOS | WPF_VISIBILITY_SONAR )
			waypoint.WaypointSetCheckDist( TRACKING_VISION_DRAW_DIST_MAX )
			break
      
		default:
			Assert( 0, "Point of intrest event ID is not registered in eTrackingVisionNetworkedPOITypes" )
			break
	}
}

void function TrackingVision_GetDrawInfo( entity waypoint, TrackingVisionDrawInfo drawInfo )
{
	int poiEventID = waypoint.WaypointGetPOIType()

	switch ( poiEventID )
	{
		case eTrackingVisionNetworkedPOITypes.DROPPOD:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_droppod_land_zone"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_DROPPOD"
			break

		case eTrackingVisionNetworkedPOITypes.TITANFALL:
			break

		case eTrackingVisionNetworkedPOITypes.TITAN_EMBARK:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/menu/boosts/boost_icon_map_hack"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TITAN_EMBARK"
			break

		case eTrackingVisionNetworkedPOITypes.TITAN_DISEMBARK:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/menu/boosts/boost_icon_map_hack"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TITAN_DISEMBARK"
			break

		case eTrackingVisionNetworkedPOITypes.DOOR_USE:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_door_used"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_DOOR"
			break

		case eTrackingVisionNetworkedPOITypes.DOOR_DESTROYED:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_door_destroyed"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_DOOR_DESTROYED"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_HEAL:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_health_used"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_HEAL"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_RELOAD:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_reloaded"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_RELOAD"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_STARTBLEEDOUT:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_bleed_out"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_START_BLEEDOUT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TOOK_DAMAGE:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_took_damage"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_START_TOOK_DAMAGE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_BULLET:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_dealt_damage"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_FIRE_WEAPON_BULLET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_GRENADE:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_grenade_pin"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_FIRE_WEAPON_GRENADE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_OPENDROPPOD:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_supply_pod_opened"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_START_DROPPOD_OPEN"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOTBIN_USED:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_opened"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_BIN_USED"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_DEATH:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_died"
			int damageSourceID = waypoint.GetWaypointInt( TRACKING_DAMAGE_SOURCE_INDEX )
			int dist = waypoint.GetWaypointInt( TRACKING_DIST_INDEX )
			drawInfo.displayText = GetKillVictimDisplayText( damageSourceID, dist )
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_KILLER:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_killed_other"
			int damageSourceID = waypoint.GetWaypointInt( TRACKING_DAMAGE_SOURCE_INDEX )
			int dist = waypoint.GetWaypointInt( TRACKING_DIST_INDEX )
			drawInfo.displayText = GetKillAttackerDisplayText( damageSourceID, dist )
			break

		                         

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_zipline_attach"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_START_ZIPLINE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_STOP:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_zipline_detach"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_STOP_ZIPLINE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_FOOTPRINT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_footprint"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_FOOTPRINT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_SLIDE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_slide_start"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_SLIDE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_MANTLE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_mantled"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_MANTLED"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_jumped_down"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_JUMP_DOWN_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_STOP:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_jumped_down"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_JUMP_DOWN_STOP"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_LAUNCH_PAD:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_jumped_down"                  
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_TRAVERSAL_LAUNCH_PAD"
			break

		                       
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_blink_start"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITIES_PHASE_DASH_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_STOP:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_blink_end"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITIES_PHASE_DASH_STOP"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_SMOKE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_smoke_residue"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITIES_SMOKE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_GAS:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_gas_residue"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITIES_GAS"
			break

		                    

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_AMMO:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_AMMO"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ARMOR:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_ARMOR"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ATTACHMENT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_ATTACHMENT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_WEAPON:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_WEAPON"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GRENADE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_GRENADE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_JUMPKIT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_JUMPKIT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HEALTH:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_HEALTH"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HELMET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_HELMET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_BACKPACK:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_BACKPACK"
			break

                  
                                                                     
                                                 
                                                       
                                                                              
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GADGET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_GADGET"
			break
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_INCAPSHIELD:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_INCAPSHIELD"
			break

                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_DATAKNIFE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_pickup"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_PICKUP_DATAKNIFE"
			break
      

		                      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_ARMOR:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_ARMOR"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_WEAPON:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_WEAPON"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_JUMPKIT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_JUMPKIT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_HELMET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_HELMET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_BACKPACK:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_BACKPACK"
			break

                  
                                                                       
                                                 
                                                         
                                                                                
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_GADGET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_GADGET"
			break
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_INCAPSHIELD:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_exchange"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_EXCHANGE_INCAPSHIELD"
			break

		                     

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_AMMO:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_AMMO"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ARMOR:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_ARMOR"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ATTACHMENT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_ATTACHMENT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_WEAPON:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_WEAPON"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GRENADE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_GRENADE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_JUMPKIT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_JUMPKIT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HEALTH:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_HEALTH"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HELMET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_HELMET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_BACKPACK:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_BACKPACK"
			break

                  
                                                                   
                                                 
                                                     
                                                                            
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GADGET:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_GADGET"
			break
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_INCAPSHIELD:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_INCAPSHIELD"
			break

                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_DATAKNIFE:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_loot_drop"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_LOOT_DROP_DATAKNIFE"
			break
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DIRTY_BOMB:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_trap"
			drawInfo.displayText = "#WPN_DIRTY_BOMB"
			break

               
                                                                     
                                                  
                                                
                                       
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DEPLOYABLE_MEDIC:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_DEPLOYABLE_MEDIC"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_JUMP_PAD:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_JUMP_PAD"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BUBBLE_BUNKER:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_BUBBLE_BUNKER"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TESLA_TRAP:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_wattson_pylon"
			drawInfo.displayText = "#PILOT_PASSIVE_TRACKING_TESLA_TRAP"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TROPHY_SYSTEM:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_wattson_ult"
			drawInfo.displayText = "#PILOT_PASSIVE_TRACKING_TROPHY"
			break

               
                                                                   
                                                  
                                                
                                            
        
      

                                        
                                                                     
                                                  
                                                       
                                                                     
                            
        
                                                                               
                                                  
                                                       
                                                                     
                            
                            
        
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_HOLE:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_horizon_ult"
			drawInfo.displayText = "#WPN_BLACK_HOLE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_SPACE_ELEVATOR:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_SPACE_ELEVATOR"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_ENTER:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_horizon_enter"
			drawInfo.displayText = "#WPN_SPACE_ELEVATOR_ENTER"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_EXIT:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_horizon_exit"
			drawInfo.displayText = "#WPN_SPACE_ELEVATOR_EXIT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_PHASE_GATE:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_PHASE_GATE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TOSS:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_translocation_toss"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITY_TRANSLOCATION_TOSS"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TELEPORT:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_translocation_teleport"
			drawInfo.displayText = "#GEAR_TRACKING_VISION_OBJECT_ABILITY_TRANSLOCATION_TELEPORT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_MARKET:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#PROMPT_PING_BLACK_MARKET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_COVER_WALL:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_rampart_wall"
			drawInfo.displayText = "#PROMPT_PING_RAMPART_WALL"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TURRET:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_rampart_turret"
			drawInfo.displayText = "#PROMPT_PING_RAMPART_TURRET"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_ABILITY_VOID_RING:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#SURVIVAL_PICKUP_VOID_RING"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_fuse_ult_start"
			drawInfo.displayText = "#WPN_MORTAR_RING_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_fuse_ult_end"
			drawInfo.displayText = "#WPN_MORTAR_RING_END"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_KNUCKLE_CLUSTER:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_fuse_tac"
			drawInfo.displayText = "#WPN_CLUSTER_BOMB"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_valk_pas"
			drawInfo.displayText = "#ABL_JETS_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_valk_pas"
			drawInfo.displayText = "#ABL_JETS_END"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_TACTICAL:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_valk_tac"
			drawInfo.displayText = "#WPN_CLUSTER_MISSILE"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_valk_ult"
			drawInfo.displayText = "#ABL_SKYWARD_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_valk_ult"
			drawInfo.displayText = "#ABL_SKYWARD_END"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_FOCUS_OF_ATTENTION:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_pariah_tac"
			drawInfo.displayText = "#WPN_SONIC_BLAST"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ECHO_LOCATOR:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_pariah_ult"
			drawInfo.displayText = "#WPN_ECHO_LOCATOR"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_madmaggie_tactical"
			drawInfo.displayText = "#WPN_RIOT_DRILL_ENTER"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_madmaggie_tactical"
			drawInfo.displayText = "#WPN_RIOT_DRILL_EXIT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_madmaggie_ult_deploy"
			drawInfo.displayText = "#WPN_WRECKING_BALL_DEPLOY"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_madmaggie_ult_explode"
			drawInfo.displayText = "#WPN_WRECKING_BALL_EXPLOSION"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_PATH:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_white_raven"
			drawInfo.displayText = "#WPN_WRECKING_BALL_PATH"
			break

                 
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_newcastle_ult_launch"
			drawInfo.displayText = "#WPN_ARMORED_LEAP_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_newcastle_ult_deploy"
			drawInfo.displayText = "#WPN_ARMORED_LEAP_END"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_newcastle_tactical_start"
			drawInfo.displayText = "#WPN_SHIELD_THROW_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_newcastle_tactical_end"
			drawInfo.displayText = "#WPN_SHIELD_THROW_END"
			break

      

               
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_START:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_vantage_tac_start"
			drawInfo.displayText = "#WPN_VANTAGE_TAC_START"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_END:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_vantage_tac_end"
			drawInfo.displayText = "#WPN_VANTAGE_TAC_END"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_ULTIMATE_FIRED:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_vantage_ult_fired"
			drawInfo.displayText = "#WPN_VANTAGE_ULT_FIRED"
			break
      

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_DATAKNIFE_USED:
			drawInfo.drawSize = eTrackingPOIDrawSize.SMALL
			drawInfo.icon = $"rui/hud/poi_icons/poi_ash_vision"
			drawInfo.displayText = "#PAS_ASH_POI_TRACKING"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_ENEMY_TETHERED:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_ash_tether"
			drawInfo.displayText = "#WPN_ARC_BOLT"
			break

		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_ENTER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_EXIT:
			drawInfo.drawSize = eTrackingPOIDrawSize.NORMAL
			drawInfo.icon = $"rui/hud/poi_icons/poi_deployable"
			drawInfo.displayText = "#WPN_PHASE_BREACH"
			break

		default:
			Assert( 0, "Point of intrest event ID is not registered in eTrackingVisionNetworkedPOITypes" )
			break
	}
}

int function GetPingTypeFromPOIType( entity waypoint )
{
	int poiType = waypoint.WaypointGetPOIType()
	float age = Time() - waypoint.WaypointGetCreationTime()

	switch( poiType )
	{
		           
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ZIPLINE_STOP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_FOOTPRINT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_SLIDE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_MANTLE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_JUMP_DOWN_STOP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_LAUNCH_PAD:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_PHASE_DASH_STOP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_PHASE_GATE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_JUMP_PAD:
		case eTrackingVisionNetworkedPOITypes.PLAYER_OPENDROPPOD:
		case eTrackingVisionNetworkedPOITypes.PLAYER_CLASS_DEPLOYABLE:
		case eTrackingVisionNetworkedPOITypes.DROPPOD:
		case eTrackingVisionNetworkedPOITypes.TITANFALL:
		case eTrackingVisionNetworkedPOITypes.TITAN_EMBARK:
		case eTrackingVisionNetworkedPOITypes.TITAN_DISEMBARK:
		case eTrackingVisionNetworkedPOITypes.DOOR_USE:
		case eTrackingVisionNetworkedPOITypes.DOOR_DESTROYED:
		case eTrackingVisionNetworkedPOITypes.PLAYER_RELOAD:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TOSS:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TRANSLOCATION_TELEPORT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_SPACE_ELEVATOR:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_ENTER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_ELEVATOR_EXIT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_PASSIVE_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_PATH:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_ENTER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_PORTAL_EXIT:
			return (age > 30) ? ePingType.BLOODHOUND_POI_TRAVELER : ePingType.BLOODHOUND_POI_TRAVELER_RECENT

		         
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_SMOKE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITIES_GAS:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DIRTY_BOMB:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_DEPLOYABLE_MEDIC:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BUBBLE_BUNKER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_DEATH:
		case eTrackingVisionNetworkedPOITypes.PLAYER_STARTBLEEDOUT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_KILLER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_BULLET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_FIRE_WEAPON_GRENADE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TESLA_TRAP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TROPHY_SYSTEM:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_TURRET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_COVER_WALL:
               
                                                                   
      
                                        
                                                                     
                                                                               
      
               
                                                                     
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_ABILITY_VOID_RING:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_HOLE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MORTAR_RING_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_KNUCKLE_CLUSTER:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_TACTICAL:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VALK_ULTIMATE_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_FOCUS_OF_ATTENTION:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ECHO_LOCATOR:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_RIOT_DRILL_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_MAGGIE_WRECKING_BALL_END:
                 
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_ARMORED_LEAP_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_NEWCASTLE_MOBILE_SHIELD_END:
      
               
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_START:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_JETDRIVE_END:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_VANTAGE_ULTIMATE_FIRED:
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_ENEMY_TETHERED:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_ASH_DATAKNIFE_USED:
			return (age > 30) ? ePingType.BLOODHOUND_POI_BATTLE : ePingType.BLOODHOUND_POI_BATTLE_RECENT

		          
		case eTrackingVisionNetworkedPOITypes.PLAYER_HEAL:
		case eTrackingVisionNetworkedPOITypes.PLAYER_TOOK_DAMAGE:
			return (age > 30) ? ePingType.BLOODHOUND_POI_WOUNDED : ePingType.BLOODHOUND_POI_WOUNDED_RECENT

		       
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_AMMO:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ARMOR:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_ATTACHMENT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_WEAPON:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GRENADE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_JUMPKIT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HEALTH:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_HELMET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_BACKPACK:
                  
                                                                     
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_INCAPSHIELD:
                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_DATAKNIFE:
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_ARMOR:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_WEAPON:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_JUMPKIT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_HELMET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_BACKPACK:
                  
                                                                       
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_INCAPSHIELD:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_AMMO:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ARMOR:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_ATTACHMENT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_WEAPON:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GRENADE:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_JUMPKIT:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HEALTH:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_HELMET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_BACKPACK:
                  
                                                                   
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_INCAPSHIELD:
                      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_DATAKNIFE:
      
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_PICKUP_GADGET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_EXCHANGE_GADGET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOT_DROP_GADGET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_ABILITY_BLACK_MARKET:
		case eTrackingVisionNetworkedPOITypes.PLAYER_LOOTBIN_USED:
			return (age > 30) ? ePingType.BLOODHOUND_POI_LOOTING : ePingType.BLOODHOUND_POI_LOOTING_RECENT

		default:
			Assert( 0, "Point of intrest event ID is not registered in eTrackingVisionNetworkedPOITypes" )
			break
	}

	unreachable
}

string function GetKillVictimDisplayText( int damageSourceID, int dist )
{
	switch( damageSourceID )
	{
		case eDamageSourceId.stuck:
		case eDamageSourceId.droppod_impact:
		case eDamageSourceId.damagedef_crush:
		case eDamageSourceId.outOfBounds:
		case eDamageSourceId.deathField:
		case eDamageSourceId.bleedout:
                              
                                                            
                                                     
      
			return Localize( "#GEAR_TRACKING_VISION_KILLED_SOURCE_ONLY", Localize( GetObitFromDamageSourceID( damageSourceID ) ) )
	}

	if ( dist > TRACKING_VISION_SNIPER_RANGE )
		return Localize( "#GEAR_TRACKING_VISION_SNIPED_BY", Localize( GetObitFromDamageSourceID( damageSourceID ) ) )

	return Localize( "#GEAR_TRACKING_VISION_KILLED_BY", Localize( GetObitFromDamageSourceID( damageSourceID ) ) )
}

string function GetKillAttackerDisplayText( int damageSourceID, int dist )
{
	if ( dist > TRACKING_VISION_SNIPER_RANGE )
		return Localize( "#GEAR_TRACKING_VISION_SNIPER", Localize( GetObitFromDamageSourceID( damageSourceID ) ) )

	return Localize( "#GEAR_TRACKING_VISION_KILLER", Localize( GetObitFromDamageSourceID( damageSourceID ) ) )
}

int function GetBloodhoundPingCommsAction( entity pingingPlayer, int pingType, entity pingedEnt )
{
	switch( pingType )
	{
		case ePingType.BLOODHOUND_POI_TRAVELER:
			return eCommsAction.BLOOHOUND_WARN_TRAVELER

		case ePingType.BLOODHOUND_POI_BATTLE:
			return eCommsAction.BLOOHOUND_WARN_BATTLE

		case ePingType.BLOODHOUND_POI_LOOTING:
			return eCommsAction.BLOOHOUND_WARN_LOOTING

		case ePingType.BLOODHOUND_POI_WOUNDED:
			return eCommsAction.BLOOHOUND_WARN_WOUNDED

		         

		case ePingType.BLOODHOUND_POI_TRAVELER_RECENT:
			return eCommsAction.BLOOHOUND_WARN_TRAVELER_RECENT

		case ePingType.BLOODHOUND_POI_BATTLE_RECENT:
			return eCommsAction.BLOOHOUND_WARN_BATTLE_RECENT

		case ePingType.BLOODHOUND_POI_LOOTING_RECENT:
			return eCommsAction.BLOOHOUND_WARN_LOOTING_RECENT

		case ePingType.BLOODHOUND_POI_WOUNDED_RECENT:
			return eCommsAction.BLOOHOUND_WARN_WOUNDED_RECENT
	}

	unreachable
}

void function TrackingVision_CreateGenericTrackerMarker( entity waypoint )
{
	if ( !ShouldShowTrackingVisionIcons() )
		return

	if ( !IsValid( waypoint ) )
		return

	entity localViewPlayer = GetLocalViewPlayer()

	                                                                                                                                                                                                      
	if ( AllianceProximity_IsUsingAllianceProximity() )
	{
		if ( !IsValid( waypoint ) || !IsValid( localViewPlayer ) )
			return

		if ( IsFriendlyTeam( waypoint.GetTeam(), localViewPlayer.GetTeam() ) )
			return
	}

	vector pos = waypoint.WaypointGetPOIPosition()
	var rui = CreateTransientFullscreenRui( $"ui/tracking_vision_object_icons.rpak", RuiCalculateDistanceSortKey( localViewPlayer.EyePosition(), pos ) )

	TrackingVisionDrawInfo drawInfo
	TrackingVision_GetDrawInfo( waypoint, drawInfo )

                                        
                          
  
                                                      
                                                                                                            
  
     
      
	{
		RuiSetGameTime( rui, "startTime", waypoint.WaypointGetCreationTime() )
	}
	RuiSetGameTime( rui, "iconCreationTime", Time() )
	RuiSetFloat( rui, "duration", waypoint.WaypointGetLifetime() )

	                                                                                                                                  
	entity attachedEnt = waypoint.WaypointGetAttachedPOIEnt()
	if ( waypoint.WaypointIsFlagSet( WPF_DYNAMIC_UPDATE ) && IsValid( attachedEnt ) )
		RuiTrackFloat3( rui, "pos", attachedEnt, RUI_TRACK_OVERHEAD_FOLLOW )
	else
		RuiTrackFloat3( rui, "pos", waypoint, RUI_TRACK_ABSORIGIN_FOLLOW )

	RuiKeepSortKeyUpdated( rui, true, "pos" )

	RuiSetInt( rui, "teamRelation", 0 )

	float drawDist = waypoint.WaypointGetCheckDist()

	float huntStatusSeverity = StatusEffect_GetSeverity( localViewPlayer, eStatusEffect.hunt_mode )
	if ( huntStatusSeverity )
		drawDist *= TRACKING_VISION_HUNT_MODE_DRAW_DIST_MULT

	RuiSetFloat( rui, "iconDrawDist", drawDist )

	RuiKeepSortKeyUpdated( rui, true, "pos" )

	RuiSetString( rui, "objectText", drawInfo.displayText )
	RuiSetImage( rui, "iconImage", drawInfo.icon )
	RuiSetInt( rui, "drawSize", drawInfo.drawSize )
                                        
                                                           
                                                           
      

	int waypointID = waypoint.WaypointGetID()
	Assert ( !( waypointID in file.trackedPOIRui ), "Rui already exists for POI with id " + waypointID )
	file.trackedPOIRui[ waypointID ] <- rui

	if ( IsRoundBased() )
		thread ClearRuiOnDestroy( waypoint, waypointID, rui )
}

void function ClearRuiOnDestroy( entity waypoint, int waypointID, var rui )
{
	waypoint.SetDoDestroyCallback( true )
	waypoint.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function (  ) : ( waypoint, waypointID, rui )
		{
			RuiDestroyIfAlive( rui )
			if ( waypointID in file.trackedPOIRui )
				delete file.trackedPOIRui[ waypointID ]
		}
	)

	WaitForever()
}

bool function ShouldShowTrackingVisionIcons()
{
	entity localViewPlayer = GetLocalViewPlayer()
	if ( !PlayerHasPassive( localViewPlayer, ePassives.PAS_TRACKING_VISION ) )
		return false

	if ( GetGameState() <= eGameState.Prematch )
		return false

	return true
}

void function OnGameStatePrematch()
{
}