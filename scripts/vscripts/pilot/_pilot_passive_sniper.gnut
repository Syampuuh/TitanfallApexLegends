global function PassiveVantage_Init
global function PassiveVantage_isCompatibleOptic
global function PassiveVantage_IsInCompatibleWeaponConfig

#if CLIENT
global function PlayVantageSpottedPingSounds
#endif

#if SERVER
                                                    
                                                   
#endif

const float PASSIVE_MAX_FOV = 40                                                                   
const float PASSIVE_SCOPE_TRACKING_FOV = 3                                                         

global table < entity, array <entity> > vantageTargetTrackingList

void function PassiveVantage_Init()
{
	AddCallback_OnPassiveChanged( ePassives.PAS_VANTAGE, Vantage_OnPassiveChanged )

	#if SERVER
		                                                                      
	#endif

	SniperRangeAutoSet_Init()

	RegisterSignal( "EndConditionalScopeTracking" )

	AddCallback_OnPlayerZoomIn( Vantage_PlayerZoomInCallback )
	AddCallback_OnPlayerZoomOut( Vantage_PlayerZoomOutCallback )

	#if CLIENT || UI
		AddCallback_EditLootDesc( Vantage_EditScopesLootDesc )
	#endif

	#if CLIENT
		AddCallback_OnSelectedWeaponChanged( OnVantageSelectedWeaponChanged )
	#endif
}

void function Vantage_OnPassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{
	if ( didHave )
	{
		player.Signal( "EndConditionalScopeTracking" )
		#if CLIENT
			SniperRangeAutoSet_Stop( player )
		#endif
		#if SERVER
			                                  
		#endif

	}

	if ( nowHas )
	{
		#if SERVER
			                                 
		#endif

		if ( !(player in vantageTargetTrackingList) )
		{
			array<entity> targets
			vantageTargetTrackingList[player] <- targets
		}

		thread ScopeTrackingConditional( player, null, PASSIVE_SCOPE_TRACKING_FOV, false, false, vantageTargetTrackingList[player] )
	}

	#if SERVER
		                                                  
	#endif
}
#if CLIENT
void function OnVantageSelectedWeaponChanged( entity selectedWeapon )
{

	entity player = GetLocalViewPlayer()

	if ( !IsAlive( player ) )
		return

	if ( !PlayerHasPassive( player, ePassives.PAS_VANTAGE ) )
		return

	DeactivateSniperRecon( player )
}
#endif

void function Vantage_PlayerZoomInCallback( entity player )
{
	#if CLIENT
		if ( !IsAlive( player ) )
			return

		if ( !PlayerHasPassive( player, ePassives.PAS_VANTAGE ) )
			return

		ActivateSniperRecon( player )
	#endif         
}

void function ActivateSniperRecon( entity player )
{
	#if CLIENT
	if ( player == GetLocalViewPlayer() )
	{
		entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )

		if ( IsValid( weapon )
				&& !Bleedout_IsBleedingOut( player ) )
		{
			bool isCompatibleWeaponConfig = PassiveVantage_IsInCompatibleWeaponConfig( weapon )
			float currentFOV              = weapon.GetWeaponZoomFOV()
			if ( isCompatibleWeaponConfig && currentFOV <= PASSIVE_MAX_FOV )
			{
				thread CL_SniperRecon_UI_Thread( player )
			}
		}
	}
	#endif
}

void function DeactivateSniperRecon( entity player )
{
	#if CLIENT
		SniperRecon_EndThread( player )
		SniperReconUI_EndThread( player )
		SniperRangeAutoSet_Stop( player )
	#endif         
}

void function Vantage_PlayerZoomOutCallback( entity player )
{
	DeactivateSniperRecon( player )
}

#if CLIENT || UI
string function Vantage_EditScopesLootDesc( string lootRef, entity player, string originalDesc )
{
	string finalDesc = originalDesc

	if ( PassiveVantage_isCompatibleOptic( lootRef )
			&& IsValid( player )
			&& LoadoutSlot_IsReady( ToEHI( player ), Loadout_Character() )
			&& ItemFlavor_GetAsset( LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_Character() ) ) == $"settings/itemflav/character/vantage.rpak" )
	{
		finalDesc = finalDesc + Localize( "#VANTAGE_PASSIVE_LOOT_HINT_DESC" )
	}
	return finalDesc
}
#endif

#if SERVER
                                                                                 
 
	                         
		      

	              
	 
		                                                 
	 

	             
	 
		                                                 
	 
 

                                                                                     
 
	                                                         
		      

	                                             
 
#endif              


void function ScopeTrackingConditional( entity player, entity weapon, float trackingFOV, bool lockMode, bool fromTac, array <entity> targetExcludeList )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "EndConditionalScopeTracking" )

	OnThreadEnd(
		function() : ( player )
		{
			SniperReconUI_EndThread( player )
			SniperRecon_EndThread( player )
			#if CLIENT
				SniperRangeAutoSet_Stop( player )
			#endif
		}
	)

	bool scopeTrackingOn      = false
	bool skipUpdate           = false
	while ( true )
	{
		weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
		bool fullyInAds = player.GetZoomFrac() > 0.99
		                                              
		if ( IsValid( weapon )
				&& fullyInAds
				&& !Bleedout_IsBleedingOut( player )
				&& !(StatusEffect_GetSeverity( player, eStatusEffect.silenced ) > 0)
				&& !player.Player_IsSkywardLaunching()
				&& !(StatusEffect_GetSeverity( player, eStatusEffect.is_boxing ))
		)
		{
			bool isCompatibleWeaponConfig = PassiveVantage_IsInCompatibleWeaponConfig( weapon )
			float currentFOV              = weapon.GetWeaponZoomFOV()
			if ( isCompatibleWeaponConfig && currentFOV <= PASSIVE_MAX_FOV )
			{
				if ( !scopeTrackingOn )
				{
					if ( weapon.GetWeaponClassName() == "mp_weapon_melee_survival" )
					{
						fromTac = true
					}
					thread SniperRecon_BeginThread( player, weapon, targetExcludeList )
					#if SERVER
					                      
						                                             
					#endif

					#if CLIENT
						thread SniperRangeAutoSet_Start( player )
					#endif
					scopeTrackingOn = true
				}
			}
		}
		else if ( scopeTrackingOn )
		{
			SniperRecon_EndThread( player )
			#if CLIENT
				SniperRangeAutoSet_Stop( player )
			#endif
			scopeTrackingOn = false
		}

		WaitFrame()
	}
}


bool function PassiveVantage_isCompatibleOptic( string opticRef )
{
	if (opticRef == "optic_cq_hcog_bruiser" ||
		opticRef == "optic_ranged_hcog" ||
		opticRef == "optic_ranged_aog_variable" ||
		opticRef == "optic_sniper" ||
		opticRef == "optic_sniper_variable" ||
		opticRef == "optic_sniper_threat")
	{
		return true
	}
	return false
}

bool function PassiveVantage_IsInCompatibleWeaponConfig( entity weapon )
{
	                               
	if ( (weapon.GetWeaponTypeFlags() & WPT_ULTIMATE) > 0 ||
					(weapon.GetWeaponTypeFlags() & WPT_VIEWHANDS) > 0 )
		return true

	if ( weapon.GetWeaponClassName() == KRABER_WEAPON_NAME )
		return true

	                                                                         
	                                                                             
	  							                                         
	  							                                          
	  
	                                 
	  	            

	string opticAttachment = GetInstalledWeaponAttachmentForPoint( weapon, "sight" )
	bool isCompatibleOptic = PassiveVantage_isCompatibleOptic( opticAttachment )

	if ( !isCompatibleOptic )
		return false

	return true
}
#if SERVER
                                                                   
 
	                         
		      

	                                                 
	                               
 
#endif

#if SERVER
                                                                  
 
	                         
		      

	                                                 
 
#endif

#if CLIENT
void function PlayVantageSpottedPingSounds( entity player, entity subjectEnt, var soundToWaitOn, CommsOptions opt )
{
	if ( !IsValid( player ) )
		return

	waitthread SuspendMainDialogueQueueForDurationOfSound( player, soundToWaitOn )

	if ( !IsValid( player ) )
		return

	int armorTier             = EquipmentSlot_GetEquipmentTier( subjectEnt, "armor" )
	array<entity> teamPlayers = GetPlayerArrayOfTeam( subjectEnt.GetTeam() )
	int teamCount             = teamPlayers.len()

	string vantageSoundName = ""
	var vantageSoundHandle

	string string1p3p       = opt.isFirstPerson ? "_1p" : "_3p"
	string calmUrgentString = opt.isUrgent ? "_urgent" : "_calm"

	vantageSoundName   = "diag_mp_test_ping_passiveShield" + calmUrgentString + string1p3p
	vantageSoundHandle = EmitSoundOnEntity( player, vantageSoundName )
	waitthread SuspendMainDialogueQueueForDurationOfSound( player, vantageSoundHandle )
	        

	if ( !IsValid( player ) )
		return

	vantageSoundName   = "diag_mp_wraith_ping_typeLevel" + armorTier + calmUrgentString + string1p3p
	vantageSoundHandle = EmitSoundOnEntity( player, vantageSoundName )
	waitthread SuspendMainDialogueQueueForDurationOfSound( player, vantageSoundHandle )

	if ( !IsValid( player ) )
		return

	string squadString = "Solo"
	if ( teamCount == 2 )
		squadString = "Duo"
	else if ( teamCount >= 3 )
		squadString = "Full"

	vantageSoundName   = "diag_mp_test_ping_passiveSquad" + squadString + calmUrgentString + string1p3p
	vantageSoundHandle = EmitSoundOnEntity( player, vantageSoundName )
	waitthread SuspendMainDialogueQueueForDurationOfSound( player, vantageSoundHandle )
}
#endif