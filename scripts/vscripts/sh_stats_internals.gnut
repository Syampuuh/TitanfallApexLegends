global function ShStatsInternals_LevelInit



#if SERVER || CLIENT || UI
global function ResolveStatEntry
global function GetStat_Int
                                      
global function GetStatEntryByIndex
global function IsValidStatEntryRef
global function GetStatEntryByRef
global function StatEntry_GetIndex
global function StatEntry_GetRef
global function StatEntry_GetType
global function StatEntry_GetBehavior
global function StatEntry_GetFlags
global function DoesStatSatisfyValue

global function RegisterAccumulatedStat_Int
global function RegisterVariableStat_Int
global function RegisterExpensiveCalculatedStat_Int
global function RegisterCachedCalculatedStat_Int
global function RegisterStatEnumStruct
global function HasStatCachingOptimizations
#endif

#if SERVER
                                               

                                        
                                  

                                   
                             

                                           
                                              

                                       
                                                            

                                                  
#endif

#if SERVER && DEV
                                                                                                                                                      
                                                                                                                                                       
#endif

const bool STATS_DEBUG_PRINT_SPAM = false
const int UNINITIALIZED = -2                                                                                  

                      
                      
                      
                      
                      

#if SERVER || CLIENT || UI
global enum eStatType
{
	INVALID,
	INT,
}
global enum eStatBehavior
{
	CALCULATED,                                                                 
	ACCUMULATED,                                       
	VARIABLE,                                          
}
global enum eStatFlags
{
	STORE_START_OF_PREVIOUS_MATCH = (1 << 0),
	PERSISTENCE_WRITE_IMMEDIATELY = (1 << 1),
}

                                                      
global struct CalcStatCache
{
	string statRef
	int timeStamp
	int value
	int when
}
#endif


#if SERVER || CLIENT || UI
global enum eStatGetWhen
{
	CURRENT,
	START_OF_CURRENT_MATCH,
	START_OF_PREVIOUS_MATCH,
}
#endif


#if SERVER || CLIENT || UI
global typedef StatChangedCallbackType_Int void functionref( entity player, int oldValue, int newValue )
#endif


#if SERVER || CLIENT || UI
global struct StatEntry
{
	int    index
	int    indexWithinType
	string persistenceFullKey_Current
	var    persistenceFullKey_Current_Handle
	string persistenceFullKey_StartOfPreviousMatch
	var    persistenceFullKey_StartOfPreviousMatch_Handle

	int    type = eStatType.INVALID
	int    behavior
	int    flags = 0
	bool   shouldCache                             

	array<string> enumKeys

	                                                           
	int functionref( entity player, array<StatEntry> sourceEntries, int when )       calcFunc_Int
	array<StatEntry> ornull															calcSourceEntries = null
	array<StatEntry> ornull															dependents = null
}
#endif


#if SERVER || CLIENT || UI
global struct StatCalcFuncInfo
{
	int functionref( entity player, array<StatEntry> sourceEntries, int when )   calcFunc_Int

	array<StatEntry> ornull															sourceEntries
}
#endif


#if SERVER || CLIENT || UI
global struct StatTemplateEnumKeyResolver
{
	bool isFinal

	table<string, StatTemplateEnumKeyResolver> children                        

	table<string, StatEntry> entries                       
}
#endif


#if SERVER || CLIENT || UI
global struct StatEnumStruct
{
	StatEnumStruct ornull parentEnumStruct

	string fieldName
	string enumName

	array<string> choices                                                                                              

	#if DEV
		string structName
	#endif
}
#endif


#if SERVER || CLIENT || UI
global struct StatTemplate
{
	            

	StatEnumStruct ornull parentEnumStruct

	int  type = eStatType.INVALID       
	int  behavior                                     
	int  flags = 0
	bool shouldCache = false                             

	string fieldName

	int enumKeyCount

	StatTemplateEnumKeyResolver& resolver                        

	StatEntry& rootEntry                         

	array<StatEntry> allEntries
}
#endif


#if (SERVER || CLIENT || UI) && DEV
struct StatEnumStruct_Children
{
	array<StatEnumStruct> childEnumStructs
	array<StatTemplate>   childStatTemplates
}
#endif



                       
                       
                       
                       
                       
struct FileStruct_LifetimeLevel
{
	#if SERVER || CLIENT || UI
		#if DEV
			StatEnumStruct_Children                        rootFieldsList                                 
			table<StatEnumStruct, StatEnumStruct_Children> sesChildrenMap        
		#endif

		array<StatEntry> stats_Int

		array<StatEntry>         allStats
		table<string, StatEntry> refStatEntryMap

		table< entity, array<CalcStatCache> > calculatedStatsCache                          
	#endif

	#if SERVER && DEV
		                               
	#endif

	int calculatedStatsCacheDurationSec = 30
	bool doOnDemandStats = false

	table< entity, array<StatEntry> > playerDirtyStats
}
FileStruct_LifetimeLevel& fileLevel

const string STATS_PERSISTENCE_PREFIX_CURRENT = "stats"
const string STATS_PERSISTENCE_PREFIX_START_OF_PREVIOUS_MATCH = "stats_sopm"

                           
                           
                           
#if DEV
void function StatCallStackCheck( bool DEV_isManualDevSet, int up = 1 )
{
	                                                                                                 
	string fileName =  FILE_NAME( up )
	if ( fileName != "sh_stats_internals.gnut" && fileName != "sh_stats.gnut" && DEV_isManualDevSet == false )
		Assert( false, "Tried to manipulate a stat from " + fileName + ". Do NOT call Stat manipulation functions directly EXCEPT in a DEV_ helper function." )
}
#endif



                         
                         
                         
                         
                         

#if SERVER || CLIENT || UI
void function ShStatsInternals_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if SERVER
		       
			                                                 
			                                                                         
			                                                                       
		      

		                                                          
	#endif

	#if SERVER || CLIENT
		Remote_RegisterServerFunction( "ClientCallback_UpdateSOPMStatValue", "string" )
	#endif

	#if SERVER && DEV
		                                                                                   
	#endif

	int lobbyMultiplier = IsLobby() ? 10 : 1                                                     
	fileLevel.calculatedStatsCacheDurationSec = lobbyMultiplier * GetCurrentPlaylistVarInt( "calc_stats_cache_duration_sec", 30 )
	fileLevel.doOnDemandStats = GetCurrentPlaylistVarBool( "do_on_demand_stats", true )
}
#endif



                          
                          
                          
                          
                          

array<StatEntry> function GetCalcSourceEntriesFromEntry( StatEntry entry )
{
	array<StatEntry> calcSourceEntries
	if ( entry.calcSourceEntries == null )
		return []
	return expect array<StatEntry>( entry.calcSourceEntries )
}

#if SERVER || CLIENT || UI
bool function HasStatCachingOptimizations()
{
	return fileLevel.calculatedStatsCacheDurationSec > 0
}
#endif


#if SERVER || CLIENT || UI
int function GetStat_Int( entity player, StatEntry entry, int when = eStatGetWhen.CURRENT )
{
	Assert( entry.type == eStatType.INT )
	#if CLIENT || UI
		if ( !(entry.flags & eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY) )
			Assert( when != eStatGetWhen.CURRENT || IsLobby(), format( "Cannot get current stats in client or UI VM during a match (they could be out of date): %s", entry.persistenceFullKey_Current ) )
	#endif

	if ( HasStatCachingOptimizations() )
	{
		int unixTime = GetUnixTimestamp()
		                                                                                                                                                                    
		                                                                                                                                         
		                                                                                                                                

		                                               
		                                                                      
		                                                                                                           
		                                                                                      
		   
		if ( ( when == eStatGetWhen.CURRENT || when == eStatGetWhen.START_OF_CURRENT_MATCH )
				&& entry.behavior == eStatBehavior.CALCULATED && !entry.shouldCache )
		{
			if ( player in fileLevel.calculatedStatsCache )
			{
				foreach ( CalcStatCache calcStat in fileLevel.calculatedStatsCache[player] )
				{
					if ( calcStat.when == when && calcStat.statRef == entry.persistenceFullKey_Current && unixTime <= calcStat.timeStamp + fileLevel.calculatedStatsCacheDurationSec )
						return calcStat.value
					else if ( calcStat.when == when && calcStat.statRef == entry.persistenceFullKey_Current && unixTime > calcStat.timeStamp + fileLevel.calculatedStatsCacheDurationSec )         
						fileLevel.calculatedStatsCache[player].fastremovebyvalue( calcStat )
				}

				                                                                                
				CalcStatCache calcStat
				calcStat.value = entry.calcFunc_Int( player, GetCalcSourceEntriesFromEntry( entry ), when )
				calcStat.timeStamp = unixTime
				calcStat.statRef = entry.persistenceFullKey_Current
				calcStat.when = when
				fileLevel.calculatedStatsCache[ player ].append( calcStat )

				return calcStat.value
			}
			else
			{
				                                                             
				CalcStatCache calcStat
				calcStat.value = entry.calcFunc_Int( player, GetCalcSourceEntriesFromEntry( entry ), when )
				calcStat.timeStamp = unixTime
				calcStat.statRef = entry.persistenceFullKey_Current
				calcStat.when = when
				fileLevel.calculatedStatsCache[ player ] <- [ calcStat ]

				return calcStat.value
			}
		}
	}
	else                                                  
	{
		if ( (when == eStatGetWhen.CURRENT || when == eStatGetWhen.START_OF_CURRENT_MATCH)
				&& entry.behavior == eStatBehavior.CALCULATED && !entry.shouldCache )
			return entry.calcFunc_Int( player, GetCalcSourceEntriesFromEntry( entry ), when )
	}

	#if DEV
		                                                               
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	#if SERVER

		                            
		                                
				                                                                     

		                                   
		 
			                                                                         
			                                                     
		 
		                                                       
		 
			                                                                                
			                                                            
		 
		                                                        
		 
			                                                                                                                                                                                                     
			                                                                                                   
			                                                                                           
		 
		           
	#elseif CLIENT || UI
		if ( when == eStatGetWhen.CURRENT || when == eStatGetWhen.START_OF_CURRENT_MATCH )
		{
			if ( !(entry.flags & eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY) )
				Assert( when != eStatGetWhen.CURRENT || IsLobby() )
			return expect int(player.GetPersistentVar( entry.persistenceFullKey_Current ))
		}
		else if ( when == eStatGetWhen.START_OF_PREVIOUS_MATCH )
		{
			Assert( entry.flags & eStatFlags.STORE_START_OF_PREVIOUS_MATCH, "Tried to get with eStatGetWhen.START_OF_PREVIOUS_MATCH on a stat that does not have eStatFlags.STORE_START_OF_PREVIOUS_MATCH set." )
			return expect int(player.GetPersistentVar( entry.persistenceFullKey_StartOfPreviousMatch ))
		}
		unreachable
	#endif
}
#endif


#if SERVER || CLIENT || UI
StatEntry function GetStatEntryByIndex( int index )
{
	return fileLevel.allStats[index]
}
#endif


#if SERVER || CLIENT || UI
bool function IsValidStatEntryRef( string ref )
{
	return (ref in fileLevel.refStatEntryMap)
}
#endif


#if SERVER || CLIENT || UI
StatEntry function GetStatEntryByRef( string ref )
{
	return fileLevel.refStatEntryMap[ref]
}
#endif


#if SERVER || CLIENT || UI
int function StatEntry_GetIndex( StatEntry entry )
{
	return entry.index
}
#endif


#if SERVER || CLIENT || UI
string function StatEntry_GetRef( StatEntry entry )
{
	return entry.persistenceFullKey_Current
}
#endif


#if SERVER || CLIENT || UI
int function StatEntry_GetType( StatEntry entry )
{
	return entry.type
}
#endif


#if SERVER || CLIENT || UI
int function StatEntry_GetBehavior( StatEntry entry )
{
	return entry.behavior
}
#endif


#if SERVER || CLIENT || UI
int function StatEntry_GetFlags( StatEntry entry )
{
	return entry.flags
}
#endif


#if SERVER || CLIENT || UI
bool function DoesStatSatisfyValue( entity player, StatEntry entry, float checkValue, int when = eStatGetWhen.CURRENT )
{
	Assert( float(int(checkValue)) == checkValue )
	int value = GetStat_Int( player, entry, when )
	return (value >= int(checkValue))
}
#endif


#if SERVER
                                                                                                           
 
	                                                                                                                                                                         
	                                                                              
	                                                                     
		                                                                        
	    
		                                                                         

	                                                              
	                      
 
                                                                                                              
 
	                                                                                                  
	                                                                                                                                             
	                                                            
	                                 
	                           
		                                                                     
 
#endif


#if SERVER
                                       
 
	                                                  
	                                                                                                               
	                                      
	 
		                    
	 
 
#endif


#if SERVER
                                                    
 
	                                
	 
		                                                                          
		                                                                                 
	 
	    
	 
		                                                              
		                                                                     
	 

	       
		                                                               
		                                    
			      
	      

	                                         
	 
		                                                             
		 
			                                                                    
		 
	 
	                                                             
	 
		                                              
		                                          
	 
 
#endif


#if SERVER
                                                                           
 
	                    
	                
	 
		                                               
			                                               

		                                           
			                                           
	 
 
#endif



                       
                       
                       
                       
                       

#if SERVER || CLIENT || UI
string function GetStatTemplateDebugName( StatTemplate template )
{
	string sesPart                 = ""
	StatEnumStruct ornull ancestor = template.parentEnumStruct
	while ( ancestor != null )
	{
		{
			expect StatEnumStruct(ancestor)
			sesPart = format( ".%s[%s]%s", ancestor.fieldName, ancestor.enumName, sesPart )
		}
		ancestor = expect StatEnumStruct(ancestor).parentEnumStruct
	}

	return format( "stats%s.%s", sesPart, template.fieldName )
}
#endif


#if SERVER && DEV
                                                                                          
 
	                         
	                                                                    
 
#endif


#if SERVER && DEV
                                                 
 
	                                   
	                                           
	 
		                                                                                          
		          
			                                                                                                                                   
		      
	 
 
#endif


#if SERVER && DEV
                                                                           
 
	                                        

	                                                             
		                                                                                    
 
#endif


#if SERVER && DEV
                                                                          
 
	                        

	                                      
	 
		                            
		      
	 

	                                              
	                                                  

 
#endif



                   
                   
                   
                   
                   

#if SERVER
                                                                                      
 
	                            

	                      
	 
		       
			                                   
			     
		       
			                                              
			     
		       
			                                                         
			     
		       
			                                                                    
			     
	 

	           
 

                                                                                   
 
	                                                                           

	                                                                                             

	                                                 
	 
		                                   

		                          

		                                                            

		                          

		                                     
		 
			                         
		 

		                               

		                                                             

		                                                     
	 
 

                                                                             
 
	                                                                           

	                                                                                             

	                                                 
	 
		                                   

		                          

		                                                            

		                          
		                                     
		 
			                         
		 

		                               

		                                                             
		                                               
	 
 

                                                                                                
 
	                               
	 
		                                                                         
		                                            
			                                                     
	 
 

                                                                                                                         
 
	                                     
	                                                                                                 
	                              

	       
		                                        
	      

	       
		                                           
			                                                                                 
	      

	                            
	                                
		                                                                     

	                                                             
	                                         
	                                                         

	                                   
	                                
		      

	                             
		                                                                                                                             

	                                                                     
		                                                                                                         
			                                

	                                                                 

       
	                                     
      
	 
		                                                                                                           
		 
			                                                                     
		 
		                                     
		 
			                                         
		 
	 
 
#endif


#if SERVER
                                                                                                            
 
	                                     

	       
		                                        
	      

	       
		                                                                  
			                                                                   
	      

	                                
		                                                                     

	                                                             
	                                   
	                                                        
		      

	                                                                                                                                                
		                                                                                                            
	                                                         

	                             
		                                                                                                                       

	                                                                     
		                                                                                                         
			                                

	                                                                 

       
	                                     
      
	 
		                                                                                                           
		 
			                                                                     
		 
		                                     
		 
			                                         
		 
	 
 
#endif


#if SERVER
                                                                               
 
	                                                                         

	                                
		                                                                     

	                                                                                                      
	                                
	                                                                                        
	 
		                                                      

		                
			                                                                                                                        
		                                     
			                                         

		                             
			                                                                                                            
	 
 
#endif


#if SERVER
                                                                                    
 
	                                                                         
	 
		                
		                                                                                        
		                                                                                                             
			                                
	 

	                                                                     
 
#endif


#if SERVER || CLIENT || UI
StatEntry function ResolveStatEntry( StatTemplate template, ... )
{
	Assert( template.type != eStatType.INVALID, "StatTemplate was not initialized." )

	int keyArgCount = expect int(vargc)
	Assert( keyArgCount == template.enumKeyCount, "Stat '" + GetStatTemplateDebugName( template ) + "' requires " + template.enumKeyCount + " enum keys but ResolveStatEntry was called with " + keyArgCount + "." )

	if ( vargc == 0 )
		return template.rootEntry

	StatTemplateEnumKeyResolver resolver = template.resolver
	for ( int resolveDepth = 0; resolveDepth < keyArgCount - 1; resolveDepth++ )
	{
		Assert( !resolver.isFinal )
		string key = expect string(vargv[resolveDepth])

                                             
                                               
                                                                   
        

		resolver = resolver.children[key]
	}
	Assert( resolver.isFinal )
	string key = expect string(vargv[keyArgCount - 1])

                                            
                                              
                                                                  
       

	#if SERVER && DEV
		                                                                     
		                                 
		 
			                                                                                                             
			                         
		 
	#endif

	return resolver.entries[key]
}

                                           
                                                                                 
 
                                                   
                                                                        
                                                                                      
                                                                                
                                                                               
                                                                                   
                                                                        
                                                                                 
                                                            
    
                                                                                      
                                     
  
                                                    
                                                               
   
                                                                   
                                                                              
   
  
           
 
             
#endif                          


#if SERVER || CLIENT || UI
StatEnumStruct function RegisterStatEnumStruct( StatEnumStruct ornull parentSESOrNull, string fieldName, string enumName, array<string> choices )
{
	StatEnumStruct ses
	ses.parentEnumStruct = parentSESOrNull
	ses.fieldName = fieldName
	ses.enumName = enumName
	ses.choices = choices

	#if DEV
		if ( parentSESOrNull == null )
		{
			fileLevel.rootFieldsList.childEnumStructs.append( ses )
		}
		else
		{
			StatEnumStruct parentSES = expect StatEnumStruct(parentSESOrNull)
			StatEnumStruct_Children sesChildren
			if ( parentSES in fileLevel.sesChildrenMap )
				sesChildren = fileLevel.sesChildrenMap[parentSES]
			else
				fileLevel.sesChildrenMap[parentSES] <- sesChildren
			sesChildren.childEnumStructs.append( ses )
		}
	#endif

	return ses
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function InternalRegisterStatCommon( StatEnumStruct ornull parentSESOrNull, string fieldName, int type, int behavior, int flags, bool shouldCache )
{
	StatTemplate template

	template.fieldName = fieldName
	template.type = type
	template.behavior = behavior
	template.flags = flags
	template.shouldCache = shouldCache
	Assert( !shouldCache || template.behavior == eStatBehavior.CALCULATED )

	if ( parentSESOrNull == null )
	{
		template.rootEntry.type = template.type
		template.rootEntry.behavior = template.behavior
		template.rootEntry.flags = template.flags
		template.rootEntry.shouldCache = template.shouldCache

		template.rootEntry.persistenceFullKey_Current = STATS_PERSISTENCE_PREFIX_CURRENT + "." + fieldName
		if ( template.rootEntry.behavior != eStatBehavior.CALCULATED || template.rootEntry.shouldCache )
		{
#if DEV
			                                                               
			if ( !DEV_ShouldIgnorePersistence() )
#endif
			{
				template.rootEntry.persistenceFullKey_Current_Handle = PersistenceGetVarHandle( template.rootEntry.persistenceFullKey_Current )
			}
		}

		if ( (template.flags & eStatFlags.STORE_START_OF_PREVIOUS_MATCH) > 0 )
		{
			template.rootEntry.persistenceFullKey_StartOfPreviousMatch = STATS_PERSISTENCE_PREFIX_START_OF_PREVIOUS_MATCH + "." + fieldName

#if DEV
			                                                               
			if ( !DEV_ShouldIgnorePersistence() )
#endif
			{
				template.rootEntry.persistenceFullKey_StartOfPreviousMatch_Handle = PersistenceGetVarHandle( template.rootEntry.persistenceFullKey_StartOfPreviousMatch )
			}
		}

		template.rootEntry.index = fileLevel.allStats.len()
		fileLevel.allStats.append( template.rootEntry )

		fileLevel.refStatEntryMap[template.rootEntry.persistenceFullKey_Current] <- template.rootEntry

		template.rootEntry.indexWithinType = fileLevel.stats_Int.len()
		fileLevel.stats_Int.append( template.rootEntry )

		#if DEV
			fileLevel.rootFieldsList.childStatTemplates.append( template )
		#endif

		template.allEntries.append( template.rootEntry )
	}
	else
	{
		StatEnumStruct parentSES = expect StatEnumStruct(parentSESOrNull)

		#if DEV
			StatEnumStruct_Children sesChildren
			if ( parentSES in fileLevel.sesChildrenMap )
				sesChildren = fileLevel.sesChildrenMap[parentSES]
			else
				fileLevel.sesChildrenMap[parentSES] <- sesChildren
			sesChildren.childStatTemplates.append( template )
		#endif

		array<StatEnumStruct> sesAncestorsReversed = []
		StatEnumStruct ornull ancestorOrNull       = parentSESOrNull
		while ( ancestorOrNull != null )
		{
			StatEnumStruct ancestor = expect StatEnumStruct(ancestorOrNull)
			sesAncestorsReversed.append( ancestor )
			ancestorOrNull = ancestor.parentEnumStruct
		}

		template.enumKeyCount = sesAncestorsReversed.len()
		template.resolver = BuildStatTemplateEnumKeyResolversRecursive( template, 0, sesAncestorsReversed, template, "", [] )
	}

	return template
}
#endif


#if SERVER || CLIENT || UI
StatTemplateEnumKeyResolver function BuildStatTemplateEnumKeyResolversRecursive( StatTemplate template, int depth, array<StatEnumStruct> sesAncestorsReversed, StatTemplate stat, string partialKey, array<string> enumKeys )
{
	StatTemplateEnumKeyResolver resolver

	StatEnumStruct ancestor = sesAncestorsReversed[sesAncestorsReversed.len() - 1 - depth]

	if ( depth == sesAncestorsReversed.len() - 1 )
	{
		resolver.isFinal = true
		foreach ( string choice in ancestor.choices )
		{
			array<string> grownEnumKeys = []
			grownEnumKeys.extend( enumKeys )
			grownEnumKeys.append( choice )

			StatEntry entry
			entry.type = template.type
			entry.behavior = template.behavior
			entry.flags = template.flags
			entry.shouldCache = template.shouldCache

			string entryPersistencePartialKey = partialKey + ancestor.fieldName + "[" + choice + "]" + "." + stat.fieldName
			entry.persistenceFullKey_Current = STATS_PERSISTENCE_PREFIX_CURRENT + "." + entryPersistencePartialKey

			if ( entry.behavior != eStatBehavior.CALCULATED || entry.shouldCache )
			{
#if DEV
				                                                               
				if ( !DEV_ShouldIgnorePersistence() )
#endif
				{
					entry.persistenceFullKey_Current_Handle = PersistenceGetVarHandle( entry.persistenceFullKey_Current )
				}
			}

			if ( (entry.flags & eStatFlags.STORE_START_OF_PREVIOUS_MATCH) > 0 )
			{
				entry.persistenceFullKey_StartOfPreviousMatch = STATS_PERSISTENCE_PREFIX_START_OF_PREVIOUS_MATCH + "." + entryPersistencePartialKey

#if DEV
				                                                               
				if ( !DEV_ShouldIgnorePersistence() )
#endif
				{
					entry.persistenceFullKey_StartOfPreviousMatch_Handle = PersistenceGetVarHandle( entry.persistenceFullKey_StartOfPreviousMatch )
				}
			}
			entry.enumKeys = grownEnumKeys

			entry.index = fileLevel.allStats.len()
			fileLevel.allStats.append( entry )

			fileLevel.refStatEntryMap[entry.persistenceFullKey_Current] <- entry

			entry.indexWithinType = fileLevel.stats_Int.len()
			fileLevel.stats_Int.append( entry )


			resolver.entries[choice] <- entry

			template.allEntries.append( entry )
		}
	}
	else
	{
		resolver.isFinal = false
		foreach ( string choice in ancestor.choices )
		{
			string grownPartialKey      = partialKey + ancestor.fieldName + "[" + choice + "]."
			array<string> grownEnumKeys = []
			grownEnumKeys.extend( enumKeys )
			grownEnumKeys.append( choice )
			StatTemplateEnumKeyResolver subResolver = BuildStatTemplateEnumKeyResolversRecursive( stat, depth + 1, sesAncestorsReversed, stat, grownPartialKey, grownEnumKeys )
			resolver.children[choice] <- subResolver
		}
	}

	return resolver
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function RegisterAccumulatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName, int flags = 0 )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.ACCUMULATED, flags, false )
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function RegisterVariableStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName, int flags = 0 )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.VARIABLE, flags, false )
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function InternalRegisterCalculatedStatCommon( StatEnumStruct ornull enumStructOrNull, string fieldName, int flags, bool shouldCache,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	StatTemplate stat = InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.CALCULATED, flags, shouldCache )

	                                                           
	  	                                                                                                                                       

	foreach( StatEntry entry in stat.allEntries )
	{
		StatCalcFuncInfo calcInfo = setupFunc( entry, sourceTemplates )
		entry.calcFunc_Int = calcInfo.calcFunc_Int
		entry.calcSourceEntries = calcInfo.sourceEntries

		if ( calcInfo.sourceEntries != null )
		{
			array<StatEntry> sourceEntries = expect array<StatEntry>( calcInfo.sourceEntries )
			foreach( StatEntry sourceEntry in sourceEntries )
			{
				if ( sourceEntry.dependents == null )
					sourceEntry.dependents = []
				array<StatEntry> dependents = expect array<StatEntry>( sourceEntry.dependents )
				dependents.append( entry )
			}
		}
	}

	return stat
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function RegisterExpensiveCalculatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName, int flags,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	return InternalRegisterCalculatedStatCommon( enumStructOrNull, fieldName, flags, false, setupFunc, sourceTemplates )
}
#endif


#if SERVER || CLIENT || UI
StatTemplate function RegisterCachedCalculatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName, int flags,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	return InternalRegisterCalculatedStatCommon( enumStructOrNull, fieldName, flags, true, setupFunc, sourceTemplates )
}
#endif


#if SERVER

                                         
 
	                           

	       
		                                                               
		                                    
			      
	      

	                                                                                                                                             
	                                
	 
		                                           
		 
			                                                                   
			 
				                                 
				                                                                                   
			 
		 
	 
	    
	 
		                                                             
		 
			                                                                                   
		 
	 
 

#endif

#if SERVER
                                                                        
 
	       
		                                    
			      
	      

	                                                                                
	                                                        
	 
		                                              
		                                          
	 

	                                                                      
	 
		                                                    
	 
 
#endif

#if SERVER
                                                                                                                  
 
	                                 
	                                                                        
	 
		                                                                      
		 
			                                                                                                         
			                                                                      

			                                                                                                                                                           
		 

		                                                                                                             
		 
			                                                                                          
			                                                                                                                                                       
		 
	 
 
#endif


#if SERVER
                                                                             
 
	                                                                 

	                                               
		      

	                                    
	                                 
	 
		                                          
		                                                                    
			      

		                                                                   
		                                                                                                                                      
		                                  
			                                                                                                   
	 
 
#endif


#if SERVER
                                                                                                                           
 
	                                                                      
	 
		                                                                                               
		                                               
		                                                                                                                         
		                                  
			                                                                                      
	 

	                                                                                                                     
	 
		                                                                                                                   
		                                                      
		                                                                                                                                      
		                                  
			                                                                                                   
	 
 
#endif


#if SERVER && DEV
                                     
 
	                                           

	                                                         
	 
		                                                             
		                                                     
			                                           
	 
	                                                                                                          
	                                                                                                                          

	                
	                                                                                                                 
	                     
	                                                                                                                                                                                      
	                     

	                                      
	                                                                             
	                                                                                                 
	                           
 
#endif


#if SERVER && DEV
                                                                                                                                       
 
	                                       
	                                                                                
	 
		                                                                                               
			                               
	 

	                                      
	                                                                            
	 
		                                                         
			                            
	 

	                                                          
		            

	                                              
	                                              
	 
		                                                                                       
	 
	                                              
	 
		                                                         
			                                                       
	 
	                       

	           
 
#endif


#if SERVER && DEV
                                                                                                                                                               
 
	                              
	 
		                                                       
	 
	    
	 
		                                                                 
		                                                           
	 

	                                
	                                      
		                                        

	                                       
	                                                                
	 
		                                                                                                 
			                               
	 

	                                      
	                                                            
	 
		                                                         
			                            
	 

	                                                          
		            

	                                         
	                                                   
	 
		                                                                                                      
	 
	                                              
	 
		                                                       
	 
	                       

	           
 
#endif


#if SERVER && DEV
                                                                                      
 
	                                                                     
	 
		                                          
		                                                                    
			      
	 

	                                                                             
	                                          
 
#endif


