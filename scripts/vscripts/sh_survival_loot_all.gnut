global function SURVIVAL_Loot_All_InitShared

global function SURVIVAL_Loot_GetLootDataTable
global function SURVIVAL_Loot_GetLootDataByIndex
global function SURVIVAL_Loot_IsLootIndexValid
global function SURVIVAL_Loot_GetLootDataByRef
global function SURVIVAL_Loot_IsRefValid
global function SURVIVAL_Loot_IsRefDisabled
global function SURVIVAL_Loot_IsReforBaseWeaponDisabled
global function SURVIVAL_Loot_AddDisabledRef
global function SURVIVAL_Loot_GetByType
global function SURVIVAL_Loot_GetLootTypeFromString
global function SURVIVAL_Loot_GetAttachmentType_Enum
global function SURVIVAL_Loot_GetByTier

#if CLIENT || SERVER
global function SURVIVAL_Loot_IsRestrictedPanelLocked
global function SURVIVAL_Loot_GetRestrictedLootType
global function SURVIVAL_Loot_GetRestrictedPanel
#endif

#if SERVER
                                                                
                                              
#endif

#if UI
global function SURVIVAL_Loot_GetRestrictedDialogArray
#endif

#if CLIENT || UI
global function SURVIVAL_Loot_GetPickupString
global function SURVIVAL_Loot_GetDesc

global function AddCallback_EditLootDesc
global function RemoveCallback_EditLootDesc
#endif



global function SURVIVAL_Loot_IsUniqueAmmoWeapon

#if CLIENT
global function GetRarityColor
#endif

#if SERVER
                                             
#endif

#if CLIENT && DEV
global function DumpModdedKeyColors
global function DiffKeyColors
#endif

                                           
global function GetFXRarityColorForTier                             
global function GetFXRarityColorForUnlockable                             

                  
      
                                                   
     
                                                            
      
      

global enum eLootTier
{
	NONE
	COMMON
	RARE
	EPIC
	LEGENDARY
	HEIRLOOM

	_count
}

global struct LootData
{
	string        ref
	int           tier
	int           index = -1
	int           inventorySlotCount
	int           pingCommsAction
	asset         model
	int           skinOverride
	asset         hudIcon
	asset		  craftingIcon
	asset         emptyImage
	string        attachSound
	string        pickupSound_1p
	string        pickupSound_3p
	string        carrySound
	string        pickupString
	string        desc
	string        hopupPopupDesc
	string        specialCaseInvalidReason
	int           countPerDrop
	int           lootType
	string        netInt
	array<string> supportedAttachments
	array<string> disabledAttachments
	array<string> lootTags
	string        ammoType
	string        secondaryAmmoType
	bool          isActive = false
	int           passive = -1
	string        attachmentStyle = ""
	int 		  attachmentType = -1
	int           scrapValue
	bool          droppodRotate = false
	bool          isDynamic = false
	bool          conditional = false
	bool          printPickupToObituary = false
	bool          pretendsToBeBlank = false
	bool          noDrop = false

	string        baseWeapon
	array<string> baseMods

	asset         fakeAmmoIcon
	array<string> fakeMods

	bool functionref( entity, entity, int ) extraCanUseFunction = null
}

global enum eWeaponAttachmentType
{
	NONE = -1,
	MAG,
	SCOPE,
	BARREL,
	STOCK,
	HOPUP
}

global enum eLootType
{
	INVALID
	MAINWEAPON                                               
	AMMO                                         
	HEALTH
	ARMOR
	INCAPSHIELD
	JUMPKIT
	ORDNANCE
	ATTACHMENT
	CUSTOMPICKUP
	BACKPACK
                   
           
       
                             
                 
       
	HELMET
                        
            
       
	BLANK
                       
		DATAKNIFE
       
                   
		SHIPKEYCARD
       
	RESOURCE
                     
             
       

	LOCKBOX
	GADGET

                    
		MARVIN_ARM
       

                        
                 
       

	_count
}

global const int NORMAL_UNRESTRICTED_LOOT = -1
global enum eRestrictedLootTypes
{
	VAULT,
	SHIP_VAULT,
	BLOODHOUND_TT,
	CAUSTIC_TT,
                   
		RAMPART_TT,
       
                       
		SPECTRE_SHACK,
       
}

struct RestrictedLootInfo
{
	#if SERVER || CLIENT
		entity functionref( entity ) getRestrictedPanel
		bool functionref( entity ) isRestrictedPanelLocked
	#endif
	#if SERVER
		                                                                             
	#endif
	#if UI
		string dialogPopupHeader
		string dialogPopupAreYouSure
		string dialogPopupDeny
	#endif
}

                  
                                      
      

                         
global const int HAS_DEATHBOX_OVERRIDE_FRIEND_PROFILES_TO_SEND = 3
      

                         
#if SERVER
                                                        
                                   
                                                
                                        
#endif              
                                   

                         
#if SERVER && DEV
                                              
#endif                     
                                   

global function IsDeathboxAutoPickupEnabled

#if CLIENT || SERVER
global function SetCallback_LootTypeExtraCanUseFunction
global function ClearCallback_LootTypeExtraCanUseFunction
#endif


                         
global struct OverrideDeathBoxRUI_NetworkOptimizedStruct
{
	string name
	string hardware
	string playerID
	int    characterIndex
	int    skinIndex
	int    frameIndex
	int    stanceIndex
	int    firstBadgeIndex
	int    firstBadgeDataInt
	int    secondBadgeIndex
	int    secondBadgeDataInt
	int    thirdBadgeIndex
	int    thirdBadgeDataInt

	bool isValid = false
}
      


struct
{
	table< string, LootData > lootData
	array<string>             lootIndexToString
	bool                      initialized
	array<string>             disabledRefs
	array<string>             uniqueAmmoWeaponRefs

	table<int, RestrictedLootInfo> restrictedLootInfo

                          
		table<EHI, array< OverrideDeathBoxRUI_NetworkOptimizedStruct > > EHIToOverrideDeathBoxRUIProfilesTable
		table<string, EHI>                                               corpseToEHITable
		array< OverrideDeathBoxRUI_NetworkOptimizedStruct >              handcraftedProfiles
		array< OverrideDeathBoxRUI_NetworkOptimizedStruct >              handcraftedProfilesMasterList                                                                                                 
       

                          
		#if UI
			bool                                                      overrideDeathBoxRUI_Initialized = false
			table<string, OverrideDeathBoxRUI_NetworkOptimizedStruct> overrideDeathBoxRUIProfilesTable
			int                                                       profilesSent = 0
		#endif          
                                    

	#if CLIENT || UI
	array<string functionref( string, entity , string)> editLootDescCallbacks
	#endif

} file


array<string> attachmentSortOrder = ["barrel", "mag", "sight", "grip", "hopup", "hopupMulti_a", "hopupMulti_b"]

string function GetLootTableString( string ref, var datatable, int rowIndex, string columnName )
{
	string val = GetDataTableString( datatable, rowIndex, GetDataTableColumnByName( datatable, columnName ) )

	if ( ShouldUsePlaylistOverridesBasedOnCalendarTime( ref, columnName ) )
		return GetCurrentPlaylistVarString( (ref + "_dt_override_" + columnName), val )

	return val
}


asset function GetLootTableAsset( string ref, var datatable, int rowIndex, string columnName )
{
	return GetDataTableAsset( datatable, rowIndex, GetDataTableColumnByName( datatable, columnName ) )
}


int function GetLootTableInt( string ref, var datatable, int rowIndex, string columnName )
{
	int val = GetDataTableInt( datatable, rowIndex, GetDataTableColumnByName( datatable, columnName ) )

	if ( ShouldUsePlaylistOverridesBasedOnCalendarTime( ref, columnName ) )
		return GetCurrentPlaylistVarInt( (ref + "_dt_override_" + columnName), val )

	return val
}


bool function GetLootTableBool( string ref, var datatable, int rowIndex, string columnName )
{
	bool val = GetDataTableBool( datatable, rowIndex, GetDataTableColumnByName( datatable, columnName ) )

	if ( ShouldUsePlaylistOverridesBasedOnCalendarTime( ref, columnName ) )
		return GetCurrentPlaylistVarBool( (ref + "_dt_override_" + columnName), val )

	return val
}


float function GetLootTableFloat( string ref, var datatable, int rowIndex, string columnName )
{
	float val = GetDataTableFloat( datatable, rowIndex, GetDataTableColumnByName( datatable, columnName ) )

	if ( ShouldUsePlaylistOverridesBasedOnCalendarTime( ref, columnName ) )
		return GetCurrentPlaylistVarFloat( (ref + "_dt_override_" + columnName), val )

	return val
}


bool function ShouldUsePlaylistOverridesBasedOnCalendarTime( string ref, string columnName )
{
	int startTime = expect int( GetCurrentPlaylistVarTimestamp( (ref + "_dt_override_unixTimeStart_" + columnName), UNIX_TIME_FALLBACK_2038 ) )
	int endTime   = expect int( GetCurrentPlaylistVarTimestamp( (ref + "_dt_override_unixTimeEnd_" + columnName), UNIX_TIME_FALLBACK_2038 ) )

	if ( startTime != UNIX_TIME_FALLBACK_2038 )
	{
		int unixTimeNow = GetUnixTimestamp()
		if ( (unixTimeNow >= startTime) && (unixTimeNow < endTime) )
		{
			return true
		}
		else
		{
			return false
		}
	}

	return true
}


void function SURVIVAL_Loot_All_InitShared()
{
	#if !UI
		                                                 
	#endif

	var dt = GetDataTable( $"datatable/survival_loot.rpak" )
	file.lootIndexToString.clear()
	file.lootData.clear()
	file.restrictedLootInfo.clear()

	var attachmentTable = GetDataTable( $"datatable/survival_weapon_mods.rpak" )

	#if UI
	file.disabledRefs.clear()
	#endif
	string disabledRefs = GetCurrentPlaylistVarString( "survival_disabled_loot", " " )
	file.disabledRefs.extend( split( disabledRefs, WHITESPACE_CHARACTERS ) )

	disabledRefs = GetCurrentPlaylistVarString( "survival_disabled_weapons", " " )
	file.disabledRefs.extend( split( disabledRefs, WHITESPACE_CHARACTERS ) )

	disabledRefs = GetCurrentPlaylistVarString( "global_disabled_loot", " " )
	file.disabledRefs.extend( split( disabledRefs, WHITESPACE_CHARACTERS ) )

	int numRows = GetDataTableRowCount( dt )
	for ( int i = 0; i < numRows; i++ )
	{
		LootData data
		data.ref = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "ref" ) )

		string pingCommsActionName = GetLootTableString( data.ref, dt, i, "pingCommsAction" )

		#if (SERVER || CLIENT)
			data.pingCommsAction = GetCommsActionEnumForName( pingCommsActionName )
		#endif

		string lootType = GetLootTableString( data.ref, dt, i, "type" )

		data.baseWeapon = GetLootTableString( data.ref, dt, i, "baseWeapon" )

		if ( data.baseWeapon == "" )
		{
			data.baseWeapon = data.ref
		}

		data.fakeAmmoIcon = GetLootTableAsset( data.ref, dt, i, "fakeAmmoIcon" )

		data.baseMods = split( GetLootTableString( data.ref, dt, i, "baseMods" ), WHITESPACE_CHARACTERS )

		data.model = GetLootTableAsset( data.ref, dt, i, "pickupModel" )
		data.skinOverride = GetLootTableInt( data.ref, dt, i, "skinOverride" )
		data.hudIcon = GetLootTableAsset( data.ref, dt, i, "icon" )
		data.attachSound = GetLootTableString( data.ref, dt, i, "attachSound" )
		data.pickupSound_3p = GetLootTableString( data.ref, dt, i, "pickupSound_3p" )
		data.pickupSound_1p = GetLootTableString( data.ref, dt, i, "pickupSound_1p" )
		data.carrySound = GetLootTableString( data.ref, dt, i, "carrySound" )
		data.scrapValue = GetLootTableInt( data.ref, dt, i, "scrapValue" )
		data.droppodRotate = GetLootTableBool( data.ref, dt, i, "droppodRotate" )
		data.isDynamic = GetLootTableBool( data.ref, dt, i, "isDynamic" )
		data.pretendsToBeBlank = GetLootTableBool( data.ref, dt, i, "pretendsToBeBlank" )
		data.noDrop = GetLootTableBool( data.ref, dt, i, "noDrop" )
		data.conditional = GetLootTableBool( data.ref, dt, i, "conditional" )
		data.printPickupToObituary = (data.ref == "treasure_box")                                                                  

		data.pickupString = GetLootTableString( data.ref, dt, i, "pickupString" )
		data.desc = GetLootTableString( data.ref, dt, i, "desc" )

		data.countPerDrop = GetLootTableInt( data.ref, dt, i, "countPerDrop" )
		data.tier = GetLootTableInt( data.ref, dt, i, "tier" )
		#if SERVER
			                                                                  
		#endif

		if ( GetLootTableBool( data.ref, dt, i, "isDisabled" ) )
			file.disabledRefs.append( data.ref )

		string supportedAttachmentsString  = GetLootTableString( data.ref, dt, i, "supportedAttachments" )
		array<string> supportedAttachments = split( supportedAttachmentsString, WHITESPACE_CHARACTERS )
		supportedAttachments.sort(
			int function( string attachmentA, string attachmentB ) : ()
			{
				int aIndex = attachmentSortOrder.find( attachmentA )
				int bIndex = attachmentSortOrder.find( attachmentB )
				if ( aIndex > bIndex )
					return 1
				else if ( aIndex < bIndex )
					return -1

				return 0
			}
		)
		data.supportedAttachments = supportedAttachments

		data.lootTags = split( GetLootTableString( data.ref, dt, i, "lootTags" ), WHITESPACE_CHARACTERS )

		data.lootType = SURVIVAL_Loot_GetLootTypeFromString( lootType )
		data.netInt = GetLootTableString( data.ref, dt, i, "netInt" )
		data.inventorySlotCount = GetLootTableInt( data.ref, dt, i, "inventorySlotCount" )

		string passiveRef = GetLootTableString( data.ref, dt, i, "passive" )
		if ( passiveRef == "" )
		{
			data.passive = ePassives.INVALID
		}
		else
		{
			Assert( passiveRef in ePassives )
			data.passive = ePassives[passiveRef]
			#if CLIENT || UI
				Assert( data.passive in PASSIVE_NAME_MAP )
				Assert( data.passive in PASSIVE_DESCRIPTION_SHORT_MAP )
			#endif
		}

		switch ( data.lootType )
		{
			case eLootType.MAINWEAPON:
				RegisterWeaponForUse( data.baseWeapon )
				data.pickupString = GetWeaponInfoFileKeyField_WithMods_GlobalString( data.baseWeapon, data.baseMods, "printName" )
				data.desc = GetWeaponInfoFileKeyField_WithMods_GlobalString( data.baseWeapon, data.baseMods, "description" )
				data.hudIcon = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "hud_icon" )
				data.craftingIcon = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "crafting_icon" )
				data.model = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "playermodel" )
				if ( GetWeaponInfoFileKeyField_Global( data.baseWeapon, "ammo_pool_type" ) != null && GetWeaponInfoFileKeyField_Global( data.baseWeapon, "uses_ammo_pool" ) != false )
				{
					                                           
					                                                                                           
					int type = GetWeaponInfoFileKeyField_GlobalInt( data.baseWeapon, "ammo_pool_type" )
					switch( type )
					{
						case 0:
							data.ammoType = "bullet"
							break
						case 1:
							data.ammoType = "highcal"
							break
						case 2:
							data.ammoType = "special"
							break
						case 3:
							data.ammoType = "shotgun"
							break
						case 4:
							data.ammoType = "sniper"
							break
						case 5:
							data.ammoType = "arrows"
							break
						default:
							data.ammoType = ""
							break
					}

				}
				else
				{
					data.ammoType = ""
				}

				if ( GetWeaponInfoFileKeyField_Global( data.baseWeapon, "secondary_ammo_pool_type" ) != null )
				{
					string type = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "secondary_ammo_pool_type" )
					switch( type )
					{
						case "bullet":
							data.secondaryAmmoType = "bullet"
							break
						case "highcal":
							data.secondaryAmmoType = "highcal"
							break
						case "special":
							data.secondaryAmmoType = "special"
							break
						case "shotgun":
							data.secondaryAmmoType = "shotgun"
							break
						case "sniper":
							data.secondaryAmmoType = "sniper"
							break
						case "arrows":
							data.secondaryAmmoType = "arrows"
							break
						default:
							data.secondaryAmmoType = ""
							break
					}
				}
				if ( data.fakeAmmoIcon != "" )
				{
					file.uniqueAmmoWeaponRefs.append( data.ref )
				}

				ItemFlavor ornull weaponFlavor = GetWeaponItemFlavorByClass( data.baseWeapon )
				if ( weaponFlavor != null )
				{
					expect ItemFlavor( weaponFlavor )

					int availableState = ItemFlavor_GetPlaylistAvailability( weaponFlavor )
					bool shouldBeEnabled
					if ( availableState == eItemFlavorPlaylistAvailability.FORCE_UNLOCK_FOR_SPECIAL_EVENT )
						shouldBeEnabled = true
					else if ( availableState == eItemFlavorPlaylistAvailability.HIDDEN )
						shouldBeEnabled = false
					else if ( availableState == eItemFlavorPlaylistAvailability.DISABLED )
						shouldBeEnabled = false
					else
						shouldBeEnabled = ItemFlavor_IsActiveForEdition( weaponFlavor, GetConVarInt( "mtx_svEdition" ) )

					if ( !shouldBeEnabled )
						file.disabledRefs.append( data.ref )
				}

				break

			case eLootType.ORDNANCE:
			case eLootType.GADGET:
				RegisterWeaponForUse( data.baseWeapon )
				data.pickupString = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "printName" )
				data.desc = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "description" )
				data.hudIcon = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "hud_icon" )
				break

			case eLootType.AMMO:
				data.countPerDrop = int( GetCurrentPlaylistVarFloat( "loot_ammo_scale_per_drop", 1.0 ) * float( data.countPerDrop ) )
				data.inventorySlotCount = int( GetCurrentPlaylistVarFloat( "inventory_ammo_scale_stacksize", 1.0 ) * float( data.inventorySlotCount ) )
				break

			case eLootType.ATTACHMENT:
				int row = GetDataTableRowMatchingStringValue( attachmentTable, GetDataTableColumnByName( attachmentTable, "mod" ), data.ref )
				data.pickupString = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "name" ) )
				data.desc = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "description" ) )
				data.hopupPopupDesc = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "hopupPopupDesc" ) )

				data.ammoType = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "ammoType" ) )
				data.hudIcon = GetLootTableAsset( data.ref, dt, i, "icon" )
				data.specialCaseInvalidReason = ""                                                                                                                     
				if ( data.hudIcon == $"" )
					data.hudIcon = GetDataTableAsset( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "image" ) )

				string attachmentPointStr = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "attachmentPoint" ) )
				array<string> attachmentPointList = split( attachmentPointStr, WHITESPACE_CHARACTERS )
				data.attachmentStyle = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "type" ) )
				data.attachmentType = SURVIVAL_Loot_GetAttachmentType_Enum( attachmentPointList[0] )
				data.emptyImage = GetDataTableAsset( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "emptyImage" ) )

#if (SERVER || CLIENT)
				foreach ( string attachmentPoint in attachmentPointList )
				{
					RegisterAttachmentPoint( attachmentPoint )
				}
#endif
				break
		}

		{
			data.index = file.lootIndexToString.len()
			file.lootIndexToString.append( data.ref )
			file.lootData[ data.ref ] <- data

			#if SERVER
				                                       
			#endif
		}

		#if !UI
			if ( data.model != $"" )
				PrecacheModel( data.model )
		#endif
	}

                  
                       
                    
   
         
                        
        
                                     
            
                                         
                                                      
                                              
    
                                                                     
                                              
                             
    
                                                                                                 
   
                        

                         
		#if UI
			RegisterSignal( "GatherFriendInfo" )
			RegisterSignal( "GatheredEnoughFriendInfo" )
			SURVIVAL_UIInit_Override_DeathBox_RUI()
		#endif          

		#if SERVER
			                                           
		#endif              
                                    

	SURVIVAL_Loot_InitRestrictedLoot()

	file.initialized = true
}


table< string, LootData > function SURVIVAL_Loot_GetLootDataTable()
{
	return file.lootData
}


array<LootData> function SURVIVAL_Loot_GetByType( int lootType )
{
	array<LootData> lootOfType = []
	foreach ( string lootRef, LootData lootData in file.lootData )
	{
		if ( lootData.lootType != lootType )
			continue

		lootOfType.append( lootData )
	}

	return lootOfType
}

array<LootData> function SURVIVAL_Loot_GetByTier( int tier )
{
	array<LootData> lootOfTier = []
	foreach ( string lootRef, LootData lootData in file.lootData )
	{
		if ( lootData.tier!= tier )
			continue

		if ( SURVIVAL_Loot_IsRefDisabled( lootData.ref ) )
			continue

		printt( lootData.ref )

		lootOfTier.append( lootData )
	}

	return lootOfTier
}


int function SURVIVAL_Loot_GetLootTypeFromString( string lootTypeString )
{
	Assert( lootTypeString != "", "Loot Type has null type defined in survival_loot.csv" )

	switch( lootTypeString )
	{
		case "main_weapon":
			return eLootType.MAINWEAPON

		case "ammo":
			return eLootType.AMMO

		case "health":
			return eLootType.HEALTH

		case "armor":
			return eLootType.ARMOR

		case "incapshield":
			return eLootType.INCAPSHIELD

		case "jumpkit":
			return eLootType.JUMPKIT

		case "ordnance":
			return eLootType.ORDNANCE

		case "attachment":
			return eLootType.ATTACHMENT

		case "backpack":
			return eLootType.BACKPACK

		case "custom_pickup":
			return eLootType.CUSTOMPICKUP

		case "helmet":
			return eLootType.HELMET

                       

                    
                              
      

                      

		case "data_knife":
			return eLootType.DATAKNIFE
      

                  
		case "ship_keycard":
			return eLootType.SHIPKEYCARD
      

		case "blank":
			return eLootType.BLANK

		case "resource":
			return eLootType.RESOURCE

                    
                     
                               
      

		case "lockbox":
			return eLootType.LOCKBOX

                  
                   
                             
      

                            
                          
                                     
      

		case "gadget":
			return eLootType.GADGET

                   
		case "marvin_arm":
			return eLootType.MARVIN_ARM
      

                       
                         
                                   
                             

		default:
			                                                                                                
			string warnMsg = "Error Building LootData Struct: Unknown loot type string: "
			Warning( warnMsg + lootTypeString )
			return eLootType.BLANK
	}

	unreachable
}

int function SURVIVAL_Loot_GetAttachmentType_Enum( string attachmentType )
{
	int attachmentStyle = eWeaponAttachmentType.NONE
	switch( attachmentType )
	{
		case "mag":
			attachmentStyle = eWeaponAttachmentType.MAG
			break
		case "sight":
			attachmentStyle = eWeaponAttachmentType.SCOPE
			break
		case "barrel":
			attachmentStyle = eWeaponAttachmentType.BARREL
			break
		case "grip":
		case "stock":
			attachmentStyle = eWeaponAttachmentType.STOCK
			break
		case "hopup":
			attachmentStyle = eWeaponAttachmentType.HOPUP
			break
		default:
			break
	}
	return attachmentStyle
}

LootData function SURVIVAL_Loot_GetLootDataByIndex( int index )
{
	return file.lootData[ file.lootIndexToString[ index ] ]
}


bool function SURVIVAL_Loot_IsLootIndexValid( int index )
{
	return file.lootIndexToString.isvalidindex( index )
}


LootData function SURVIVAL_Loot_GetLootDataByRef( string ref )
{
	#if SERVER || CLIENT
		if ( ref == "" )
		{
			                                                                                             
			                                                                                    
			string stack = GetStack(3)
			ForceScriptError("Calling SURVIVAL_Loot_GetLootDataByRef with empty string from " + stack)
		}
	#endif                    
	return file.lootData[ ref ]
}


bool function SURVIVAL_Loot_IsRefValid( string ref )
{
	return (ref in file.lootData)
}


                  
      
                                                  
     
                                                                          
      
 
               
                                                        
  
                                                           
                                           
           

                                                             

        
                                                   
       
                                                          
        

                     
  

              
 
                        


bool function SURVIVAL_Loot_IsRefDisabled( string ref )
{
	return file.disabledRefs.contains( ref )
}

bool function SURVIVAL_Loot_IsReforBaseWeaponDisabled( string ref )
{
	if( SURVIVAL_Loot_IsRefDisabled( ref ) )
		return true

	                                               
	if( !SURVIVAL_Loot_IsRefValid( ref ) )
		return true

	                                                                  
	LootData lootData = SURVIVAL_Loot_GetLootDataByRef( ref )
	if( lootData.lootType == eLootType.MAINWEAPON && SURVIVAL_Loot_IsRefDisabled( lootData.baseWeapon ) )
		return true

	return false
}

void function SURVIVAL_Loot_AddDisabledRef( string ref )
{
	if ( !file.disabledRefs.contains( ref ) )
	{
		file.disabledRefs.append( ref )
	}
}


#if CLIENT
vector function GetRarityColor( entity ent )
{
	int lootIndex = ent.GetSurvivalInt()
	Assert( lootIndex >= 0 )
	LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( lootIndex )

	return GetKeyColor( COLORID_TEXT_LOOT_TIER0, lootData.tier )
}
#endif


#if SERVER
                                                                           
                     
                      
                      

                      
                     
                      

                           
                           
                          

                                        
                                                
                                                       
                                                       
                                                                           
                                              
                                                    
#endif


                                                          
   
  	                     
   


                            
vector function GetFXRarityColorForTier( int tier )
{
	#if SERVER
		               
		 
			                    
				                      

			                      
				                        

			                    
				                      

			                    
				                      

			                         
				                           

			                        
				                          

			        
				                      
		 
	#endif

	#if !SERVER
		return GetKeyColor( COLORID_FX_LOOT_TIER0, tier )
	#endif

	unreachable
}


                            
vector function GetFXRarityColorForUnlockable( int tier )
{
	#if SERVER
		               
		 
			                    
				                      

			                      
				                        

			                    
				                      

			                    
				                      

			                         
				                           

			                        
				                          

			        
				                      
		 
	#endif

	#if !SERVER
		return GetKeyColor( COLORID_FX_LOOT_TIER0, tier + 1 )
	#endif

	unreachable
}


#if CLIENT && DEV
void function DumpModdedKeyColors( int colorID, float modVal )
{
	for ( int index = 0; index < 6; index++ )
	{
		vector color = ColorPalette_GetColorFromID( colorID + index ) / 255.0
		color = SrgbToLinear( color )
		color *= modVal
		color = LinearToSrgb( color ) * 255.0

		printt( index + ", ", int( color.x ) + " ", int( color.y ) + " ", int( color.z ) )
	}
}
#endif


#if CLIENT && DEV
void function DiffKeyColors( int baseColorID, int colorID )
{
	var datatable = GetDataTable( $"datatable/colorpalette_table.rpak" )
	for ( int index = 0; index < 6; index++ )
	{
		vector baseColor  = ColorPalette_GetColorFromID( baseColorID + index )
		vector otherColor = ColorPalette_GetColorFromID( colorID + index )

		float deltaX = (baseColor.x - otherColor.x) / 255.0
		float deltaY = (baseColor.y - otherColor.y) / 255.0
		float deltaZ = (baseColor.z - otherColor.z) / 255.0

		vector protanColor = GetDataTableVector( datatable, baseColorID + index, 2 )
		vector deuterColor = GetDataTableVector( datatable, baseColorID + index, 3 )
		vector tritanColor = GetDataTableVector( datatable, baseColorID + index, 4 )

		printt( index + ", ", deltaX + " ", deltaY + " ", deltaZ )
	}
}
#endif


bool function SURVIVAL_Loot_IsUniqueAmmoWeapon( string ref )
{
	return file.uniqueAmmoWeaponRefs.contains( ref )
}


#if CLIENT || UI
string function SURVIVAL_Loot_GetPickupString( LootData data, entity forPlayer )
{
	string result = Localize( data.pickupString )

	if ( data.passive != ePassives.INVALID )
	{
		string passiveName = PASSIVE_NAME_MAP[data.passive]
		result = Localize( "#HUD_LOOT_WITH_PASSIVE", result, Localize( passiveName ) )
	}

	return result
}
#endif


#if CLIENT || UI
string function SURVIVAL_Loot_GetDesc( LootData data, entity forPlayer )
{
	string result = Localize( data.desc )

	if ( data.passive != ePassives.INVALID )
	{
		string passiveName = PASSIVE_NAME_MAP[data.passive]
		string passiveDesc = PASSIVE_DESCRIPTION_SHORT_MAP[data.passive]
		result = Localize( "#HUD_LOOT_WITH_PASSIVE_DESC", result, Localize( passiveName ).toupper(), Localize( passiveDesc ) )
	}

	                
	foreach ( func in file.editLootDescCallbacks )
	{
		result = func( data.ref, forPlayer, result )
	}

	return result
}

void function AddCallback_EditLootDesc( string functionref( string, entity, string ) callback )
{
	Assert( !file.editLootDescCallbacks.contains( callback ), "Tried to add a callback that was already added" )
	file.editLootDescCallbacks.append( callback )
}
void function RemoveCallback_EditLootDesc( string functionref( string, entity, string ) callback )
{
	Assert( file.editLootDescCallbacks.contains( callback ), "Tried to remove a callback that was not added" )
	file.editLootDescCallbacks.fastremovebyvalue( callback )
}

#endif



                         
#if UI
void function SURVIVAL_UIInit_Override_DeathBox_RUI()
{
	if ( !IsConnected() )
		return

	if ( GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", 0 ) != 1 )
		return

	if ( !file.overrideDeathBoxRUI_Initialized )                                                                        
	{
		AddUICallback_OnLevelInit( SURVIVAL_UI_OnLevelInit )
		AddCallbackAndCallNow_UserInfoUpdated( HAS_DEATHBOX_OVERRIDE_OnUserInfoUpdated )
	}

	file.overrideDeathBoxRUI_Initialized = true
}


void function SURVIVAL_UI_OnLevelInit()
{
	if ( IsLobby() )
	{
		return
	}

	if ( GetCurrentPlaylistVarInt( "enableFlyers", 1 ) != 1 )
		return

	thread SURVIVAL_UI_GatherFriendInfo()
}

void function SURVIVAL_UI_GatherFriendInfo()
{
	if ( GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", 0 ) <= 0 )
		return

	Signal( uiGlobal.signalDummy, "GatherFriendInfo" )
	EndSignal( uiGlobal.signalDummy, "GatherFriendInfo" )
	EndSignal( uiGlobal.signalDummy, "GatheredEnoughFriendInfo" )


	if ( GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", HAS_DEATHBOX_OVERRIDE_FRIEND_PROFILES_TO_SEND ) == 0 )
		return

	file.overrideDeathBoxRUIProfilesTable.clear()
	file.profilesSent = 0

	FriendsData fData = GetFriendsData()

	while( fData.friends.len() > 0 )
	{
		int randomIndex = RandomInt( fData.friends.len() )
		Friend friend   = fData.friends[ randomIndex  ]
		fData.friends.fastremove( randomIndex )

		if ( friend.ingame == true )                                                                                               
			continue

		OverrideDeathBoxRUI_NetworkOptimizedStruct profileData

		file.overrideDeathBoxRUIProfilesTable[ friend.hardware + friend.id  ] <- profileData

		CommunityUserInfo ornull cui = GetUserInfo( friend.hardware, friend.id )                                                                                                                                              

		if ( !file.overrideDeathBoxRUIProfilesTable[ friend.hardware + friend.id  ].isValid )                                                                            
		{
			wait 2.0                                                   
		}
	}
}

                                                           
void function HAS_DEATHBOX_OVERRIDE_OnUserInfoUpdated( string hardware, string id )
{
	if ( !IsConnected() )                                                                                                                                                
		return

	if( !IsValid( GetLocalClientPlayer() ) )
		return

	if ( GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", 0 ) != 1 )
		return

	if ( IsLobby() )
		return

	if ( hardware == "" && id == "" )
		return

	CommunityUserInfo ornull cui = GetUserInfo( hardware, id )

	if ( cui == null )
		return

	if ( !((hardware + id) in file.overrideDeathBoxRUIProfilesTable) )                                                                   
		return

	expect CommunityUserInfo( cui )

	if ( !HasCommunityUserPlayedApex( cui ) )
		return

	if ( file.profilesSent >= GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", HAS_DEATHBOX_OVERRIDE_FRIEND_PROFILES_TO_SEND ) )
		return

	OverrideDeathBoxRUI_NetworkOptimizedStruct profileData
	profileData.name = cui.name
	profileData.hardware = cui.hardware
	profileData.playerID = cui.uid

	ItemFlavor character               = GetItemFlavorForCommunityUserInfo( cui, ePlayerStryderCharDataArraySlots.CHARACTER, eItemType.character )
	LoadoutEntry characterLoadoutEntry = Loadout_Character()
	profileData.characterIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( characterLoadoutEntry, character )

	ItemFlavor skin               = GetItemFlavorForCommunityUserInfo( cui, ePlayerStryderCharDataArraySlots.CHARACTER_SKIN, eItemType.character_skin )
	LoadoutEntry skinLoadoutEntry = Loadout_CharacterSkin( character )
	profileData.skinIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( skinLoadoutEntry, skin )

	ItemFlavor frame               = GetItemFlavorForCommunityUserInfo( cui, ePlayerStryderCharDataArraySlots.BANNER_FRAME, eItemType.gladiator_card_frame )
	LoadoutEntry frameLoadoutEntry = Loadout_GladiatorCardFrame( character )
	profileData.frameIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( frameLoadoutEntry, frame )

	ItemFlavor stance               = GetItemFlavorForCommunityUserInfo( cui, ePlayerStryderCharDataArraySlots.BANNER_STANCE, eItemType.gladiator_card_stance )
	LoadoutEntry stanceLoadoutEntry = Loadout_GladiatorCardStance( character )
	profileData.stanceIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( stanceLoadoutEntry, stance )

	ItemFlavor firstBadge               = GetBadgeItemFlavorForCommunityUserInfo( cui, character, 0 )
	LoadoutEntry firstBadgeLoadoutEntry = Loadout_GladiatorCardBadge( character, 0 )
	profileData.firstBadgeIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( firstBadgeLoadoutEntry, firstBadge )

	int firstBadgeDataInt = GetBadgeDataIntegerFromCommunityUserInfo( cui, 0 )
	profileData.firstBadgeDataInt = firstBadgeDataInt

	ItemFlavor secondBadge               = GetBadgeItemFlavorForCommunityUserInfo( cui, character, 1 )
	LoadoutEntry secondBadgeLoadoutEntry = Loadout_GladiatorCardBadge( character, 1 )
	profileData.secondBadgeIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( secondBadgeLoadoutEntry, secondBadge )

	int secondBadgeDataInt = GetBadgeDataIntegerFromCommunityUserInfo( cui, 1 )
	profileData.secondBadgeDataInt = secondBadgeDataInt

	ItemFlavor thirdBadge               = GetBadgeItemFlavorForCommunityUserInfo( cui, character, 2 )
	LoadoutEntry thirdBadgeLoadoutEntry = Loadout_GladiatorCardBadge( character, 2 )
	profileData.thirdBadgeIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( thirdBadgeLoadoutEntry, thirdBadge )

	int thirdBadgeDataInt = GetBadgeDataIntegerFromCommunityUserInfo( cui, 2 )
	profileData.thirdBadgeDataInt = thirdBadgeDataInt

	profileData.isValid = true

	file.overrideDeathBoxRUIProfilesTable[ hardware + id  ] = profileData

	                                                                                  
	Remote_ServerCallFunction("ClientCallback_RUIProfileList",
		profileData.name, profileData.hardware, profileData.playerID, profileData.characterIndex, profileData.skinIndex,
		profileData.frameIndex, profileData.stanceIndex, profileData.firstBadgeIndex, profileData.firstBadgeDataInt,
		profileData.secondBadgeIndex, profileData.secondBadgeDataInt, profileData.thirdBadgeIndex, profileData.thirdBadgeDataInt )

	if ( ++file.profilesSent >= GetCurrentPlaylistVarInt( "flyer_deathbox_friendlist_rui", HAS_DEATHBOX_OVERRIDE_FRIEND_PROFILES_TO_SEND ) )
	{
		Signal( uiGlobal.signalDummy, "GatheredEnoughFriendInfo" )                                        
	}
}
#endif          


#if SERVER
                                                         
 
	                                                         
		      

	                                                                                                       
	                                                 

	                                   
	 
		                            

		                                                             

		                                                                                                           
		                                  

		                                                                                                                                                                             
		                                                 

		                                                                                                                              
		                                                        
		                    
		                                                         
			        
		    
			                                                           

		                                                                                                                   


		                                                                                                                    
		                                                                  
		               
		                                                                       
			        
		    
			                                                 

		                                                                                                    


		                                                                                                                      
		                                                                        
		                
		                                                                        
			        
		    
			                                                   

		                                                                                                       

		                                                                                                                        
		                                                                          
		                 
		                                                                         
			        
		    
			                                                     

		                                                                                                          

		                                                                                                                                
		                                                                                
		                     
		                                                                             
			        
		    
			                                                             

		                                                                                                                      
		                                                                                                                                      

		                                                                                                                                  
		                                                                                 
		                      
		                                                                              
			        
		    
			                                                               

		                                                                                                                         
		                                                                                                                                        

		                                                                                                                                
		                                                                                
		                     
		                                                                             
			        
		    
			                                                             

		                                                                                                                      
		                                                                                                                                      
		                                                               
	 
 

                                                                                                                              
	                                                                                                                                         
	                                           
 
	                                                                                                                      
		      

	                                                         
	                                                                                                                                                                                                                                        
		      

	                                                      

	                       
	                               
	                               
	                                           
	                                 
	                                   
	                                     
	                                             
	                                                 
	                                               
	                                                   
	                                             
	                                                 

	                                                                   

	                                                                                                            
		      

	                                                         
		      

	                                                  
	                                                           
		                                                                                                                                                                                  
	    
		                                                                        
 

                                                                                                          
 
	                                                        
	                                                                                            
		            

	                                                                                                                       

	                                                                  

	                                                                                  
		            

	                                                                        
	                                                                                    
		            

	                                                                          
	                                                                                      
		            

	                                                                                
	                                                                                              
		            

	                                                                                 
	                                                                                                
		            

	                                                                                
	                                                                                              
		            

	                                                                                                                                        
	                                                                                                                                              
		            

	                                                                                                                                                
		            

	                                                                                                                                              
		            

	           
 

                                                                                                                    
 
	                                                 

 

                                                 
 
	                            

 

                         
                                                                 
 
	                                   

	                                                                                             
	                                          
	                                           
	                                                              
	                                                    
	                                                      
	                                                        
	                                                                
	                                                                    
	                                                                  
	                                                                      
	                                                                
	                                                                    
 
      

                                                                                            
 
	                                          
		                                                                                                                                                                                               

	                                             

	                                            
	 
		                                                                   
	 

	                                                             

	                                                                                                   

	                                                  

	                     

 
#endif              

#if SERVER && DEV
                                                         
 
	                                       
 
#endif                     

                                   

bool function IsDeathboxAutoPickupEnabled()
{
                            
                        
      
		bool defaultVal = false
       
	return GetCurrentPlaylistVarBool( "survival_deathbox_autopickup_enabled", defaultVal )
}

#if CLIENT || SERVER
void function SetCallback_LootTypeExtraCanUseFunction( LootData data, bool functionref( entity, entity, int ) func )
{
	Assert( IsValid( data ) )
	Assert( data.extraCanUseFunction == null, "Tried to set extraCanUseFunction for ref " + data.ref + " but it already has one." )
	data.extraCanUseFunction = func
}

void function ClearCallback_LootTypeExtraCanUseFunction( LootData data )
{
	Assert( IsValid( data ) )
	data.extraCanUseFunction = null
}
#endif

#if SERVER || CLIENT
bool function SURVIVAL_Loot_IsRestrictedPanelLocked ( int restrictedLootType, entity vendPanel )
{
	return file.restrictedLootInfo[ restrictedLootType ].isRestrictedPanelLocked( vendPanel )
}

                                                                                                         
bool function IsPanelWithGradeFlagsLocked( entity vendPanel )
{
	return GradeFlagsHas( vendPanel, eGradeFlags.IS_LOCKED )
}

entity function SURVIVAL_Loot_GetRestrictedPanel( int restrictedLootType, entity lootEnt )
{
	return file.restrictedLootInfo[ restrictedLootType ].getRestrictedPanel( lootEnt )
}

int function SURVIVAL_Loot_GetRestrictedLootType ( entity lootEnt )
{
	foreach ( int restrictedLootType in eRestrictedLootTypes )
	{
		if ( SURVIVAL_Loot_GetRestrictedPanel ( restrictedLootType, lootEnt ) != null )
			return restrictedLootType
	}
	return -1
}
#endif

#if SERVER
                                                                                                                                     
 
	                                                                                                                  
 

                                                               
 
	                                                                        

	                                                                      
	 
		                                                                                         
		                                                                                                               
			           
	 
	            
 
#endif

#if UI
array< string > function SURVIVAL_Loot_GetRestrictedDialogArray( int restrictedLootType )
{
	array< string > dialogArray = [ file.restrictedLootInfo[ restrictedLootType ].dialogPopupHeader,
	                                file.restrictedLootInfo[ restrictedLootType ].dialogPopupAreYouSure,
	                                file.restrictedLootInfo[ restrictedLootType ].dialogPopupDeny ]

	return dialogArray
}
#endif

#if SERVER || CLIENT || UI
void function SURVIVAL_Loot_InitRestrictedLoot()
{
	{
		RestrictedLootInfo emptyLoot
		             
		file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ] <- emptyLoot
		#if SERVER || CLIENT
			file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ].getRestrictedPanel = GetVaultPanelForLoot
			file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ].isRestrictedPanelLocked = IsPanelWithGradeFlagsLocked
		#endif
		#if SERVER
			                                                                                                                            
		#endif
		#if UI
			file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_VAULT_CONFIRM_HEADER"
			file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_VAULT_CONFIRM_BODY"
			file.restrictedLootInfo[ eRestrictedLootTypes.VAULT ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_VAULT_DENY_BODY"
		#endif
	}

	{
		RestrictedLootInfo emptyLoot
		              
		file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ] <- emptyLoot
		#if SERVER || CLIENT
			file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ].getRestrictedPanel = GetVaultPanelForLoot
			file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ].isRestrictedPanelLocked = IsPanelWithGradeFlagsLocked
		#endif
		#if SERVER
			                                                                                                                                 
		#endif
		#if UI
			file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_BRIDGE_VAULT_CONFIRM_HEADER"
			file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_BRIDGE_VAULT_CONFIRM_BODY"
			file.restrictedLootInfo[ eRestrictedLootTypes.SHIP_VAULT ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_BRIDGE_VAULT_DENY_BODY"
		#endif
	}

	{
		RestrictedLootInfo emptyLoot
		                     
		file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ] <- emptyLoot
		#if SERVER || CLIENT
			file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ].getRestrictedPanel = GetBloodTTRewardPanelForLoot
			file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ].isRestrictedPanelLocked = IsPanelWithGradeFlagsLocked
		#endif
		#if SERVER
			                                                                                                                                      
		#endif
		#if UI
			file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_BLOODTT_CONFIRM_HEADER"
			file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_BLOODTT_CONFIRM_BODY"
			file.restrictedLootInfo[ eRestrictedLootTypes.BLOODHOUND_TT ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_BLOODTT_DENY_BODY"
		#endif
	}

	{
		RestrictedLootInfo emptyLoot
		                  
		file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ] <- emptyLoot
                    
		#if SERVER || CLIENT

		file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ].getRestrictedPanel = GetCausticTTCanisterFrameForLoot
		file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ].isRestrictedPanelLocked = AreCausticTTCanistersClosed
		#endif
		#if SERVER
			                                                                                                                                     
		#endif
        
		#if UI
			file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_CAUSTICTT_CONFIRM_HEADER"
			file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_CAUSTICTT_CONFIRM_BODY"
			file.restrictedLootInfo[ eRestrictedLootTypes.CAUSTIC_TT ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_CAUSTICTT_DENY_BODY"
		#endif
	}

	{
		RestrictedLootInfo emptyLoot
                    
			                  
			file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ] <- emptyLoot
			#if SERVER || CLIENT
			file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ].getRestrictedPanel = GetRampartTTPanelForLoot
			file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ].isRestrictedPanelLocked = IsPanelWithGradeFlagsLocked
			#endif
			#if SERVER
				                                                                                                                                     
			#endif
			#if UI
				file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_RAMPARTTT_CONFIRM_HEADER"
				file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_RAMPARTTT_CONFIRM_BODY"
				file.restrictedLootInfo[ eRestrictedLootTypes.RAMPART_TT ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_RAMPARTTT_DENY_BODY"
			#endif
        
	}

	{
		RestrictedLootInfo emptyLoot
                        
			                           
			file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ] <- emptyLoot
			#if SERVER || CLIENT
				file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ].getRestrictedPanel = GetSpectreShackSmartLootBinForLoot
				file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ].isRestrictedPanelLocked = IsSpectreShackSmartLootLocked
			#endif
			#if SERVER
				                                                                                                                           
			#endif
			#if UI
				file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ].dialogPopupHeader = "#LOBA_ULT_BLACK_MARKET_SMARTLOOT_CONFIRM_HEADER"
				file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ].dialogPopupAreYouSure = "#LOBA_ULT_BLACK_MARKET_SMARTLOOT_CONFIRM_BODY"
				file.restrictedLootInfo[ eRestrictedLootTypes.SPECTRE_SHACK ].dialogPopupDeny = "#LOBA_ULT_BLACK_MARKET_SMARTLOOT_DENY_BODY"
			#endif
        
	}
}
#endif